// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_table_baoshi.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace TABLE {

  #region Messages
  public partial class BAOSHI : pb::IMessage {
    private static readonly pb::MessageParser<BAOSHI> _parser = new pb::MessageParser<BAOSHI>(() => new BAOSHI());
    public static pb::MessageParser<BAOSHI> Parser { get { return _parser; } }

    private int id_;
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_costItem_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> costItem_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// sint32 quality = 2;
    /// sint32 grade = 3;
    /// </summary>
    public pbc::RepeatedField<string> costItem {
      get { return costItem_; }
    }

    private static readonly pb::FieldCodec<string> _repeated_costNum_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> costNum_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> costNum {
      get { return costNum_; }
    }

    private static readonly pb::FieldCodec<string> _repeated_addattrNum_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> addattrNum_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// string addzsAtribute = 6;
    /// string addfsAtribute = 7;
    /// string adddsAtribute = 8;
    /// </summary>
    public pbc::RepeatedField<string> addattrNum {
      get { return addattrNum_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(id);
      }
      costItem_.WriteTo(output, _repeated_costItem_codec);
      costNum_.WriteTo(output, _repeated_costNum_codec);
      addattrNum_.WriteTo(output, _repeated_addattrNum_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(id);
      }
      size += costItem_.CalculateSize(_repeated_costItem_codec);
      size += costNum_.CalculateSize(_repeated_costNum_codec);
      size += addattrNum_.CalculateSize(_repeated_addattrNum_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadSInt32();
            break;
          }
          case 34: {
            costItem_.AddEntriesFrom(input, _repeated_costItem_codec);
            break;
          }
          case 42: {
            costNum_.AddEntriesFrom(input, _repeated_costNum_codec);
            break;
          }
          case 74: {
            addattrNum_.AddEntriesFrom(input, _repeated_addattrNum_codec);
            break;
          }
        }
      }
    }

  }

  public partial class BAOSHIARRAY : pb::IMessage {
    private static readonly pb::MessageParser<BAOSHIARRAY> _parser = new pb::MessageParser<BAOSHIARRAY>(() => new BAOSHIARRAY());
    public static pb::MessageParser<BAOSHIARRAY> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::TABLE.BAOSHI> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::TABLE.BAOSHI.Parser);
    private readonly pbc::RepeatedField<global::TABLE.BAOSHI> rows_ = new pbc::RepeatedField<global::TABLE.BAOSHI>();
    public pbc::RepeatedField<global::TABLE.BAOSHI> rows {
      get { return rows_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
