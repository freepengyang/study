//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// <auto-generated>
//------------------------------------------------------------------------------

// Generated from: protos/c_table_adventure.proto
using System.Collections.Generic;
public partial class AdventureTableManager : TableManager<TABLE.ADVENTUREARRAY, TABLE.ADVENTURE,int,AdventureTableManager>
{
	public override bool TryGetValue(int key, out TABLE.ADVENTURE tbl)
	{
		tbl = null;
		if (array == null || array.gItem == null)
			return false;
		TableHandle handle = null;
		if (array.gItem.id2offset.TryGetValue(key, out handle))
		{
			tbl = handle.Value as TABLE.ADVENTURE;
		}
		return null != tbl;
	}
	public int GetAdventureId(int id,int defaultValue = default(int))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.id;
		}
		else
		{
			return defaultValue;
		}
	}
	public int GetAdventureZhanhun(int id,int defaultValue = default(int))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.zhanhun;
		}
		else
		{
			return defaultValue;
		}
	}
	public int GetAdventureLevel(int id,int defaultValue = default(int))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.level;
		}
		else
		{
			return defaultValue;
		}
	}
	public string GetAdventureExp(int id,string defaultValue = default(string))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.exp;
		}
		else
		{
			return defaultValue;
		}
	}
	public string GetAdventureYinzi(int id,string defaultValue = default(string))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.yinzi;
		}
		else
		{
			return defaultValue;
		}
	}
	public string GetAdventureItem(int id,string defaultValue = default(string))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.item;
		}
		else
		{
			return defaultValue;
		}
	}
	public string GetAdventureBossProbability(int id,string defaultValue = default(string))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.bossProbability;
		}
		else
		{
			return defaultValue;
		}
	}
	public int GetAdventureBossDrop(int id,int defaultValue = default(int))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.bossDrop;
		}
		else
		{
			return defaultValue;
		}
	}
	public int GetAdventureBossNum(int id,int defaultValue = default(int))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.bossNum;
		}
		else
		{
			return defaultValue;
		}
	}
	public string GetAdventureMmodel1(int id,string defaultValue = default(string))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.mmodel1;
		}
		else
		{
			return defaultValue;
		}
	}
	public string GetAdventureMmodel2(int id,string defaultValue = default(string))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.mmodel2;
		}
		else
		{
			return defaultValue;
		}
	}
	public string GetAdventureMmodel3(int id,string defaultValue = default(string))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.mmodel3;
		}
		else
		{
			return defaultValue;
		}
	}
	public string GetAdventureBossmodel1(int id,string defaultValue = default(string))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.bossmodel1;
		}
		else
		{
			return defaultValue;
		}
	}
	public string GetAdventureBossmodel2(int id,string defaultValue = default(string))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.bossmodel2;
		}
		else
		{
			return defaultValue;
		}
	}
	public string GetAdventureBossmodel3(int id,string defaultValue = default(string))
	{
		TABLE.ADVENTURE cfg = null;
		if(TryGetValue(id,out cfg))
		{
			return cfg.bossmodel3;
		}
		else
		{
			return defaultValue;
		}
	}
}