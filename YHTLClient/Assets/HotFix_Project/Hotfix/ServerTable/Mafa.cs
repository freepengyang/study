// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mafa.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace mafa {

  #region Messages
  public sealed class MafaInfo : pb::IMessage {
    private static readonly pb::MessageParser<MafaInfo> _parser = new pb::MessageParser<MafaInfo>(() => new MafaInfo());
    public static pb::MessageParser<MafaInfo> Parser { get { return _parser; } }

    private int season_;
    /// <summary>
    ///赛季
    /// </summary>
    public int season {
      get { return season_; }
      set {
        season_ = value;
      }
    }

    private int exp_;
    /// <summary>
    ///经验
    /// </summary>
    public int exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    private int boxCount_;
    /// <summary>
    ///宝箱次数
    /// </summary>
    public int boxCount {
      get { return boxCount_; }
      set {
        boxCount_ = value;
      }
    }

    private int superUnlock_;
    /// <summary>
    ///高级层是否解锁，1已解锁
    /// </summary>
    public int superUnlock {
      get { return superUnlock_; }
      set {
        superUnlock_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::mafa.MafaLayer> _repeated_layers_codec
        = pb::FieldCodec.ForMessage(42, global::mafa.MafaLayer.Parser);
    private readonly pbc::RepeatedField<global::mafa.MafaLayer> layers_ = new pbc::RepeatedField<global::mafa.MafaLayer>();
    /// <summary>
    /// 层信息
    /// </summary>
    public pbc::RepeatedField<global::mafa.MafaLayer> layers {
      get { return layers_; }
    }

    private int layer_;
    /// <summary>
    ///层
    /// </summary>
    public int layer {
      get { return layer_; }
      set {
        layer_ = value;
      }
    }

    private int seasonEndDay_;
    /// <summary>
    ///赛季结束时间
    /// </summary>
    public int seasonEndDay {
      get { return seasonEndDay_; }
      set {
        seasonEndDay_ = value;
      }
    }

    private int boxLevel_;
    /// <summary>
    ///宝箱等级
    /// </summary>
    public int boxLevel {
      get { return boxLevel_; }
      set {
        boxLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (season != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(season);
      }
      if (exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(exp);
      }
      if (boxCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(boxCount);
      }
      if (superUnlock != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(superUnlock);
      }
      layers_.WriteTo(output, _repeated_layers_codec);
      if (layer != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(layer);
      }
      if (seasonEndDay != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(seasonEndDay);
      }
      if (boxLevel != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(boxLevel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (season != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(season);
      }
      if (exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(exp);
      }
      if (boxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(boxCount);
      }
      if (superUnlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(superUnlock);
      }
      size += layers_.CalculateSize(_repeated_layers_codec);
      if (layer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(layer);
      }
      if (seasonEndDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(seasonEndDay);
      }
      if (boxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(boxLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            season = input.ReadInt32();
            break;
          }
          case 16: {
            exp = input.ReadInt32();
            break;
          }
          case 24: {
            boxCount = input.ReadInt32();
            break;
          }
          case 32: {
            superUnlock = input.ReadInt32();
            break;
          }
          case 42: {
            layers_.AddEntriesFrom(input, _repeated_layers_codec);
            break;
          }
          case 48: {
            layer = input.ReadInt32();
            break;
          }
          case 56: {
            seasonEndDay = input.ReadInt32();
            break;
          }
          case 64: {
            boxLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class MafaLayerList : pb::IMessage {
    private static readonly pb::MessageParser<MafaLayerList> _parser = new pb::MessageParser<MafaLayerList>(() => new MafaLayerList());
    public static pb::MessageParser<MafaLayerList> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::mafa.MafaLayer> _repeated_layers_codec
        = pb::FieldCodec.ForMessage(10, global::mafa.MafaLayer.Parser);
    private readonly pbc::RepeatedField<global::mafa.MafaLayer> layers_ = new pbc::RepeatedField<global::mafa.MafaLayer>();
    /// <summary>
    /// 层信息
    /// </summary>
    public pbc::RepeatedField<global::mafa.MafaLayer> layers {
      get { return layers_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      layers_.WriteTo(output, _repeated_layers_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += layers_.CalculateSize(_repeated_layers_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            layers_.AddEntriesFrom(input, _repeated_layers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class MafaLayer : pb::IMessage {
    private static readonly pb::MessageParser<MafaLayer> _parser = new pb::MessageParser<MafaLayer>(() => new MafaLayer());
    public static pb::MessageParser<MafaLayer> Parser { get { return _parser; } }

    private int isSuper_;
    /// <summary>
    ///1是高级层，0是普通层
    /// </summary>
    public int isSuper {
      get { return isSuper_; }
      set {
        isSuper_ = value;
      }
    }

    private int layer_;
    /// <summary>
    ///层
    /// </summary>
    public int layer {
      get { return layer_; }
      set {
        layer_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (isSuper != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(isSuper);
      }
      if (layer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(layer);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (isSuper != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(isSuper);
      }
      if (layer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(layer);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            isSuper = input.ReadInt32();
            break;
          }
          case 16: {
            layer = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class MafaExpChange : pb::IMessage {
    private static readonly pb::MessageParser<MafaExpChange> _parser = new pb::MessageParser<MafaExpChange>(() => new MafaExpChange());
    public static pb::MessageParser<MafaExpChange> Parser { get { return _parser; } }

    private int exp_;
    /// <summary>
    ///经验
    /// </summary>
    public int exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    private int layer_;
    /// <summary>
    ///层
    /// </summary>
    public int layer {
      get { return layer_; }
      set {
        layer_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (exp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(exp);
      }
      if (layer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(layer);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(exp);
      }
      if (layer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(layer);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            exp = input.ReadInt32();
            break;
          }
          case 16: {
            layer = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ReqMafaLayerReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqMafaLayerReward> _parser = new pb::MessageParser<ReqMafaLayerReward>(() => new ReqMafaLayerReward());
    public static pb::MessageParser<ReqMafaLayerReward> Parser { get { return _parser; } }

    private int isSuper_;
    /// <summary>
    ///1是高级层，0是普通层
    /// </summary>
    public int isSuper {
      get { return isSuper_; }
      set {
        isSuper_ = value;
      }
    }

    private int layer_;
    /// <summary>
    ///层
    /// </summary>
    public int layer {
      get { return layer_; }
      set {
        layer_ = value;
      }
    }

    private int oneKey_;
    /// <summary>
    /// 1一键领取，0单个领取
    /// </summary>
    public int oneKey {
      get { return oneKey_; }
      set {
        oneKey_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (isSuper != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(isSuper);
      }
      if (layer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(layer);
      }
      if (oneKey != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(oneKey);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (isSuper != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(isSuper);
      }
      if (layer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(layer);
      }
      if (oneKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(oneKey);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            isSuper = input.ReadInt32();
            break;
          }
          case 16: {
            layer = input.ReadInt32();
            break;
          }
          case 24: {
            oneKey = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class MafaSuperLayerUnlock : pb::IMessage {
    private static readonly pb::MessageParser<MafaSuperLayerUnlock> _parser = new pb::MessageParser<MafaSuperLayerUnlock>(() => new MafaSuperLayerUnlock());
    public static pb::MessageParser<MafaSuperLayerUnlock> Parser { get { return _parser; } }

    private int boxLevel_;
    /// <summary>
    ///宝箱等级
    /// </summary>
    public int boxLevel {
      get { return boxLevel_; }
      set {
        boxLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (boxLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(boxLevel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (boxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(boxLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            boxLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class MafaBoxReward : pb::IMessage {
    private static readonly pb::MessageParser<MafaBoxReward> _parser = new pb::MessageParser<MafaBoxReward>(() => new MafaBoxReward());
    public static pb::MessageParser<MafaBoxReward> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::mafa.MafaRewardItem> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(10, global::mafa.MafaRewardItem.Parser);
    private readonly pbc::RepeatedField<global::mafa.MafaRewardItem> rewards_ = new pbc::RepeatedField<global::mafa.MafaRewardItem>();
    public pbc::RepeatedField<global::mafa.MafaRewardItem> rewards {
      get { return rewards_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class MafaRewardItem : pb::IMessage {
    private static readonly pb::MessageParser<MafaRewardItem> _parser = new pb::MessageParser<MafaRewardItem>(() => new MafaRewardItem());
    public static pb::MessageParser<MafaRewardItem> Parser { get { return _parser; } }

    private int itemId_;
    public int itemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int count_;
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (itemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(itemId);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (itemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(itemId);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemId = input.ReadInt32();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
