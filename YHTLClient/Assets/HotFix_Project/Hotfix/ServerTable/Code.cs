// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Code.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace code {

  #region Messages
  /// <summary>
  ///获取激活码，请求
  /// </summary>
  public sealed class ReqCode : pb::IMessage {
    private static readonly pb::MessageParser<ReqCode> _parser = new pb::MessageParser<ReqCode>(() => new ReqCode());
    public static pb::MessageParser<ReqCode> Parser { get { return _parser; } }

    private string code_ = "";
    /// <summary>
    ///激活码
    /// </summary>
    public string code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(code);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(code);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            code = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取激活码，响应
  /// </summary>
  public sealed class ResCodeReward : pb::IMessage {
    private static readonly pb::MessageParser<ResCodeReward> _parser = new pb::MessageParser<ResCodeReward>(() => new ResCodeReward());
    public static pb::MessageParser<ResCodeReward> Parser { get { return _parser; } }

    private int id_;
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
