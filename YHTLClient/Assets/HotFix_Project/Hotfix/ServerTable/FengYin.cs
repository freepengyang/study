// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FengYin.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace fengyin {

  #region Messages
  public sealed class FengYinOpen : pb::IMessage {
    private static readonly pb::MessageParser<FengYinOpen> _parser = new pb::MessageParser<FengYinOpen>(() => new FengYinOpen());
    public static pb::MessageParser<FengYinOpen> Parser { get { return _parser; } }

    private int level_;
    /// <summary>
    ///封印等级
    /// </summary>
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private long endTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    private string roleName_ = "";
    /// <summary>
    ///触发封印人的名字
    /// </summary>
    public string roleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int shortenCount_;
    /// <summary>
    ///加速人数
    /// </summary>
    public int shortenCount {
      get { return shortenCount_; }
      set {
        shortenCount_ = value;
      }
    }

    private int fengYinLevel_;
    /// <summary>
    ///当前封印过的等级，只会在下次封印开启才会改变
    /// </summary>
    public int fengYinLevel {
      get { return fengYinLevel_; }
      set {
        fengYinLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(level);
      }
      if (endTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(endTime);
      }
      if (roleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(roleName);
      }
      if (shortenCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(shortenCount);
      }
      if (fengYinLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(fengYinLevel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      if (roleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(roleName);
      }
      if (shortenCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(shortenCount);
      }
      if (fengYinLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(fengYinLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            level = input.ReadInt32();
            break;
          }
          case 16: {
            endTime = input.ReadInt64();
            break;
          }
          case 26: {
            roleName = input.ReadString();
            break;
          }
          case 32: {
            shortenCount = input.ReadInt32();
            break;
          }
          case 40: {
            fengYinLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class HuanJingOpen : pb::IMessage {
    private static readonly pb::MessageParser<HuanJingOpen> _parser = new pb::MessageParser<HuanJingOpen>(() => new HuanJingOpen());
    public static pb::MessageParser<HuanJingOpen> Parser { get { return _parser; } }

    private long startTime_;
    /// <summary>
    ///开启时间
    /// </summary>
    public long startTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    private long endTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    private int worldLeving_;
    /// <summary>
    ///封印等级
    /// </summary>
    public int worldLeving {
      get { return worldLeving_; }
      set {
        worldLeving_ = value;
      }
    }

    private int fengYinLevel_;
    /// <summary>
    ///当前封印过的等级，只会在下次封印开启才会改变
    /// </summary>
    public int fengYinLevel {
      get { return fengYinLevel_; }
      set {
        fengYinLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (startTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(startTime);
      }
      if (endTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(endTime);
      }
      if (worldLeving != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(worldLeving);
      }
      if (fengYinLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(fengYinLevel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (startTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(startTime);
      }
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      if (worldLeving != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(worldLeving);
      }
      if (fengYinLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(fengYinLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            startTime = input.ReadInt64();
            break;
          }
          case 16: {
            endTime = input.ReadInt64();
            break;
          }
          case 24: {
            worldLeving = input.ReadInt32();
            break;
          }
          case 32: {
            fengYinLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class HuanJingChange : pb::IMessage {
    private static readonly pb::MessageParser<HuanJingChange> _parser = new pb::MessageParser<HuanJingChange>(() => new HuanJingChange());
    public static pb::MessageParser<HuanJingChange> Parser { get { return _parser; } }

    private long time_;
    /// <summary>
    ///幻境剩余时间
    /// </summary>
    public long time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(time);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(time);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class FengYinClose : pb::IMessage {
    private static readonly pb::MessageParser<FengYinClose> _parser = new pb::MessageParser<FengYinClose>(() => new FengYinClose());
    public static pb::MessageParser<FengYinClose> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class HuanJingClose : pb::IMessage {
    private static readonly pb::MessageParser<HuanJingClose> _parser = new pb::MessageParser<HuanJingClose>(() => new HuanJingClose());
    public static pb::MessageParser<HuanJingClose> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class WorldLevel : pb::IMessage {
    private static readonly pb::MessageParser<WorldLevel> _parser = new pb::MessageParser<WorldLevel>(() => new WorldLevel());
    public static pb::MessageParser<WorldLevel> Parser { get { return _parser; } }

    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(level);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
