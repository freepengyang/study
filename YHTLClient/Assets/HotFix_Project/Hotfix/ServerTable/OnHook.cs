// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OnHook.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace onHook {

  #region Messages
  public sealed class OnHookRequest : pb::IMessage {
    private static readonly pb::MessageParser<OnHookRequest> _parser = new pb::MessageParser<OnHookRequest>(() => new OnHookRequest());
    public static pb::MessageParser<OnHookRequest> Parser { get { return _parser; } }

    private int mapId_;
    /// <summary>
    ///挂机地图
    /// </summary>
    public int mapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(mapId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mapId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mapId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class OnHookMsg : pb::IMessage {
    private static readonly pb::MessageParser<OnHookMsg> _parser = new pb::MessageParser<OnHookMsg>(() => new OnHookMsg());
    public static pb::MessageParser<OnHookMsg> Parser { get { return _parser; } }

    private long totalTime_;
    /// <summary>
    ///挂机持续时间
    /// </summary>
    public long totalTime {
      get { return totalTime_; }
      set {
        totalTime_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_rewardItem_codec
        = pb::FieldCodec.ForMessage(18, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> rewardItem_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    /// <summary>
    ///物品信息
    /// </summary>
    public pbc::RepeatedField<global::bag.BagItemInfo> rewardItem {
      get { return rewardItem_; }
    }

    private bool isOnHook_;
    /// <summary>
    ///是否在挂机
    /// </summary>
    public bool isOnHook {
      get { return isOnHook_; }
      set {
        isOnHook_ = value;
      }
    }

    private int mapId_;
    /// <summary>
    ///地图id
    /// </summary>
    public int mapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (totalTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(totalTime);
      }
      rewardItem_.WriteTo(output, _repeated_rewardItem_codec);
      if (isOnHook != false) {
        output.WriteRawTag(24);
        output.WriteBool(isOnHook);
      }
      if (mapId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(mapId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (totalTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(totalTime);
      }
      size += rewardItem_.CalculateSize(_repeated_rewardItem_codec);
      if (isOnHook != false) {
        size += 1 + 1;
      }
      if (mapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mapId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            totalTime = input.ReadInt64();
            break;
          }
          case 18: {
            rewardItem_.AddEntriesFrom(input, _repeated_rewardItem_codec);
            break;
          }
          case 24: {
            isOnHook = input.ReadBool();
            break;
          }
          case 32: {
            mapId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
