// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Stall.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace stall {

  #region Messages
  /// <summary>
  /// 摆摊物品信息
  /// </summary>
  public sealed class StallItemInfo : pb::IMessage {
    private static readonly pb::MessageParser<StallItemInfo> _parser = new pb::MessageParser<StallItemInfo>(() => new StallItemInfo());
    public static pb::MessageParser<StallItemInfo> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private global::bag.BagItemInfo item_;
    public global::bag.BagItemInfo item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    private int price_;
    public int price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    private long addTime_;
    public long addTime {
      get { return addTime_; }
      set {
        addTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(item);
      }
      if (price != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(price);
      }
      if (addTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(addTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(item);
      }
      if (price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(price);
      }
      if (addTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(addTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 18: {
            if (item_ == null) {
              item_ = new global::bag.BagItemInfo();
            }
            input.ReadMessage(item_);
            break;
          }
          case 24: {
            price = input.ReadInt32();
            break;
          }
          case 32: {
            addTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 摊位信息
  /// </summary>
  public sealed class StallInfo : pb::IMessage {
    private static readonly pb::MessageParser<StallInfo> _parser = new pb::MessageParser<StallInfo>(() => new StallInfo());
    public static pb::MessageParser<StallInfo> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private int gender_;
    public int gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    private string stallName_ = "";
    public string stallName {
      get { return stallName_; }
      set {
        stallName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long stallId_;
    public long stallId {
      get { return stallId_; }
      set {
        stallId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_label_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> label_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> label {
      get { return label_; }
    }

    private int mapId_;
    public int mapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::stall.StallItemInfo> _repeated_stallItems_codec
        = pb::FieldCodec.ForMessage(74, global::stall.StallItemInfo.Parser);
    private readonly pbc::RepeatedField<global::stall.StallItemInfo> stallItems_ = new pbc::RepeatedField<global::stall.StallItemInfo>();
    public pbc::RepeatedField<global::stall.StallItemInfo> stallItems {
      get { return stallItems_; }
    }

    private long startTime_;
    public long startTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    private long endTime_;
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    private bool active_;
    public bool active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    private bool chatEnabled_;
    public bool chatEnabled {
      get { return chatEnabled_; }
      set {
        chatEnabled_ = value;
      }
    }

    private int face_;
    public int face {
      get { return face_; }
      set {
        face_ = value;
      }
    }

    private string roleName_ = "";
    public string roleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int dir_;
    public int dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (gender != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(gender);
      }
      if (stallName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(stallName);
      }
      if (stallId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(stallId);
      }
      label_.WriteTo(output, _repeated_label_codec);
      if (mapId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(mapId);
      }
      if (x != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(y);
      }
      stallItems_.WriteTo(output, _repeated_stallItems_codec);
      if (startTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(startTime);
      }
      if (endTime != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(endTime);
      }
      if (active != false) {
        output.WriteRawTag(96);
        output.WriteBool(active);
      }
      if (chatEnabled != false) {
        output.WriteRawTag(104);
        output.WriteBool(chatEnabled);
      }
      if (face != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(face);
      }
      if (roleName.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(roleName);
      }
      if (dir != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(dir);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(gender);
      }
      if (stallName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(stallName);
      }
      if (stallId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(stallId);
      }
      size += label_.CalculateSize(_repeated_label_codec);
      if (mapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mapId);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      size += stallItems_.CalculateSize(_repeated_stallItems_codec);
      if (startTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(startTime);
      }
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      if (active != false) {
        size += 1 + 1;
      }
      if (chatEnabled != false) {
        size += 1 + 1;
      }
      if (face != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(face);
      }
      if (roleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(roleName);
      }
      if (dir != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(dir);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 16: {
            gender = input.ReadInt32();
            break;
          }
          case 26: {
            stallName = input.ReadString();
            break;
          }
          case 32: {
            stallId = input.ReadInt64();
            break;
          }
          case 42:
          case 40: {
            label_.AddEntriesFrom(input, _repeated_label_codec);
            break;
          }
          case 48: {
            mapId = input.ReadInt32();
            break;
          }
          case 56: {
            x = input.ReadInt32();
            break;
          }
          case 64: {
            y = input.ReadInt32();
            break;
          }
          case 74: {
            stallItems_.AddEntriesFrom(input, _repeated_stallItems_codec);
            break;
          }
          case 80: {
            startTime = input.ReadInt64();
            break;
          }
          case 88: {
            endTime = input.ReadInt64();
            break;
          }
          case 96: {
            active = input.ReadBool();
            break;
          }
          case 104: {
            chatEnabled = input.ReadBool();
            break;
          }
          case 112: {
            face = input.ReadInt32();
            break;
          }
          case 122: {
            roleName = input.ReadString();
            break;
          }
          case 128: {
            dir = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 摆摊交易日志
  /// </summary>
  public sealed class StallTradeLogInfo : pb::IMessage {
    private static readonly pb::MessageParser<StallTradeLogInfo> _parser = new pb::MessageParser<StallTradeLogInfo>(() => new StallTradeLogInfo());
    public static pb::MessageParser<StallTradeLogInfo> Parser { get { return _parser; } }

    private long time_;
    /// <summary>
    /// 购买时间
    /// </summary>
    public long time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private string buyer_ = "";
    /// <summary>
    /// 购买人
    /// </summary>
    public string buyer {
      get { return buyer_; }
      set {
        buyer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int configId_;
    /// <summary>
    /// 购买物品id
    /// </summary>
    public int configId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    private string itemName_ = "";
    /// <summary>
    /// 购买物品名称
    /// </summary>
    public string itemName {
      get { return itemName_; }
      set {
        itemName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int count_;
    /// <summary>
    /// 购买物品数量
    /// </summary>
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private int consume_;
    /// <summary>
    /// 消耗金子
    /// </summary>
    public int consume {
      get { return consume_; }
      set {
        consume_ = value;
      }
    }

    private int obtain_;
    /// <summary>
    /// 获得金子
    /// </summary>
    public int obtain {
      get { return obtain_; }
      set {
        obtain_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(time);
      }
      if (buyer.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(buyer);
      }
      if (configId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(configId);
      }
      if (itemName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(itemName);
      }
      if (count != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(count);
      }
      if (consume != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(consume);
      }
      if (obtain != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(obtain);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(time);
      }
      if (buyer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(buyer);
      }
      if (configId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(configId);
      }
      if (itemName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(itemName);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (consume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(consume);
      }
      if (obtain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(obtain);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            time = input.ReadInt64();
            break;
          }
          case 18: {
            buyer = input.ReadString();
            break;
          }
          case 24: {
            configId = input.ReadInt32();
            break;
          }
          case 34: {
            itemName = input.ReadString();
            break;
          }
          case 40: {
            count = input.ReadInt32();
            break;
          }
          case 48: {
            consume = input.ReadInt32();
            break;
          }
          case 56: {
            obtain = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 摆摊留言日志
  /// </summary>
  public sealed class StallChatLogInfo : pb::IMessage {
    private static readonly pb::MessageParser<StallChatLogInfo> _parser = new pb::MessageParser<StallChatLogInfo>(() => new StallChatLogInfo());
    public static pb::MessageParser<StallChatLogInfo> Parser { get { return _parser; } }

    private long sender_;
    public long sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    private string name_ = "";
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string message_ = "";
    public string message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int vip_;
    public int vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    private int gender_;
    public int gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    private int photo_;
    public int photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    private int level_;
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int career_;
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    private long time_;
    public long time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (sender != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(sender);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(message);
      }
      if (vip != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(vip);
      }
      if (gender != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(gender);
      }
      if (photo != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(photo);
      }
      if (level != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(level);
      }
      if (career != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(career);
      }
      if (time != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(time);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (sender != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(sender);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(message);
      }
      if (vip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(vip);
      }
      if (gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(gender);
      }
      if (photo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(photo);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(time);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            sender = input.ReadInt64();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 26: {
            message = input.ReadString();
            break;
          }
          case 32: {
            vip = input.ReadInt32();
            break;
          }
          case 40: {
            gender = input.ReadInt32();
            break;
          }
          case 48: {
            photo = input.ReadInt32();
            break;
          }
          case 56: {
            level = input.ReadInt32();
            break;
          }
          case 64: {
            career = input.ReadInt32();
            break;
          }
          case 72: {
            time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 查询摊位请求
  /// </summary>
  public sealed class QueryStallReq : pb::IMessage {
    private static readonly pb::MessageParser<QueryStallReq> _parser = new pb::MessageParser<QueryStallReq>(() => new QueryStallReq());
    public static pb::MessageParser<QueryStallReq> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 查询摊位反馈
  /// </summary>
  public sealed class QueryStallAck : pb::IMessage {
    private static readonly pb::MessageParser<QueryStallAck> _parser = new pb::MessageParser<QueryStallAck>(() => new QueryStallAck());
    public static pb::MessageParser<QueryStallAck> Parser { get { return _parser; } }

    private bool active_;
    /// <summary>
    /// 是否处于摆摊状态
    /// </summary>
    public bool active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    private global::stall.StallInfo stallInfo_;
    public global::stall.StallInfo stallInfo {
      get { return stallInfo_; }
      set {
        stallInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (active != false) {
        output.WriteRawTag(8);
        output.WriteBool(active);
      }
      if (stallInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(stallInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (active != false) {
        size += 1 + 1;
      }
      if (stallInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(stallInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            active = input.ReadBool();
            break;
          }
          case 18: {
            if (stallInfo_ == null) {
              stallInfo_ = new global::stall.StallInfo();
            }
            input.ReadMessage(stallInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 摊位信息变更通知(自己和别人的摊位都有可能)
  /// </summary>
  public sealed class StallInfoChangedNtf : pb::IMessage {
    private static readonly pb::MessageParser<StallInfoChangedNtf> _parser = new pb::MessageParser<StallInfoChangedNtf>(() => new StallInfoChangedNtf());
    public static pb::MessageParser<StallInfoChangedNtf> Parser { get { return _parser; } }

    private global::stall.StallInfo stallInfo_;
    public global::stall.StallInfo stallInfo {
      get { return stallInfo_; }
      set {
        stallInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (stallInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(stallInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (stallInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(stallInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stallInfo_ == null) {
              stallInfo_ = new global::stall.StallInfo();
            }
            input.ReadMessage(stallInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 摆摊物品上架请求
  /// </summary>
  public sealed class AddStallItemReq : pb::IMessage {
    private static readonly pb::MessageParser<AddStallItemReq> _parser = new pb::MessageParser<AddStallItemReq>(() => new AddStallItemReq());
    public static pb::MessageParser<AddStallItemReq> Parser { get { return _parser; } }

    private long itemGuid_;
    public long itemGuid {
      get { return itemGuid_; }
      set {
        itemGuid_ = value;
      }
    }

    private int count_;
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private int price_;
    public int price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (itemGuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(itemGuid);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
      if (price != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(price);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (itemGuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(itemGuid);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(price);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemGuid = input.ReadInt64();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
          case 24: {
            price = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 摆摊物品上架响应
  /// </summary>
  public sealed class AddStallItemAck : pb::IMessage {
    private static readonly pb::MessageParser<AddStallItemAck> _parser = new pb::MessageParser<AddStallItemAck>(() => new AddStallItemAck());
    public static pb::MessageParser<AddStallItemAck> Parser { get { return _parser; } }

    private global::stall.StallItemInfo item_;
    public global::stall.StallItemInfo item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(item);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(item);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (item_ == null) {
              item_ = new global::stall.StallItemInfo();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 摆摊物品下架请求
  /// </summary>
  public sealed class RemoveStallItemReq : pb::IMessage {
    private static readonly pb::MessageParser<RemoveStallItemReq> _parser = new pb::MessageParser<RemoveStallItemReq>(() => new RemoveStallItemReq());
    public static pb::MessageParser<RemoveStallItemReq> Parser { get { return _parser; } }

    private long itemGuid_;
    public long itemGuid {
      get { return itemGuid_; }
      set {
        itemGuid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (itemGuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(itemGuid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (itemGuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(itemGuid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemGuid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 摆摊物品下架响应
  /// </summary>
  public sealed class RemoveStallItemAck : pb::IMessage {
    private static readonly pb::MessageParser<RemoveStallItemAck> _parser = new pb::MessageParser<RemoveStallItemAck>(() => new RemoveStallItemAck());
    public static pb::MessageParser<RemoveStallItemAck> Parser { get { return _parser; } }

    private long itemGuid_;
    public long itemGuid {
      get { return itemGuid_; }
      set {
        itemGuid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (itemGuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(itemGuid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (itemGuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(itemGuid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemGuid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 开始摆摊请求
  /// </summary>
  public sealed class StartStallReq : pb::IMessage {
    private static readonly pb::MessageParser<StartStallReq> _parser = new pb::MessageParser<StartStallReq>(() => new StartStallReq());
    public static pb::MessageParser<StartStallReq> Parser { get { return _parser; } }

    private string stallName_ = "";
    public string stallName {
      get { return stallName_; }
      set {
        stallName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_label_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> label_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> label {
      get { return label_; }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private int dir_;
    public int dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (stallName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(stallName);
      }
      label_.WriteTo(output, _repeated_label_codec);
      if (x != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(y);
      }
      if (dir != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(dir);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (stallName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(stallName);
      }
      size += label_.CalculateSize(_repeated_label_codec);
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      if (dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(dir);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            stallName = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            label_.AddEntriesFrom(input, _repeated_label_codec);
            break;
          }
          case 24: {
            x = input.ReadInt32();
            break;
          }
          case 32: {
            y = input.ReadInt32();
            break;
          }
          case 40: {
            dir = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 开始摆摊响应
  /// </summary>
  public sealed class StartStallAck : pb::IMessage {
    private static readonly pb::MessageParser<StartStallAck> _parser = new pb::MessageParser<StartStallAck>(() => new StartStallAck());
    public static pb::MessageParser<StartStallAck> Parser { get { return _parser; } }

    private global::stall.StallInfo stallInfo_;
    public global::stall.StallInfo stallInfo {
      get { return stallInfo_; }
      set {
        stallInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (stallInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(stallInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (stallInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(stallInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stallInfo_ == null) {
              stallInfo_ = new global::stall.StallInfo();
            }
            input.ReadMessage(stallInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 结束摆摊请求
  /// </summary>
  public sealed class CloseStallReq : pb::IMessage {
    private static readonly pb::MessageParser<CloseStallReq> _parser = new pb::MessageParser<CloseStallReq>(() => new CloseStallReq());
    public static pb::MessageParser<CloseStallReq> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 结束摆摊响应
  /// </summary>
  public sealed class CloseStallAck : pb::IMessage {
    private static readonly pb::MessageParser<CloseStallAck> _parser = new pb::MessageParser<CloseStallAck>(() => new CloseStallAck());
    public static pb::MessageParser<CloseStallAck> Parser { get { return _parser; } }

    private global::stall.StallInfo stallInfo_;
    public global::stall.StallInfo stallInfo {
      get { return stallInfo_; }
      set {
        stallInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (stallInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(stallInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (stallInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(stallInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stallInfo_ == null) {
              stallInfo_ = new global::stall.StallInfo();
            }
            input.ReadMessage(stallInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 购买摆摊物品请求
  /// </summary>
  public sealed class BuyStallItemReq : pb::IMessage {
    private static readonly pb::MessageParser<BuyStallItemReq> _parser = new pb::MessageParser<BuyStallItemReq>(() => new BuyStallItemReq());
    public static pb::MessageParser<BuyStallItemReq> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private long itemGuid_;
    public long itemGuid {
      get { return itemGuid_; }
      set {
        itemGuid_ = value;
      }
    }

    private int count_;
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private int price_;
    public int price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (itemGuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(itemGuid);
      }
      if (count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(count);
      }
      if (price != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(price);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (itemGuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(itemGuid);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(price);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 16: {
            itemGuid = input.ReadInt64();
            break;
          }
          case 24: {
            count = input.ReadInt32();
            break;
          }
          case 32: {
            price = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 购买摆摊物品响应
  /// </summary>
  public sealed class BuyStallItemAck : pb::IMessage {
    private static readonly pb::MessageParser<BuyStallItemAck> _parser = new pb::MessageParser<BuyStallItemAck>(() => new BuyStallItemAck());
    public static pb::MessageParser<BuyStallItemAck> Parser { get { return _parser; } }

    private long itemGuid_;
    public long itemGuid {
      get { return itemGuid_; }
      set {
        itemGuid_ = value;
      }
    }

    private int count_;
    /// <summary>
    /// 剩余数量
    /// </summary>
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (itemGuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(itemGuid);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (itemGuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(itemGuid);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemGuid = input.ReadInt64();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 查询摆摊交易日志列表请求
  /// </summary>
  public sealed class QueryStallTradeLogInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<QueryStallTradeLogInfoReq> _parser = new pb::MessageParser<QueryStallTradeLogInfoReq>(() => new QueryStallTradeLogInfoReq());
    public static pb::MessageParser<QueryStallTradeLogInfoReq> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 查询摆摊交易日志列表通知
  /// </summary>
  public sealed class QueryStallTradeLogInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<QueryStallTradeLogInfoNtf> _parser = new pb::MessageParser<QueryStallTradeLogInfoNtf>(() => new QueryStallTradeLogInfoNtf());
    public static pb::MessageParser<QueryStallTradeLogInfoNtf> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::stall.StallTradeLogInfo> _repeated_logList_codec
        = pb::FieldCodec.ForMessage(10, global::stall.StallTradeLogInfo.Parser);
    private readonly pbc::RepeatedField<global::stall.StallTradeLogInfo> logList_ = new pbc::RepeatedField<global::stall.StallTradeLogInfo>();
    public pbc::RepeatedField<global::stall.StallTradeLogInfo> logList {
      get { return logList_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      logList_.WriteTo(output, _repeated_logList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += logList_.CalculateSize(_repeated_logList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            logList_.AddEntriesFrom(input, _repeated_logList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 新的摆摊交易日志通知
  /// </summary>
  public sealed class StallTradeLogInfoNewNtf : pb::IMessage {
    private static readonly pb::MessageParser<StallTradeLogInfoNewNtf> _parser = new pb::MessageParser<StallTradeLogInfoNewNtf>(() => new StallTradeLogInfoNewNtf());
    public static pb::MessageParser<StallTradeLogInfoNewNtf> Parser { get { return _parser; } }

    private global::stall.StallTradeLogInfo info_;
    public global::stall.StallTradeLogInfo info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(info);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::stall.StallTradeLogInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 摆摊聊天开关请求
  /// </summary>
  public sealed class ChangeStallChatReq : pb::IMessage {
    private static readonly pb::MessageParser<ChangeStallChatReq> _parser = new pb::MessageParser<ChangeStallChatReq>(() => new ChangeStallChatReq());
    public static pb::MessageParser<ChangeStallChatReq> Parser { get { return _parser; } }

    private bool chatEnabled_;
    public bool chatEnabled {
      get { return chatEnabled_; }
      set {
        chatEnabled_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (chatEnabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(chatEnabled);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (chatEnabled != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            chatEnabled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 摆摊聊天开关响应
  /// </summary>
  public sealed class ChangeStallChatAck : pb::IMessage {
    private static readonly pb::MessageParser<ChangeStallChatAck> _parser = new pb::MessageParser<ChangeStallChatAck>(() => new ChangeStallChatAck());
    public static pb::MessageParser<ChangeStallChatAck> Parser { get { return _parser; } }

    private bool chatEnabled_;
    public bool chatEnabled {
      get { return chatEnabled_; }
      set {
        chatEnabled_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (chatEnabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(chatEnabled);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (chatEnabled != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            chatEnabled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 修改摊位名称请求
  /// </summary>
  public sealed class ChangeStallNameReq : pb::IMessage {
    private static readonly pb::MessageParser<ChangeStallNameReq> _parser = new pb::MessageParser<ChangeStallNameReq>(() => new ChangeStallNameReq());
    public static pb::MessageParser<ChangeStallNameReq> Parser { get { return _parser; } }

    private string stallName_ = "";
    public string stallName {
      get { return stallName_; }
      set {
        stallName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (stallName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(stallName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (stallName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(stallName);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            stallName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 修改摊位名称响应
  /// </summary>
  public sealed class ChangeStallNameAck : pb::IMessage {
    private static readonly pb::MessageParser<ChangeStallNameAck> _parser = new pb::MessageParser<ChangeStallNameAck>(() => new ChangeStallNameAck());
    public static pb::MessageParser<ChangeStallNameAck> Parser { get { return _parser; } }

    private string stallName_ = "";
    public string stallName {
      get { return stallName_; }
      set {
        stallName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (stallName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(stallName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (stallName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(stallName);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            stallName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 摊位留言请求
  /// </summary>
  public sealed class LeaveStallMsgReq : pb::IMessage {
    private static readonly pb::MessageParser<LeaveStallMsgReq> _parser = new pb::MessageParser<LeaveStallMsgReq>(() => new LeaveStallMsgReq());
    public static pb::MessageParser<LeaveStallMsgReq> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private string message_ = "";
    public string message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 18: {
            message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 摊位留言响应
  /// </summary>
  public sealed class LeaveStallMsgNtf : pb::IMessage {
    private static readonly pb::MessageParser<LeaveStallMsgNtf> _parser = new pb::MessageParser<LeaveStallMsgNtf>(() => new LeaveStallMsgNtf());
    public static pb::MessageParser<LeaveStallMsgNtf> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private global::stall.StallChatLogInfo log_;
    public global::stall.StallChatLogInfo log {
      get { return log_; }
      set {
        log_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (log_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(log);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (log_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(log);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 18: {
            if (log_ == null) {
              log_ = new global::stall.StallChatLogInfo();
            }
            input.ReadMessage(log_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 查询摆摊留言日志列表响应
  /// </summary>
  public sealed class QueryStallChatLogInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<QueryStallChatLogInfoNtf> _parser = new pb::MessageParser<QueryStallChatLogInfoNtf>(() => new QueryStallChatLogInfoNtf());
    public static pb::MessageParser<QueryStallChatLogInfoNtf> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::stall.StallChatLogInfo> _repeated_logList_codec
        = pb::FieldCodec.ForMessage(10, global::stall.StallChatLogInfo.Parser);
    private readonly pbc::RepeatedField<global::stall.StallChatLogInfo> logList_ = new pbc::RepeatedField<global::stall.StallChatLogInfo>();
    public pbc::RepeatedField<global::stall.StallChatLogInfo> logList {
      get { return logList_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      logList_.WriteTo(output, _repeated_logList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += logList_.CalculateSize(_repeated_logList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            logList_.AddEntriesFrom(input, _repeated_logList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
