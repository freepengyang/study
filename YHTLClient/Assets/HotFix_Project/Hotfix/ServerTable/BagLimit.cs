// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BagLimit.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace baglimit {

  #region Messages
  public sealed class LimitItemInfo : pb::IMessage {
    private static readonly pb::MessageParser<LimitItemInfo> _parser = new pb::MessageParser<LimitItemInfo>(() => new LimitItemInfo());
    public static pb::MessageParser<LimitItemInfo> Parser { get { return _parser; } }

    private int itemId_;
    public int itemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int remainCount_;
    public int remainCount {
      get { return remainCount_; }
      set {
        remainCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (itemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(itemId);
      }
      if (remainCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(remainCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (itemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(itemId);
      }
      if (remainCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(remainCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemId = input.ReadInt32();
            break;
          }
          case 16: {
            remainCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///物品使用上限情况下发
  /// </summary>
  public sealed class LimitItemInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<LimitItemInfoNtf> _parser = new pb::MessageParser<LimitItemInfoNtf>(() => new LimitItemInfoNtf());
    public static pb::MessageParser<LimitItemInfoNtf> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::baglimit.LimitItemInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::baglimit.LimitItemInfo.Parser);
    private readonly pbc::RepeatedField<global::baglimit.LimitItemInfo> list_ = new pbc::RepeatedField<global::baglimit.LimitItemInfo>();
    public pbc::RepeatedField<global::baglimit.LimitItemInfo> list {
      get { return list_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class EquipItemModifyNBValueReqItem : pb::IMessage {
    private static readonly pb::MessageParser<EquipItemModifyNBValueReqItem> _parser = new pb::MessageParser<EquipItemModifyNBValueReqItem>(() => new EquipItemModifyNBValueReqItem());
    public static pb::MessageParser<EquipItemModifyNBValueReqItem> Parser { get { return _parser; } }

    private int bagIndex_;
    /// <summary>
    ///背包位置
    /// </summary>
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    private int position_;
    /// <summary>
    ///穿戴位置
    /// </summary>
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bagIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(bagIndex);
      }
      if (position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(position);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bagIndex = input.ReadInt32();
            break;
          }
          case 16: {
            position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EquipItemModifyNBValueReq : pb::IMessage {
    private static readonly pb::MessageParser<EquipItemModifyNBValueReq> _parser = new pb::MessageParser<EquipItemModifyNBValueReq>(() => new EquipItemModifyNBValueReq());
    public static pb::MessageParser<EquipItemModifyNBValueReq> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::baglimit.EquipItemModifyNBValueReqItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::baglimit.EquipItemModifyNBValueReqItem.Parser);
    private readonly pbc::RepeatedField<global::baglimit.EquipItemModifyNBValueReqItem> items_ = new pbc::RepeatedField<global::baglimit.EquipItemModifyNBValueReqItem>();
    public pbc::RepeatedField<global::baglimit.EquipItemModifyNBValueReqItem> items {
      get { return items_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class EquipItemModifyNBValueNtfItem : pb::IMessage {
    private static readonly pb::MessageParser<EquipItemModifyNBValueNtfItem> _parser = new pb::MessageParser<EquipItemModifyNBValueNtfItem>(() => new EquipItemModifyNBValueNtfItem());
    public static pb::MessageParser<EquipItemModifyNBValueNtfItem> Parser { get { return _parser; } }

    private int bagIndex_;
    /// <summary>
    ///背包位置
    /// </summary>
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    private int position_;
    /// <summary>
    ///穿戴位置
    /// </summary>
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    private int modifyNBValue_;
    /// <summary>
    ///改变的战斗力
    /// </summary>
    public int modifyNBValue {
      get { return modifyNBValue_; }
      set {
        modifyNBValue_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bagIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(bagIndex);
      }
      if (position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(position);
      }
      if (modifyNBValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(modifyNBValue);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      if (modifyNBValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(modifyNBValue);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bagIndex = input.ReadInt32();
            break;
          }
          case 16: {
            position = input.ReadInt32();
            break;
          }
          case 24: {
            modifyNBValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EquipItemModifyNBValueNtf : pb::IMessage {
    private static readonly pb::MessageParser<EquipItemModifyNBValueNtf> _parser = new pb::MessageParser<EquipItemModifyNBValueNtf>(() => new EquipItemModifyNBValueNtf());
    public static pb::MessageParser<EquipItemModifyNBValueNtf> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::baglimit.EquipItemModifyNBValueNtfItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::baglimit.EquipItemModifyNBValueNtfItem.Parser);
    private readonly pbc::RepeatedField<global::baglimit.EquipItemModifyNBValueNtfItem> items_ = new pbc::RepeatedField<global::baglimit.EquipItemModifyNBValueNtfItem>();
    public pbc::RepeatedField<global::baglimit.EquipItemModifyNBValueNtfItem> items {
      get { return items_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///增加背包格子
  /// </summary>
  public sealed class AddBagCountReq : pb::IMessage {
    private static readonly pb::MessageParser<AddBagCountReq> _parser = new pb::MessageParser<AddBagCountReq>(() => new AddBagCountReq());
    public static pb::MessageParser<AddBagCountReq> Parser { get { return _parser; } }

    private int num_;
    /// <summary>
    ///增加的背包格子数
    /// </summary>
    public int num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(num);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(num);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
