// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Bag.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace bag {

  #region Messages
  /// <summary>
  ///新版本
  ///背包
  /// </summary>
  public sealed class BagInfo : pb::IMessage {
    private static readonly pb::MessageParser<BagInfo> _parser = new pb::MessageParser<BagInfo>(() => new BagInfo());
    public static pb::MessageParser<BagInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_bagItems_codec
        = pb::FieldCodec.ForMessage(10, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> bagItems_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    /// <summary>
    ///背包里的物品
    /// </summary>
    public pbc::RepeatedField<global::bag.BagItemInfo> bagItems {
      get { return bagItems_; }
    }

    private static readonly pb::FieldCodec<global::bag.EquipInfo> _repeated_equips_codec
        = pb::FieldCodec.ForMessage(18, global::bag.EquipInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.EquipInfo> equips_ = new pbc::RepeatedField<global::bag.EquipInfo>();
    /// <summary>
    ///身上的装备
    /// </summary>
    public pbc::RepeatedField<global::bag.EquipInfo> equips {
      get { return equips_; }
    }

    private static readonly pb::FieldCodec<global::bag.CurrencyInfo> _repeated_currencyInfos_codec
        = pb::FieldCodec.ForMessage(26, global::bag.CurrencyInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.CurrencyInfo> currencyInfos_ = new pbc::RepeatedField<global::bag.CurrencyInfo>();
    /// <summary>
    ///身上的货币
    /// </summary>
    public pbc::RepeatedField<global::bag.CurrencyInfo> currencyInfos {
      get { return currencyInfos_; }
    }

    private int maxCount_;
    /// <summary>
    ///背包格数
    /// </summary>
    public int maxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    private int costYuanbao_;
    /// <summary>
    ///累计消耗元宝
    /// </summary>
    public int costYuanbao {
      get { return costYuanbao_; }
      set {
        costYuanbao_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagItems_.WriteTo(output, _repeated_bagItems_codec);
      equips_.WriteTo(output, _repeated_equips_codec);
      currencyInfos_.WriteTo(output, _repeated_currencyInfos_codec);
      if (maxCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(maxCount);
      }
      if (costYuanbao != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(costYuanbao);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += bagItems_.CalculateSize(_repeated_bagItems_codec);
      size += equips_.CalculateSize(_repeated_equips_codec);
      size += currencyInfos_.CalculateSize(_repeated_currencyInfos_codec);
      if (maxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxCount);
      }
      if (costYuanbao != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(costYuanbao);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagItems_.AddEntriesFrom(input, _repeated_bagItems_codec);
            break;
          }
          case 18: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
          case 26: {
            currencyInfos_.AddEntriesFrom(input, _repeated_currencyInfos_codec);
            break;
          }
          case 32: {
            maxCount = input.ReadInt32();
            break;
          }
          case 40: {
            costYuanbao = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///货币
  /// </summary>
  public sealed class CurrencyInfo : pb::IMessage {
    private static readonly pb::MessageParser<CurrencyInfo> _parser = new pb::MessageParser<CurrencyInfo>(() => new CurrencyInfo());
    public static pb::MessageParser<CurrencyInfo> Parser { get { return _parser; } }

    private int id_;
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long value_;
    public long value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (value != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(value);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            value = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class RandAttr : pb::IMessage {
    private static readonly pb::MessageParser<RandAttr> _parser = new pb::MessageParser<RandAttr>(() => new RandAttr());
    public static pb::MessageParser<RandAttr> Parser { get { return _parser; } }

    private int type_;
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private int param1_;
    public int param1 {
      get { return param1_; }
      set {
        param1_ = value;
      }
    }

    private int param2_;
    public int param2 {
      get { return param2_; }
      set {
        param2_ = value;
      }
    }

    private int value1_;
    public int value1 {
      get { return value1_; }
      set {
        value1_ = value;
      }
    }

    private int value2_;
    public int value2 {
      get { return value2_; }
      set {
        value2_ = value;
      }
    }

    private int configId1_;
    /// <summary>
    ///词条字段品质颜色
    /// </summary>
    public int configId1 {
      get { return configId1_; }
      set {
        configId1_ = value;
      }
    }

    private int configId2_;
    /// <summary>
    ///词条字段品质颜色
    /// </summary>
    public int configId2 {
      get { return configId2_; }
      set {
        configId2_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(type);
      }
      if (param1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(param1);
      }
      if (param2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(param2);
      }
      if (value1 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(value1);
      }
      if (value2 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(value2);
      }
      if (configId1 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(configId1);
      }
      if (configId2 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(configId2);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      if (param1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(param1);
      }
      if (param2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(param2);
      }
      if (value1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(value1);
      }
      if (value2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(value2);
      }
      if (configId1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(configId1);
      }
      if (configId2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(configId2);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type = input.ReadInt32();
            break;
          }
          case 16: {
            param1 = input.ReadInt32();
            break;
          }
          case 24: {
            param2 = input.ReadInt32();
            break;
          }
          case 32: {
            value1 = input.ReadInt32();
            break;
          }
          case 40: {
            value2 = input.ReadInt32();
            break;
          }
          case 48: {
            configId1 = input.ReadInt32();
            break;
          }
          case 56: {
            configId2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///物品
  /// </summary>
  public sealed class BagItemInfo : pb::IMessage {
    private static readonly pb::MessageParser<BagItemInfo> _parser = new pb::MessageParser<BagItemInfo>(() => new BagItemInfo());
    public static pb::MessageParser<BagItemInfo> Parser { get { return _parser; } }

    private long id_;
    /// <summary>
    ///物品id
    /// </summary>
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int configId_;
    /// <summary>
    ///物品配置id
    /// </summary>
    public int configId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    private int count_;
    /// <summary>
    ///物品数量
    /// </summary>
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private int bagIndex_;
    /// <summary>
    ///所在格子
    /// </summary>
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    private int bind_;
    /// <summary>
    ///是否绑定
    /// </summary>
    public int bind {
      get { return bind_; }
      set {
        bind_ = value;
      }
    }

    private int luck_;
    /// <summary>
    ///幸运
    /// </summary>
    public int luck {
      get { return luck_; }
      set {
        luck_ = value;
      }
    }

    private long endTime_;
    /// <summary>
    ///到期时间
    /// </summary>
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::bag.RandAttr> _repeated_randAttrValues_codec
        = pb::FieldCodec.ForMessage(66, global::bag.RandAttr.Parser);
    private readonly pbc::RepeatedField<global::bag.RandAttr> randAttrValues_ = new pbc::RepeatedField<global::bag.RandAttr>();
    /// <summary>
    ///随机属性
    /// </summary>
    public pbc::RepeatedField<global::bag.RandAttr> randAttrValues {
      get { return randAttrValues_; }
    }

    private static readonly pb::FieldCodec<global::bag.WolongRandomEffect> _repeated_longJis_codec
        = pb::FieldCodec.ForMessage(74, global::bag.WolongRandomEffect.Parser);
    private readonly pbc::RepeatedField<global::bag.WolongRandomEffect> longJis_ = new pbc::RepeatedField<global::bag.WolongRandomEffect>();
    /// <summary>
    ///龙技
    /// </summary>
    public pbc::RepeatedField<global::bag.WolongRandomEffect> longJis {
      get { return longJis_; }
    }

    private static readonly pb::FieldCodec<global::bag.WolongRandomEffect> _repeated_baseAffixs_codec
        = pb::FieldCodec.ForMessage(82, global::bag.WolongRandomEffect.Parser);
    private readonly pbc::RepeatedField<global::bag.WolongRandomEffect> baseAffixs_ = new pbc::RepeatedField<global::bag.WolongRandomEffect>();
    /// <summary>
    ///基础词缀
    /// </summary>
    public pbc::RepeatedField<global::bag.WolongRandomEffect> baseAffixs {
      get { return baseAffixs_; }
    }

    private static readonly pb::FieldCodec<global::bag.WolongRandomEffect> _repeated_intensifyAffixs_codec
        = pb::FieldCodec.ForMessage(90, global::bag.WolongRandomEffect.Parser);
    private readonly pbc::RepeatedField<global::bag.WolongRandomEffect> intensifyAffixs_ = new pbc::RepeatedField<global::bag.WolongRandomEffect>();
    /// <summary>
    ///强化词缀
    /// </summary>
    public pbc::RepeatedField<global::bag.WolongRandomEffect> intensifyAffixs {
      get { return intensifyAffixs_; }
    }

    private int freeXiLianCount_;
    /// <summary>
    ///免费洗练次数
    /// </summary>
    public int freeXiLianCount {
      get { return freeXiLianCount_; }
      set {
        freeXiLianCount_ = value;
      }
    }

    private int quality_;
    /// <summary>
    ///品质
    /// </summary>
    public int quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    private int weaponLuckLv_;
    /// <summary>
    ///武器幸运值
    /// </summary>
    public int weaponLuckLv {
      get { return weaponLuckLv_; }
      set {
        weaponLuckLv_ = value;
      }
    }

    private int gemLevel_;
    /// <summary>
    ///宝珠等级
    /// </summary>
    public int gemLevel {
      get { return gemLevel_; }
      set {
        gemLevel_ = value;
      }
    }

    private int gemExp_;
    /// <summary>
    ///宝珠经验
    /// </summary>
    public int gemExp {
      get { return gemExp_; }
      set {
        gemExp_ = value;
      }
    }

    private int gemGrade_;
    /// <summary>
    ///宝珠阶
    /// </summary>
    public int gemGrade {
      get { return gemGrade_; }
      set {
        gemGrade_ = value;
      }
    }

    private int gemBossCounter_;
    /// <summary>
    ///宝珠击杀boss计数
    /// </summary>
    public int gemBossCounter {
      get { return gemBossCounter_; }
      set {
        gemBossCounter_ = value;
      }
    }

    private int levClass_;
    /// <summary>
    ///阶级
    /// </summary>
    public int levClass {
      get { return levClass_; }
      set {
        levClass_ = value;
      }
    }

    private int freeXiLianCountMax_;
    /// <summary>
    ///最大免费洗练次数
    /// </summary>
    public int freeXiLianCountMax {
      get { return freeXiLianCountMax_; }
      set {
        freeXiLianCountMax_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::bag.WolongRandomEffect> _repeated_longJiXiLians_codec
        = pb::FieldCodec.ForMessage(170, global::bag.WolongRandomEffect.Parser);
    private readonly pbc::RepeatedField<global::bag.WolongRandomEffect> longJiXiLians_ = new pbc::RepeatedField<global::bag.WolongRandomEffect>();
    /// <summary>
    ///龙技洗练数据
    /// </summary>
    public pbc::RepeatedField<global::bag.WolongRandomEffect> longJiXiLians {
      get { return longJiXiLians_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
      if (configId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(configId);
      }
      if (count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(count);
      }
      if (bagIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(bagIndex);
      }
      if (bind != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(bind);
      }
      if (luck != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(luck);
      }
      if (endTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(endTime);
      }
      randAttrValues_.WriteTo(output, _repeated_randAttrValues_codec);
      longJis_.WriteTo(output, _repeated_longJis_codec);
      baseAffixs_.WriteTo(output, _repeated_baseAffixs_codec);
      intensifyAffixs_.WriteTo(output, _repeated_intensifyAffixs_codec);
      if (freeXiLianCount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(freeXiLianCount);
      }
      if (quality != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(quality);
      }
      if (weaponLuckLv != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(weaponLuckLv);
      }
      if (gemLevel != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(gemLevel);
      }
      if (gemExp != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(gemExp);
      }
      if (gemGrade != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(gemGrade);
      }
      if (gemBossCounter != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(gemBossCounter);
      }
      if (levClass != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(levClass);
      }
      if (freeXiLianCountMax != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(freeXiLianCountMax);
      }
      longJiXiLians_.WriteTo(output, _repeated_longJiXiLians_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      if (configId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(configId);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      if (bind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bind);
      }
      if (luck != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(luck);
      }
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      size += randAttrValues_.CalculateSize(_repeated_randAttrValues_codec);
      size += longJis_.CalculateSize(_repeated_longJis_codec);
      size += baseAffixs_.CalculateSize(_repeated_baseAffixs_codec);
      size += intensifyAffixs_.CalculateSize(_repeated_intensifyAffixs_codec);
      if (freeXiLianCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(freeXiLianCount);
      }
      if (quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(quality);
      }
      if (weaponLuckLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(weaponLuckLv);
      }
      if (gemLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(gemLevel);
      }
      if (gemExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(gemExp);
      }
      if (gemGrade != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(gemGrade);
      }
      if (gemBossCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(gemBossCounter);
      }
      if (levClass != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(levClass);
      }
      if (freeXiLianCountMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(freeXiLianCountMax);
      }
      size += longJiXiLians_.CalculateSize(_repeated_longJiXiLians_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
          case 16: {
            configId = input.ReadInt32();
            break;
          }
          case 24: {
            count = input.ReadInt32();
            break;
          }
          case 32: {
            bagIndex = input.ReadInt32();
            break;
          }
          case 40: {
            bind = input.ReadInt32();
            break;
          }
          case 48: {
            luck = input.ReadInt32();
            break;
          }
          case 56: {
            endTime = input.ReadInt64();
            break;
          }
          case 66: {
            randAttrValues_.AddEntriesFrom(input, _repeated_randAttrValues_codec);
            break;
          }
          case 74: {
            longJis_.AddEntriesFrom(input, _repeated_longJis_codec);
            break;
          }
          case 82: {
            baseAffixs_.AddEntriesFrom(input, _repeated_baseAffixs_codec);
            break;
          }
          case 90: {
            intensifyAffixs_.AddEntriesFrom(input, _repeated_intensifyAffixs_codec);
            break;
          }
          case 96: {
            freeXiLianCount = input.ReadInt32();
            break;
          }
          case 104: {
            quality = input.ReadInt32();
            break;
          }
          case 112: {
            weaponLuckLv = input.ReadInt32();
            break;
          }
          case 120: {
            gemLevel = input.ReadInt32();
            break;
          }
          case 128: {
            gemExp = input.ReadInt32();
            break;
          }
          case 136: {
            gemGrade = input.ReadInt32();
            break;
          }
          case 144: {
            gemBossCounter = input.ReadInt32();
            break;
          }
          case 152: {
            levClass = input.ReadInt32();
            break;
          }
          case 160: {
            freeXiLianCountMax = input.ReadInt32();
            break;
          }
          case 170: {
            longJiXiLians_.AddEntriesFrom(input, _repeated_longJiXiLians_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class WolongRandomEffect : pb::IMessage {
    private static readonly pb::MessageParser<WolongRandomEffect> _parser = new pb::MessageParser<WolongRandomEffect>(() => new WolongRandomEffect());
    public static pb::MessageParser<WolongRandomEffect> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///ZhanChongRandomAttr 表id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int effectValue_;
    /// <summary>
    ///随机的效果值
    /// </summary>
    public int effectValue {
      get { return effectValue_; }
      set {
        effectValue_ = value;
      }
    }

    private int quality_;
    /// <summary>
    ///品质
    /// </summary>
    public int quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (effectValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(effectValue);
      }
      if (quality != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(quality);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (effectValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(effectValue);
      }
      if (quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(quality);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            effectValue = input.ReadInt32();
            break;
          }
          case 24: {
            quality = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///装备
  /// </summary>
  public sealed class EquipInfo : pb::IMessage {
    private static readonly pb::MessageParser<EquipInfo> _parser = new pb::MessageParser<EquipInfo>(() => new EquipInfo());
    public static pb::MessageParser<EquipInfo> Parser { get { return _parser; } }

    private int position_;
    /// <summary>
    ///装备位置
    /// </summary>
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    private global::bag.BagItemInfo equip_;
    /// <summary>
    ///装备信息
    /// </summary>
    public global::bag.BagItemInfo equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(position);
      }
      if (equip_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(equip);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(equip);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            position = input.ReadInt32();
            break;
          }
          case 18: {
            if (equip_ == null) {
              equip_ = new global::bag.BagItemInfo();
            }
            input.ReadMessage(equip_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///背包物品变动列表
  /// </summary>
  public sealed class BagItemChangeList : pb::IMessage {
    private static readonly pb::MessageParser<BagItemChangeList> _parser = new pb::MessageParser<BagItemChangeList>(() => new BagItemChangeList());
    public static pb::MessageParser<BagItemChangeList> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_changeList_codec
        = pb::FieldCodec.ForMessage(10, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> changeList_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    public pbc::RepeatedField<global::bag.BagItemInfo> changeList {
      get { return changeList_; }
    }

    private int logType_;
    /// <summary>
    ///变动原因
    /// </summary>
    public int logType {
      get { return logType_; }
      set {
        logType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      changeList_.WriteTo(output, _repeated_changeList_codec);
      if (logType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(logType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += changeList_.CalculateSize(_repeated_changeList_codec);
      if (logType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(logType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            changeList_.AddEntriesFrom(input, _repeated_changeList_codec);
            break;
          }
          case 16: {
            logType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///货币变动
  /// </summary>
  public sealed class WealthAmountChangeResponse : pb::IMessage {
    private static readonly pb::MessageParser<WealthAmountChangeResponse> _parser = new pb::MessageParser<WealthAmountChangeResponse>(() => new WealthAmountChangeResponse());
    public static pb::MessageParser<WealthAmountChangeResponse> Parser { get { return _parser; } }

    private global::bag.CurrencyInfo currencyInfo_;
    public global::bag.CurrencyInfo currencyInfo {
      get { return currencyInfo_; }
      set {
        currencyInfo_ = value;
      }
    }

    private int logType_;
    public int logType {
      get { return logType_; }
      set {
        logType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (currencyInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(currencyInfo);
      }
      if (logType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(logType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (currencyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(currencyInfo);
      }
      if (logType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(logType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (currencyInfo_ == null) {
              currencyInfo_ = new global::bag.CurrencyInfo();
            }
            input.ReadMessage(currencyInfo_);
            break;
          }
          case 16: {
            logType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///穿装备请求,响应
  /// </summary>
  public sealed class EquipItemMsg : pb::IMessage {
    private static readonly pb::MessageParser<EquipItemMsg> _parser = new pb::MessageParser<EquipItemMsg>(() => new EquipItemMsg());
    public static pb::MessageParser<EquipItemMsg> Parser { get { return _parser; } }

    private int bagIndex_;
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    private int position_;
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    private long timeLimit_;
    public long timeLimit {
      get { return timeLimit_; }
      set {
        timeLimit_ = value;
      }
    }

    private global::bag.BagItemInfo equip_;
    public global::bag.BagItemInfo equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bagIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(bagIndex);
      }
      if (position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(position);
      }
      if (timeLimit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(timeLimit);
      }
      if (equip_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(equip);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      if (timeLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(timeLimit);
      }
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(equip);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bagIndex = input.ReadInt32();
            break;
          }
          case 16: {
            position = input.ReadInt32();
            break;
          }
          case 24: {
            timeLimit = input.ReadInt64();
            break;
          }
          case 34: {
            if (equip_ == null) {
              equip_ = new global::bag.BagItemInfo();
            }
            input.ReadMessage(equip_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///脱装备请求
  /// </summary>
  public sealed class UnEquipItemRequest : pb::IMessage {
    private static readonly pb::MessageParser<UnEquipItemRequest> _parser = new pb::MessageParser<UnEquipItemRequest>(() => new UnEquipItemRequest());
    public static pb::MessageParser<UnEquipItemRequest> Parser { get { return _parser; } }

    private int position_;
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(position);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///脱装备响应
  /// </summary>
  public sealed class UnEquipItemResponse : pb::IMessage {
    private static readonly pb::MessageParser<UnEquipItemResponse> _parser = new pb::MessageParser<UnEquipItemResponse>(() => new UnEquipItemResponse());
    public static pb::MessageParser<UnEquipItemResponse> Parser { get { return _parser; } }

    private int position_;
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    private int bagIndex_;
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(position);
      }
      if (bagIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(bagIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            position = input.ReadInt32();
            break;
          }
          case 16: {
            bagIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///交换物品格子请求
  /// </summary>
  public sealed class SwapItemMsg : pb::IMessage {
    private static readonly pb::MessageParser<SwapItemMsg> _parser = new pb::MessageParser<SwapItemMsg>(() => new SwapItemMsg());
    public static pb::MessageParser<SwapItemMsg> Parser { get { return _parser; } }

    private int fromIndex_;
    public int fromIndex {
      get { return fromIndex_; }
      set {
        fromIndex_ = value;
      }
    }

    private int toIndex_;
    public int toIndex {
      get { return toIndex_; }
      set {
        toIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (fromIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(fromIndex);
      }
      if (toIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(toIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (fromIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(fromIndex);
      }
      if (toIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(toIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            fromIndex = input.ReadInt32();
            break;
          }
          case 16: {
            toIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///销毁物品请求
  /// </summary>
  public sealed class DestroyItemRequest : pb::IMessage {
    private static readonly pb::MessageParser<DestroyItemRequest> _parser = new pb::MessageParser<DestroyItemRequest>(() => new DestroyItemRequest());
    public static pb::MessageParser<DestroyItemRequest> Parser { get { return _parser; } }

    private int bagIndex_;
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    private int count_;
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private long uId_;
    /// <summary>
    ///唯一ID
    /// </summary>
    public long uId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bagIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(bagIndex);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
      if (uId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(uId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (uId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(uId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bagIndex = input.ReadInt32();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
          case 24: {
            uId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///使用物品请求
  /// </summary>
  public sealed class UseItemRequest : pb::IMessage {
    private static readonly pb::MessageParser<UseItemRequest> _parser = new pb::MessageParser<UseItemRequest>(() => new UseItemRequest());
    public static pb::MessageParser<UseItemRequest> Parser { get { return _parser; } }

    private int bagIndex_;
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    private int count_;
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private bool auto_;
    /// <summary>
    ///是否自动使用
    /// </summary>
    public bool auto {
      get { return auto_; }
      set {
        auto_ = value;
      }
    }

    private int data_;
    /// <summary>
    ///可用于任何意义
    /// </summary>
    public int data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private long uId_;
    /// <summary>
    ///唯一ID
    /// </summary>
    public long uId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bagIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(bagIndex);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
      if (auto != false) {
        output.WriteRawTag(24);
        output.WriteBool(auto);
      }
      if (data != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(data);
      }
      if (uId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(uId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (auto != false) {
        size += 1 + 1;
      }
      if (data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(data);
      }
      if (uId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(uId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bagIndex = input.ReadInt32();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
          case 24: {
            auto = input.ReadBool();
            break;
          }
          case 32: {
            data = input.ReadInt32();
            break;
          }
          case 40: {
            uId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回收物品请求
  /// </summary>
  public sealed class CallbackItemRequest : pb::IMessage {
    private static readonly pb::MessageParser<CallbackItemRequest> _parser = new pb::MessageParser<CallbackItemRequest>(() => new CallbackItemRequest());
    public static pb::MessageParser<CallbackItemRequest> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_bagIndices_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> bagIndices_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///物品的bagIndex列表
    /// </summary>
    public pbc::RepeatedField<int> bagIndices {
      get { return bagIndices_; }
    }

    private int type_;
    /// <summary>
    /// 0:普通装备  1:内功装备
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagIndices_.WriteTo(output, _repeated_bagIndices_codec);
      if (type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += bagIndices_.CalculateSize(_repeated_bagIndices_codec);
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            bagIndices_.AddEntriesFrom(input, _repeated_bagIndices_codec);
            break;
          }
          case 16: {
            type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回收物品响应
  /// </summary>
  public sealed class CallbackItemResponse : pb::IMessage {
    private static readonly pb::MessageParser<CallbackItemResponse> _parser = new pb::MessageParser<CallbackItemResponse>(() => new CallbackItemResponse());
    public static pb::MessageParser<CallbackItemResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_indexs_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> indexs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///被回收的下标
    /// </summary>
    public pbc::RepeatedField<int> indexs {
      get { return indexs_; }
    }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_callbackItems_codec
        = pb::FieldCodec.ForMessage(18, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> callbackItems_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    public pbc::RepeatedField<global::bag.BagItemInfo> callbackItems {
      get { return callbackItems_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      indexs_.WriteTo(output, _repeated_indexs_codec);
      callbackItems_.WriteTo(output, _repeated_callbackItems_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += indexs_.CalculateSize(_repeated_indexs_codec);
      size += callbackItems_.CalculateSize(_repeated_callbackItems_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            indexs_.AddEntriesFrom(input, _repeated_indexs_codec);
            break;
          }
          case 18: {
            callbackItems_.AddEntriesFrom(input, _repeated_callbackItems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///拾取物品请求,响应
  /// </summary>
  public sealed class PickupMsg : pb::IMessage {
    private static readonly pb::MessageParser<PickupMsg> _parser = new pb::MessageParser<PickupMsg>(() => new PickupMsg());
    public static pb::MessageParser<PickupMsg> Parser { get { return _parser; } }

    private long id_;
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class BagIsFull : pb::IMessage {
    private static readonly pb::MessageParser<BagIsFull> _parser = new pb::MessageParser<BagIsFull>(() => new BagIsFull());
    public static pb::MessageParser<BagIsFull> Parser { get { return _parser; } }

    private int form_;
    /// <summary>
    ///AutoBuy=1,    AutoUse = 2;
    /// </summary>
    public int form {
      get { return form_; }
      set {
        form_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (form != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(form);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (form != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(form);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            form = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///背包到仓库请求
  /// </summary>
  public sealed class BagToStorehouseRequest : pb::IMessage {
    private static readonly pb::MessageParser<BagToStorehouseRequest> _parser = new pb::MessageParser<BagToStorehouseRequest>(() => new BagToStorehouseRequest());
    public static pb::MessageParser<BagToStorehouseRequest> Parser { get { return _parser; } }

    private int bagIndex_;
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bagIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(bagIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bagIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///背包到仓库响应 ，背包删除走itemchange
  /// </summary>
  public sealed class BagToStorehouseResponse : pb::IMessage {
    private static readonly pb::MessageParser<BagToStorehouseResponse> _parser = new pb::MessageParser<BagToStorehouseResponse>(() => new BagToStorehouseResponse());
    public static pb::MessageParser<BagToStorehouseResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_addItem_codec
        = pb::FieldCodec.ForMessage(10, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> addItem_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    /// <summary>
    ///仓库增加的物品
    /// </summary>
    public pbc::RepeatedField<global::bag.BagItemInfo> addItem {
      get { return addItem_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      addItem_.WriteTo(output, _repeated_addItem_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += addItem_.CalculateSize(_repeated_addItem_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            addItem_.AddEntriesFrom(input, _repeated_addItem_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置回收装备的强化等级
  /// </summary>
  public sealed class SetCallBackInfo : pb::IMessage {
    private static readonly pb::MessageParser<SetCallBackInfo> _parser = new pb::MessageParser<SetCallBackInfo>(() => new SetCallBackInfo());
    public static pb::MessageParser<SetCallBackInfo> Parser { get { return _parser; } }

    private int lv_;
    public int lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (lv != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(lv);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(lv);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            lv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///背包格子数改变
  /// </summary>
  public sealed class ChangeBagCount : pb::IMessage {
    private static readonly pb::MessageParser<ChangeBagCount> _parser = new pb::MessageParser<ChangeBagCount>(() => new ChangeBagCount());
    public static pb::MessageParser<ChangeBagCount> Parser { get { return _parser; } }

    private int maxCount_;
    /// <summary>
    ///背包格子数的最大值
    /// </summary>
    public int maxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (maxCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(maxCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (maxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            maxCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///拆分物品请求
  /// </summary>
  public sealed class SplitBagItemRequest : pb::IMessage {
    private static readonly pb::MessageParser<SplitBagItemRequest> _parser = new pb::MessageParser<SplitBagItemRequest>(() => new SplitBagItemRequest());
    public static pb::MessageParser<SplitBagItemRequest> Parser { get { return _parser; } }

    private int bagIndex_;
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    private int count_;
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bagIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(bagIndex);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bagIndex = input.ReadInt32();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///金币换银子
  /// </summary>
  public sealed class ExchangeGold2SilverReq : pb::IMessage {
    private static readonly pb::MessageParser<ExchangeGold2SilverReq> _parser = new pb::MessageParser<ExchangeGold2SilverReq>(() => new ExchangeGold2SilverReq());
    public static pb::MessageParser<ExchangeGold2SilverReq> Parser { get { return _parser; } }

    private int gold_;
    /// <summary>
    ///兑换的金币数量（单位文）
    /// </summary>
    public int gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (gold != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(gold);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(gold);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            gold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回复金币换银子
  /// </summary>
  public sealed class ExchangeGold2SilverAck : pb::IMessage {
    private static readonly pb::MessageParser<ExchangeGold2SilverAck> _parser = new pb::MessageParser<ExchangeGold2SilverAck>(() => new ExchangeGold2SilverAck());
    public static pb::MessageParser<ExchangeGold2SilverAck> Parser { get { return _parser; } }

    private bool success_;
    /// <summary>
    ///是否成功
    /// </summary>
    public bool success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    private int silver_;
    /// <summary>
    ///兑换的银子数量（单位文）
    /// </summary>
    public int silver {
      get { return silver_; }
      set {
        silver_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (success != false) {
        output.WriteRawTag(8);
        output.WriteBool(success);
      }
      if (silver != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(silver);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (success != false) {
        size += 1 + 1;
      }
      if (silver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(silver);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            success = input.ReadBool();
            break;
          }
          case 16: {
            silver = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///使用限制提示下发
  /// </summary>
  public sealed class ItemUseLimitNtf : pb::IMessage {
    private static readonly pb::MessageParser<ItemUseLimitNtf> _parser = new pb::MessageParser<ItemUseLimitNtf>(() => new ItemUseLimitNtf());
    public static pb::MessageParser<ItemUseLimitNtf> Parser { get { return _parser; } }

    private string tips_ = "";
    public string tips {
      get { return tips_; }
      set {
        tips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int itemId_;
    public int itemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int remainNum_;
    public int remainNum {
      get { return remainNum_; }
      set {
        remainNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (tips.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(tips);
      }
      if (itemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(itemId);
      }
      if (remainNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(remainNum);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (tips.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(tips);
      }
      if (itemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(itemId);
      }
      if (remainNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(remainNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tips = input.ReadString();
            break;
          }
          case 16: {
            itemId = input.ReadInt32();
            break;
          }
          case 24: {
            remainNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EquipRebuildReq : pb::IMessage {
    private static readonly pb::MessageParser<EquipRebuildReq> _parser = new pb::MessageParser<EquipRebuildReq>(() => new EquipRebuildReq());
    public static pb::MessageParser<EquipRebuildReq> Parser { get { return _parser; } }

    private int equipIndex_;
    /// <summary>
    ///如果是背包里面的就发送响应的背包里的位置，如果是身上的就发送对应的部位的负位置
    /// </summary>
    public int equipIndex {
      get { return equipIndex_; }
      set {
        equipIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (equipIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(equipIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (equipIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(equipIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            equipIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EquipRebuildNtf : pb::IMessage {
    private static readonly pb::MessageParser<EquipRebuildNtf> _parser = new pb::MessageParser<EquipRebuildNtf>(() => new EquipRebuildNtf());
    public static pb::MessageParser<EquipRebuildNtf> Parser { get { return _parser; } }

    private global::bag.EquipInfo equip_;
    public global::bag.EquipInfo equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (equip_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(equip);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(equip);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (equip_ == null) {
              equip_ = new global::bag.EquipInfo();
            }
            input.ReadMessage(equip_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipXiLianReq : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipXiLianReq> _parser = new pb::MessageParser<CSEquipXiLianReq>(() => new CSEquipXiLianReq());
    public static pb::MessageParser<CSEquipXiLianReq> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_lockedAttrIndex_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> lockedAttrIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///玩家锁定的属性索引
    /// </summary>
    public pbc::RepeatedField<int> lockedAttrIndex {
      get { return lockedAttrIndex_; }
    }

    private int xiLianNum_;
    /// <summary>
    ///玩家要洗炼的次数
    /// </summary>
    public int xiLianNum {
      get { return xiLianNum_; }
      set {
        xiLianNum_ = value;
      }
    }

    private int equipIndex_;
    /// <summary>
    ///如果是背包里面的就发送响应的背包里的位置，如果是身上的就发送对应的部位的负位置
    /// </summary>
    public int equipIndex {
      get { return equipIndex_; }
      set {
        equipIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      lockedAttrIndex_.WriteTo(output, _repeated_lockedAttrIndex_codec);
      if (xiLianNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(xiLianNum);
      }
      if (equipIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(equipIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += lockedAttrIndex_.CalculateSize(_repeated_lockedAttrIndex_codec);
      if (xiLianNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(xiLianNum);
      }
      if (equipIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(equipIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            lockedAttrIndex_.AddEntriesFrom(input, _repeated_lockedAttrIndex_codec);
            break;
          }
          case 16: {
            xiLianNum = input.ReadInt32();
            break;
          }
          case 24: {
            equipIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SCEquipRandomsNtf : pb::IMessage {
    private static readonly pb::MessageParser<SCEquipRandomsNtf> _parser = new pb::MessageParser<SCEquipRandomsNtf>(() => new SCEquipRandomsNtf());
    public static pb::MessageParser<SCEquipRandomsNtf> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::bag.XiLianResult> _repeated_xiLianList_codec
        = pb::FieldCodec.ForMessage(10, global::bag.XiLianResult.Parser);
    private readonly pbc::RepeatedField<global::bag.XiLianResult> xiLianList_ = new pbc::RepeatedField<global::bag.XiLianResult>();
    /// <summary>
    ///随机属性
    /// </summary>
    public pbc::RepeatedField<global::bag.XiLianResult> xiLianList {
      get { return xiLianList_; }
    }

    private int freeXiLianRandomTimes_;
    /// <summary>
    ///免费的洗炼次数
    /// </summary>
    public int freeXiLianRandomTimes {
      get { return freeXiLianRandomTimes_; }
      set {
        freeXiLianRandomTimes_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      xiLianList_.WriteTo(output, _repeated_xiLianList_codec);
      if (freeXiLianRandomTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(freeXiLianRandomTimes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += xiLianList_.CalculateSize(_repeated_xiLianList_codec);
      if (freeXiLianRandomTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(freeXiLianRandomTimes);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            xiLianList_.AddEntriesFrom(input, _repeated_xiLianList_codec);
            break;
          }
          case 16: {
            freeXiLianRandomTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class XiLianResult : pb::IMessage {
    private static readonly pb::MessageParser<XiLianResult> _parser = new pb::MessageParser<XiLianResult>(() => new XiLianResult());
    public static pb::MessageParser<XiLianResult> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::bag.RandAttr> _repeated_randAttrValues_codec
        = pb::FieldCodec.ForMessage(10, global::bag.RandAttr.Parser);
    private readonly pbc::RepeatedField<global::bag.RandAttr> randAttrValues_ = new pbc::RepeatedField<global::bag.RandAttr>();
    /// <summary>
    ///随机属性
    /// </summary>
    public pbc::RepeatedField<global::bag.RandAttr> randAttrValues {
      get { return randAttrValues_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      randAttrValues_.WriteTo(output, _repeated_randAttrValues_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += randAttrValues_.CalculateSize(_repeated_randAttrValues_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            randAttrValues_.AddEntriesFrom(input, _repeated_randAttrValues_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSChooseXiLianResultReq : pb::IMessage {
    private static readonly pb::MessageParser<CSChooseXiLianResultReq> _parser = new pb::MessageParser<CSChooseXiLianResultReq>(() => new CSChooseXiLianResultReq());
    public static pb::MessageParser<CSChooseXiLianResultReq> Parser { get { return _parser; } }

    private int choosedResultIndex_;
    /// <summary>
    ///用户选定的洗炼结果
    /// </summary>
    public int choosedResultIndex {
      get { return choosedResultIndex_; }
      set {
        choosedResultIndex_ = value;
      }
    }

    private int equipIndex_;
    /// <summary>
    ///如果是背包里面的就发送响应的背包里的位置，如果是身上的就发送对应的部位的负位置
    /// </summary>
    public int equipIndex {
      get { return equipIndex_; }
      set {
        equipIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (choosedResultIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(choosedResultIndex);
      }
      if (equipIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(equipIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (choosedResultIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(choosedResultIndex);
      }
      if (equipIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(equipIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            choosedResultIndex = input.ReadInt32();
            break;
          }
          case 16: {
            equipIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SCChooseXiLianResultNtf : pb::IMessage {
    private static readonly pb::MessageParser<SCChooseXiLianResultNtf> _parser = new pb::MessageParser<SCChooseXiLianResultNtf>(() => new SCChooseXiLianResultNtf());
    public static pb::MessageParser<SCChooseXiLianResultNtf> Parser { get { return _parser; } }

    private global::bag.EquipInfo result_;
    /// <summary>
    ///响应给用户最终选择的信息
    /// </summary>
    public global::bag.EquipInfo result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(result);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(result);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (result_ == null) {
              result_ = new global::bag.EquipInfo();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

  }

  public sealed class ItemCd : pb::IMessage {
    private static readonly pb::MessageParser<ItemCd> _parser = new pb::MessageParser<ItemCd>(() => new ItemCd());
    public static pb::MessageParser<ItemCd> Parser { get { return _parser; } }

    private int groupId_;
    /// <summary>
    ///组
    /// </summary>
    public int groupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    private long useTime_;
    /// <summary>
    ///使用时间;
    /// </summary>
    public long useTime {
      get { return useTime_; }
      set {
        useTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (groupId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(groupId);
      }
      if (useTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(useTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (groupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(groupId);
      }
      if (useTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(useTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            groupId = input.ReadInt32();
            break;
          }
          case 16: {
            useTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class BagItemCdInfo : pb::IMessage {
    private static readonly pb::MessageParser<BagItemCdInfo> _parser = new pb::MessageParser<BagItemCdInfo>(() => new BagItemCdInfo());
    public static pb::MessageParser<BagItemCdInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::bag.ItemCd> _repeated_cds_codec
        = pb::FieldCodec.ForMessage(10, global::bag.ItemCd.Parser);
    private readonly pbc::RepeatedField<global::bag.ItemCd> cds_ = new pbc::RepeatedField<global::bag.ItemCd>();
    public pbc::RepeatedField<global::bag.ItemCd> cds {
      get { return cds_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      cds_.WriteTo(output, _repeated_cds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += cds_.CalculateSize(_repeated_cds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cds_.AddEntriesFrom(input, _repeated_cds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 每日道具使用次数，使用道具时，响应
  /// </summary>
  public sealed class ResItemUsedDaily : pb::IMessage {
    private static readonly pb::MessageParser<ResItemUsedDaily> _parser = new pb::MessageParser<ResItemUsedDaily>(() => new ResItemUsedDaily());
    public static pb::MessageParser<ResItemUsedDaily> Parser { get { return _parser; } }

    private int group_;
    /// <summary>
    /// item表里的group字段
    /// </summary>
    public int group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    private int dailyUsedCount_;
    /// <summary>
    /// 今日已使用次数
    /// </summary>
    public int dailyUsedCount {
      get { return dailyUsedCount_; }
      set {
        dailyUsedCount_ = value;
      }
    }

    private int dailyMaxUseCount_;
    /// <summary>
    /// 每日使用最大次数
    /// </summary>
    public int dailyMaxUseCount {
      get { return dailyMaxUseCount_; }
      set {
        dailyMaxUseCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (group != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(group);
      }
      if (dailyUsedCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(dailyUsedCount);
      }
      if (dailyMaxUseCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(dailyMaxUseCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(group);
      }
      if (dailyUsedCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(dailyUsedCount);
      }
      if (dailyMaxUseCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(dailyMaxUseCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            group = input.ReadInt32();
            break;
          }
          case 16: {
            dailyUsedCount = input.ReadInt32();
            break;
          }
          case 24: {
            dailyMaxUseCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登录时，推送玩家每日道具使用次数情况，总的
  /// </summary>
  public sealed class ResItemUsedDailyTotal : pb::IMessage {
    private static readonly pb::MessageParser<ResItemUsedDailyTotal> _parser = new pb::MessageParser<ResItemUsedDailyTotal>(() => new ResItemUsedDailyTotal());
    public static pb::MessageParser<ResItemUsedDailyTotal> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::bag.ResItemUsedDaily> _repeated_useItemDailyInfo_codec
        = pb::FieldCodec.ForMessage(10, global::bag.ResItemUsedDaily.Parser);
    private readonly pbc::RepeatedField<global::bag.ResItemUsedDaily> useItemDailyInfo_ = new pbc::RepeatedField<global::bag.ResItemUsedDaily>();
    public pbc::RepeatedField<global::bag.ResItemUsedDaily> useItemDailyInfo {
      get { return useItemDailyInfo_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      useItemDailyInfo_.WriteTo(output, _repeated_useItemDailyInfo_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += useItemDailyInfo_.CalculateSize(_repeated_useItemDailyInfo_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            useItemDailyInfo_.AddEntriesFrom(input, _repeated_useItemDailyInfo_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
