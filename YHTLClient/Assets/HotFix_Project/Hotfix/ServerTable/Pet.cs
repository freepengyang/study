// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pet.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace pet {

  #region Messages
  public sealed class PetAttr : pb::IMessage {
    private static readonly pb::MessageParser<PetAttr> _parser = new pb::MessageParser<PetAttr>(() => new PetAttr());
    public static pb::MessageParser<PetAttr> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::user.TupleProperty> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(10, global::user.TupleProperty.Parser);
    private readonly pbc::RepeatedField<global::user.TupleProperty> attrs_ = new pbc::RepeatedField<global::user.TupleProperty>();
    public pbc::RepeatedField<global::user.TupleProperty> attrs {
      get { return attrs_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      attrs_.WriteTo(output, _repeated_attrs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class WoLongPetInfo : pb::IMessage {
    private static readonly pb::MessageParser<WoLongPetInfo> _parser = new pb::MessageParser<WoLongPetInfo>(() => new WoLongPetInfo());
    public static pb::MessageParser<WoLongPetInfo> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///suit id 
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_skills_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> skills_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///技能列表;
    /// </summary>
    public pbc::RepeatedField<int> skills {
      get { return skills_; }
    }

    private int level_;
    /// <summary>
    /// 宠物的等级
    /// </summary>
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int exp_;
    /// <summary>
    /// 宠物当前等级所拥有的经验
    /// </summary>
    public int exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    private bool active_;
    /// <summary>
    ///是否激活;
    /// </summary>
    public bool active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    private global::pet.PetAttr attr_;
    /// <summary>
    ///宠物属性;
    /// </summary>
    public global::pet.PetAttr attr {
      get { return attr_; }
      set {
        attr_ = value;
      }
    }

    private int hp_;
    /// <summary>
    ///hp;
    /// </summary>
    public int hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private bool activePvp_;
    public bool activePvp {
      get { return activePvp_; }
      set {
        activePvp_ = value;
      }
    }

    private int hejiConfigId_;
    /// <summary>
    ///合击配置
    /// </summary>
    public int hejiConfigId {
      get { return hejiConfigId_; }
      set {
        hejiConfigId_ = value;
      }
    }

    private int hejiPoint_;
    /// <summary>
    ///合击能量点;
    /// </summary>
    public int hejiPoint {
      get { return hejiPoint_; }
      set {
        hejiPoint_ = value;
      }
    }

    private int roleHejiConfigId_;
    /// <summary>
    ///玩家合击配置;
    /// </summary>
    public int roleHejiConfigId {
      get { return roleHejiConfigId_; }
      set {
        roleHejiConfigId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      if (level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(level);
      }
      if (exp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(exp);
      }
      if (active != false) {
        output.WriteRawTag(40);
        output.WriteBool(active);
      }
      if (attr_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(attr);
      }
      if (hp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(hp);
      }
      if (activePvp != false) {
        output.WriteRawTag(64);
        output.WriteBool(activePvp);
      }
      if (hejiConfigId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(hejiConfigId);
      }
      if (hejiPoint != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(hejiPoint);
      }
      if (roleHejiConfigId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(roleHejiConfigId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(exp);
      }
      if (active != false) {
        size += 1 + 1;
      }
      if (attr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(attr);
      }
      if (hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hp);
      }
      if (activePvp != false) {
        size += 1 + 1;
      }
      if (hejiConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hejiConfigId);
      }
      if (hejiPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hejiPoint);
      }
      if (roleHejiConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(roleHejiConfigId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 24: {
            level = input.ReadInt32();
            break;
          }
          case 32: {
            exp = input.ReadInt32();
            break;
          }
          case 40: {
            active = input.ReadBool();
            break;
          }
          case 50: {
            if (attr_ == null) {
              attr_ = new global::pet.PetAttr();
            }
            input.ReadMessage(attr_);
            break;
          }
          case 56: {
            hp = input.ReadInt32();
            break;
          }
          case 64: {
            activePvp = input.ReadBool();
            break;
          }
          case 72: {
            hejiConfigId = input.ReadInt32();
            break;
          }
          case 80: {
            hejiPoint = input.ReadInt32();
            break;
          }
          case 88: {
            roleHejiConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class WoLongPetState : pb::IMessage {
    private static readonly pb::MessageParser<WoLongPetState> _parser = new pb::MessageParser<WoLongPetState>(() => new WoLongPetState());
    public static pb::MessageParser<WoLongPetState> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///卧龙宠物配置id;
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int state_;
    /// <summary>
    ///卧龙宠物状态,1:出战,2:合体,3:死亡;
    /// </summary>
    public int state {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    private long time_;
    /// <summary>
    ///时间戳;
    /// </summary>
    public long time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (state != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(state);
      }
      if (time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(time);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(state);
      }
      if (time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(time);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            state = input.ReadInt32();
            break;
          }
          case 24: {
            time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///视野玩家卧龙宠物额外信息
  /// </summary>
  public sealed class PlayerPetViewInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerPetViewInfo> _parser = new pb::MessageParser<PlayerPetViewInfo>(() => new PlayerPetViewInfo());
    public static pb::MessageParser<PlayerPetViewInfo> Parser { get { return _parser; } }

    private long roleId_;
    /// <summary>
    ///角色ID
    /// </summary>
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private int petId_;
    public int petId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    private int wolongPetState_;
    /// <summary>
    ///战宠状态;1出战；2合体；3死亡
    /// </summary>
    public int wolongPetState {
      get { return wolongPetState_; }
      set {
        wolongPetState_ = value;
      }
    }

    private int shieldAttr_;
    /// <summary>
    ///护盾属性
    /// </summary>
    public int shieldAttr {
      get { return shieldAttr_; }
      set {
        shieldAttr_ = value;
      }
    }

    private int maxShield_;
    /// <summary>
    ///最大值
    /// </summary>
    public int maxShield {
      get { return maxShield_; }
      set {
        maxShield_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (petId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(petId);
      }
      if (wolongPetState != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(wolongPetState);
      }
      if (shieldAttr != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(shieldAttr);
      }
      if (maxShield != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(maxShield);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (petId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(petId);
      }
      if (wolongPetState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(wolongPetState);
      }
      if (shieldAttr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(shieldAttr);
      }
      if (maxShield != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxShield);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 16: {
            petId = input.ReadInt32();
            break;
          }
          case 24: {
            wolongPetState = input.ReadInt32();
            break;
          }
          case 32: {
            shieldAttr = input.ReadInt32();
            break;
          }
          case 40: {
            maxShield = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取宠物属性，响应  以及  宠物升级后的响应
  /// </summary>
  public sealed class ResPetInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResPetInfo> _parser = new pb::MessageParser<ResPetInfo>(() => new ResPetInfo());
    public static pb::MessageParser<ResPetInfo> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    /// 宠物的id  ZhanhunSuit配置表id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int level_;
    /// <summary>
    /// 宠物的等级
    /// </summary>
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int exp_;
    /// <summary>
    /// 宠物当前等级所拥有的经验
    /// </summary>
    public int exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::pet.ItemDaily> _repeated_itemDaily_codec
        = pb::FieldCodec.ForMessage(34, global::pet.ItemDaily.Parser);
    private readonly pbc::RepeatedField<global::pet.ItemDaily> itemDaily_ = new pbc::RepeatedField<global::pet.ItemDaily>();
    /// <summary>
    ///回收装备每日回收的道具的上限
    /// </summary>
    public pbc::RepeatedField<global::pet.ItemDaily> itemDaily {
      get { return itemDaily_; }
    }

    private bool isMax_;
    /// <summary>
    /// flase:未达到最高级 true:到最高级
    /// </summary>
    public bool isMax {
      get { return isMax_; }
      set {
        isMax_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(level);
      }
      if (exp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(exp);
      }
      itemDaily_.WriteTo(output, _repeated_itemDaily_codec);
      if (isMax != false) {
        output.WriteRawTag(40);
        output.WriteBool(isMax);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(exp);
      }
      size += itemDaily_.CalculateSize(_repeated_itemDaily_codec);
      if (isMax != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            level = input.ReadInt32();
            break;
          }
          case 24: {
            exp = input.ReadInt32();
            break;
          }
          case 34: {
            itemDaily_.AddEntriesFrom(input, _repeated_itemDaily_codec);
            break;
          }
          case 40: {
            isMax = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回收装备每日回收的道具的上限
  /// </summary>
  public sealed class ItemDaily : pb::IMessage {
    private static readonly pb::MessageParser<ItemDaily> _parser = new pb::MessageParser<ItemDaily>(() => new ItemDaily());
    public static pb::MessageParser<ItemDaily> Parser { get { return _parser; } }

    private bool lockFlag_;
    /// <summary>
    ///解锁值 flase：未解锁 true:解锁
    /// </summary>
    public bool lockFlag {
      get { return lockFlag_; }
      set {
        lockFlag_ = value;
      }
    }

    private int itemDailyNum_;
    /// <summary>
    ///今日获得道具的数量
    /// </summary>
    public int itemDailyNum {
      get { return itemDailyNum_; }
      set {
        itemDailyNum_ = value;
      }
    }

    private int id_;
    /// <summary>
    /// itemCallBackBase表里表头id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int itemDailyMaxNum_;
    /// <summary>
    ///总上限
    /// </summary>
    public int itemDailyMaxNum {
      get { return itemDailyMaxNum_; }
      set {
        itemDailyMaxNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (lockFlag != false) {
        output.WriteRawTag(8);
        output.WriteBool(lockFlag);
      }
      if (itemDailyNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(itemDailyNum);
      }
      if (id != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(id);
      }
      if (itemDailyMaxNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(itemDailyMaxNum);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (lockFlag != false) {
        size += 1 + 1;
      }
      if (itemDailyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(itemDailyNum);
      }
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (itemDailyMaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(itemDailyMaxNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            lockFlag = input.ReadBool();
            break;
          }
          case 24: {
            itemDailyNum = input.ReadInt32();
            break;
          }
          case 32: {
            id = input.ReadInt32();
            break;
          }
          case 40: {
            itemDailyMaxNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物升级，吞噬装备后获得的道具的详情，响应
  /// </summary>
  public sealed class ResItemCallBackInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResItemCallBackInfo> _parser = new pb::MessageParser<ResItemCallBackInfo>(() => new ResItemCallBackInfo());
    public static pb::MessageParser<ResItemCallBackInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::pet.ItemInfo> _repeated_itemInfo_codec
        = pb::FieldCodec.ForMessage(10, global::pet.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::pet.ItemInfo> itemInfo_ = new pbc::RepeatedField<global::pet.ItemInfo>();
    public pbc::RepeatedField<global::pet.ItemInfo> itemInfo {
      get { return itemInfo_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      itemInfo_.WriteTo(output, _repeated_itemInfo_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += itemInfo_.CalculateSize(_repeated_itemInfo_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemInfo_.AddEntriesFrom(input, _repeated_itemInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///道具详情
  /// </summary>
  public sealed class ItemInfo : pb::IMessage {
    private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
    public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///string itemType = 1;// item#type  itemCallBackBase表里的item字段和type字段 相当于道具的id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int num_;
    /// <summary>
    /// 数量
    /// </summary>
    public int num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(num);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(num);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物升级，请求
  /// </summary>
  public sealed class ReqPetUpgrade : pb::IMessage {
    private static readonly pb::MessageParser<ReqPetUpgrade> _parser = new pb::MessageParser<ReqPetUpgrade>(() => new ReqPetUpgrade());
    public static pb::MessageParser<ReqPetUpgrade> Parser { get { return _parser; } }

    private int type_;
    /// <summary>
    /// 0:正常回收，1:自动回收
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_bagIndices_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> bagIndices_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///物品的bagIndex列表
    /// </summary>
    public pbc::RepeatedField<int> bagIndices {
      get { return bagIndices_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(type);
      }
      bagIndices_.WriteTo(output, _repeated_bagIndices_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      size += bagIndices_.CalculateSize(_repeated_bagIndices_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            bagIndices_.AddEntriesFrom(input, _repeated_bagIndices_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物技能升级，请求
  /// </summary>
  public sealed class ReqPetSkillUpgrade : pb::IMessage {
    private static readonly pb::MessageParser<ReqPetSkillUpgrade> _parser = new pb::MessageParser<ReqPetSkillUpgrade>(() => new ReqPetSkillUpgrade());
    public static pb::MessageParser<ReqPetSkillUpgrade> Parser { get { return _parser; } }

    private int skillGroup_;
    /// <summary>
    ///主动技能技能组id
    /// </summary>
    public int skillGroup {
      get { return skillGroup_; }
      set {
        skillGroup_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (skillGroup != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(skillGroup);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (skillGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(skillGroup);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            skillGroup = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ReqUnlockPetTianFu : pb::IMessage {
    private static readonly pb::MessageParser<ReqUnlockPetTianFu> _parser = new pb::MessageParser<ReqUnlockPetTianFu>(() => new ReqUnlockPetTianFu());
    public static pb::MessageParser<ReqUnlockPetTianFu> Parser { get { return _parser; } }

    private int paging_;
    /// <summary>
    /// 界面上的各个页数(阶段)
    /// </summary>
    public int paging {
      get { return paging_; }
      set {
        paging_ = value;
      }
    }

    private int starrating_;
    /// <summary>
    /// 等级(用于控制每个阶段下面又多少等级)
    /// </summary>
    public int starrating {
      get { return starrating_; }
      set {
        starrating_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (paging != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(paging);
      }
      if (starrating != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(starrating);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (paging != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(paging);
      }
      if (starrating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(starrating);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            paging = input.ReadInt32();
            break;
          }
          case 16: {
            starrating = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PetTianFuInfo : pb::IMessage {
    private static readonly pb::MessageParser<PetTianFuInfo> _parser = new pb::MessageParser<PetTianFuInfo>(() => new PetTianFuInfo());
    public static pb::MessageParser<PetTianFuInfo> Parser { get { return _parser; } }

    private int paging_;
    /// <summary>
    /// 界面上的各个页数(阶段)
    /// </summary>
    public int paging {
      get { return paging_; }
      set {
        paging_ = value;
      }
    }

    private int starrating_;
    /// <summary>
    /// 等级(用于控制每个阶段下面又多少等级)
    /// </summary>
    public int starrating {
      get { return starrating_; }
      set {
        starrating_ = value;
      }
    }

    private int equipAddLevel_;
    /// <summary>
    /// 装备增加的等级
    /// </summary>
    public int equipAddLevel {
      get { return equipAddLevel_; }
      set {
        equipAddLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (paging != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(paging);
      }
      if (starrating != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(starrating);
      }
      if (equipAddLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(equipAddLevel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (paging != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(paging);
      }
      if (starrating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(starrating);
      }
      if (equipAddLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(equipAddLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            paging = input.ReadInt32();
            break;
          }
          case 16: {
            starrating = input.ReadInt32();
            break;
          }
          case 24: {
            equipAddLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PetTianFuChange : pb::IMessage {
    private static readonly pb::MessageParser<PetTianFuChange> _parser = new pb::MessageParser<PetTianFuChange>(() => new PetTianFuChange());
    public static pb::MessageParser<PetTianFuChange> Parser { get { return _parser; } }

    private global::pet.PetTianFuInfo tianfuInfo_;
    /// <summary>
    /// 界面上的各个页数(阶段)
    /// </summary>
    public global::pet.PetTianFuInfo tianfuInfo {
      get { return tianfuInfo_; }
      set {
        tianfuInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_sid_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> sid_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 同WoLongPetInfo里的skills
    /// </summary>
    public pbc::RepeatedField<int> sid {
      get { return sid_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (tianfuInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(tianfuInfo);
      }
      sid_.WriteTo(output, _repeated_sid_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (tianfuInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(tianfuInfo);
      }
      size += sid_.CalculateSize(_repeated_sid_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (tianfuInfo_ == null) {
              tianfuInfo_ = new global::pet.PetTianFuInfo();
            }
            input.ReadMessage(tianfuInfo_);
            break;
          }
          case 18:
          case 16: {
            sid_.AddEntriesFrom(input, _repeated_sid_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物技能升级，响应
  /// </summary>
  public sealed class ResPetSkillUpgrade : pb::IMessage {
    private static readonly pb::MessageParser<ResPetSkillUpgrade> _parser = new pb::MessageParser<ResPetSkillUpgrade>(() => new ResPetSkillUpgrade());
    public static pb::MessageParser<ResPetSkillUpgrade> Parser { get { return _parser; } }

    private int oldSkillId_;
    /// <summary>
    /// 旧的技能id
    /// </summary>
    public int oldSkillId {
      get { return oldSkillId_; }
      set {
        oldSkillId_ = value;
      }
    }

    private int newSkillId_;
    /// <summary>
    /// 新的技能id
    /// </summary>
    public int newSkillId {
      get { return newSkillId_; }
      set {
        newSkillId_ = value;
      }
    }

    private int state_;
    /// <summary>
    /// state=1 代表升级成功(目前只发1)，0：表配置有错，升级失败，-1：宠物等级不满足要求
    /// </summary>
    public int state {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (oldSkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(oldSkillId);
      }
      if (newSkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(newSkillId);
      }
      if (state != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(state);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (oldSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(oldSkillId);
      }
      if (newSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(newSkillId);
      }
      if (state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(state);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            oldSkillId = input.ReadInt32();
            break;
          }
          case 16: {
            newSkillId = input.ReadInt32();
            break;
          }
          case 24: {
            state = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物当前血量信息，服务器通知;
  /// </summary>
  public sealed class PetHpInfo : pb::IMessage {
    private static readonly pb::MessageParser<PetHpInfo> _parser = new pb::MessageParser<PetHpInfo>(() => new PetHpInfo());
    public static pb::MessageParser<PetHpInfo> Parser { get { return _parser; } }

    private int hp_;
    public int hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int maxHp_;
    public int maxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (hp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(hp);
      }
      if (maxHp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(maxHp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hp);
      }
      if (maxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxHp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            hp = input.ReadInt32();
            break;
          }
          case 16: {
            maxHp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 天赋被动技能列表
  /// </summary>
  public sealed class PetTianFuPassiveSkillList : pb::IMessage {
    private static readonly pb::MessageParser<PetTianFuPassiveSkillList> _parser = new pb::MessageParser<PetTianFuPassiveSkillList>(() => new PetTianFuPassiveSkillList());
    public static pb::MessageParser<PetTianFuPassiveSkillList> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::pet.PetTianFuPassiveSkill> _repeated_skillList_codec
        = pb::FieldCodec.ForMessage(10, global::pet.PetTianFuPassiveSkill.Parser);
    private readonly pbc::RepeatedField<global::pet.PetTianFuPassiveSkill> skillList_ = new pbc::RepeatedField<global::pet.PetTianFuPassiveSkill>();
    public pbc::RepeatedField<global::pet.PetTianFuPassiveSkill> skillList {
      get { return skillList_; }
    }

    private int petLevClass_;
    /// <summary>
    /// 宠物阶级
    /// </summary>
    public int petLevClass {
      get { return petLevClass_; }
      set {
        petLevClass_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      skillList_.WriteTo(output, _repeated_skillList_codec);
      if (petLevClass != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(petLevClass);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += skillList_.CalculateSize(_repeated_skillList_codec);
      if (petLevClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(petLevClass);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            skillList_.AddEntriesFrom(input, _repeated_skillList_codec);
            break;
          }
          case 16: {
            petLevClass = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 随机技能
  /// </summary>
  public sealed class PetTianFuRandomPassiveSkill : pb::IMessage {
    private static readonly pb::MessageParser<PetTianFuRandomPassiveSkill> _parser = new pb::MessageParser<PetTianFuRandomPassiveSkill>(() => new PetTianFuRandomPassiveSkill());
    public static pb::MessageParser<PetTianFuRandomPassiveSkill> Parser { get { return _parser; } }

    private int pos_;
    public int pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    private int special_;
    /// <summary>
    /// 1是特殊技能，0是普通被动技能
    /// </summary>
    public int special {
      get { return special_; }
      set {
        special_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(pos);
      }
      if (special != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(special);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(pos);
      }
      if (special != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(special);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pos = input.ReadInt32();
            break;
          }
          case 16: {
            special = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PetSkillAttr : pb::IMessage {
    private static readonly pb::MessageParser<PetSkillAttr> _parser = new pb::MessageParser<PetSkillAttr>(() => new PetSkillAttr());
    public static pb::MessageParser<PetSkillAttr> Parser { get { return _parser; } }

    private int value_;
    public int value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    private int color_;
    public int color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    private int attrType_;
    /// <summary>
    ///ChongwuXilianShujuku表里的type
    /// </summary>
    public int attrType {
      get { return attrType_; }
      set {
        attrType_ = value;
      }
    }

    private int param_;
    /// <summary>
    ///ChongwuXilianShujuku表里的param
    /// </summary>
    public int param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(value);
      }
      if (color != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(color);
      }
      if (attrType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(attrType);
      }
      if (param != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(param);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(value);
      }
      if (color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(color);
      }
      if (attrType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(attrType);
      }
      if (param != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(param);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            value = input.ReadInt32();
            break;
          }
          case 16: {
            color = input.ReadInt32();
            break;
          }
          case 24: {
            attrType = input.ReadInt32();
            break;
          }
          case 32: {
            param = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 天赋技能
  /// </summary>
  public sealed class PetTianFuPassiveSkill : pb::IMessage {
    private static readonly pb::MessageParser<PetTianFuPassiveSkill> _parser = new pb::MessageParser<PetTianFuPassiveSkill>(() => new PetTianFuPassiveSkill());
    public static pb::MessageParser<PetTianFuPassiveSkill> Parser { get { return _parser; } }

    private int pos_;
    public int pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    private int skillGroup_;
    public int skillGroup {
      get { return skillGroup_; }
      set {
        skillGroup_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::pet.PetSkillAttr> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(26, global::pet.PetSkillAttr.Parser);
    private readonly pbc::RepeatedField<global::pet.PetSkillAttr> attrs_ = new pbc::RepeatedField<global::pet.PetSkillAttr>();
    public pbc::RepeatedField<global::pet.PetSkillAttr> attrs {
      get { return attrs_; }
    }

    private int tmpSkillGroup_;
    public int tmpSkillGroup {
      get { return tmpSkillGroup_; }
      set {
        tmpSkillGroup_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::pet.PetSkillAttr> _repeated_tmpAttrs_codec
        = pb::FieldCodec.ForMessage(42, global::pet.PetSkillAttr.Parser);
    private readonly pbc::RepeatedField<global::pet.PetSkillAttr> tmpAttrs_ = new pbc::RepeatedField<global::pet.PetSkillAttr>();
    public pbc::RepeatedField<global::pet.PetSkillAttr> tmpAttrs {
      get { return tmpAttrs_; }
    }

    private int special_;
    /// <summary>
    /// 1是特殊技能，0是普通被动技能
    /// </summary>
    public int special {
      get { return special_; }
      set {
        special_ = value;
      }
    }

    private int xilianId_;
    /// <summary>
    /// 洗练ID
    /// </summary>
    public int xilianId {
      get { return xilianId_; }
      set {
        xilianId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(pos);
      }
      if (skillGroup != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(skillGroup);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
      if (tmpSkillGroup != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(tmpSkillGroup);
      }
      tmpAttrs_.WriteTo(output, _repeated_tmpAttrs_codec);
      if (special != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(special);
      }
      if (xilianId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(xilianId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(pos);
      }
      if (skillGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(skillGroup);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      if (tmpSkillGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(tmpSkillGroup);
      }
      size += tmpAttrs_.CalculateSize(_repeated_tmpAttrs_codec);
      if (special != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(special);
      }
      if (xilianId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(xilianId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pos = input.ReadInt32();
            break;
          }
          case 16: {
            skillGroup = input.ReadInt32();
            break;
          }
          case 26: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 32: {
            tmpSkillGroup = input.ReadInt32();
            break;
          }
          case 42: {
            tmpAttrs_.AddEntriesFrom(input, _repeated_tmpAttrs_codec);
            break;
          }
          case 48: {
            special = input.ReadInt32();
            break;
          }
          case 56: {
            xilianId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PetHejiPointChange : pb::IMessage {
    private static readonly pb::MessageParser<PetHejiPointChange> _parser = new pb::MessageParser<PetHejiPointChange>(() => new PetHejiPointChange());
    public static pb::MessageParser<PetHejiPointChange> Parser { get { return _parser; } }

    private int point_;
    public int point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (point != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(point);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(point);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            point = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ActivePvpInfo : pb::IMessage {
    private static readonly pb::MessageParser<ActivePvpInfo> _parser = new pb::MessageParser<ActivePvpInfo>(() => new ActivePvpInfo());
    public static pb::MessageParser<ActivePvpInfo> Parser { get { return _parser; } }

    private long petId_;
    public long petId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    private bool activePvp_;
    public bool activePvp {
      get { return activePvp_; }
      set {
        activePvp_ = value;
      }
    }

    private long roleId_;
    /// <summary>
    ///角色ID
    /// </summary>
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (petId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(petId);
      }
      if (activePvp != false) {
        output.WriteRawTag(16);
        output.WriteBool(activePvp);
      }
      if (roleId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(roleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (petId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(petId);
      }
      if (activePvp != false) {
        size += 1 + 1;
      }
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            petId = input.ReadInt64();
            break;
          }
          case 16: {
            activePvp = input.ReadBool();
            break;
          }
          case 24: {
            roleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 回收设置 信息
  /// </summary>
  public sealed class CallBackSetting : pb::IMessage {
    private static readonly pb::MessageParser<CallBackSetting> _parser = new pb::MessageParser<CallBackSetting>(() => new CallBackSetting());
    public static pb::MessageParser<CallBackSetting> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_callBackSettingList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> callBackSettingList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 1:左侧的钩 2:quality 3:level 4:wolong
    /// </summary>
    public pbc::RepeatedField<int> callBackSettingList {
      get { return callBackSettingList_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      callBackSettingList_.WriteTo(output, _repeated_callBackSettingList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += callBackSettingList_.CalculateSize(_repeated_callBackSettingList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            callBackSettingList_.AddEntriesFrom(input, _repeated_callBackSettingList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
