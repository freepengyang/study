// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Union.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace union {

  #region Messages
  public sealed class UnionBrief : pb::IMessage {
    private static readonly pb::MessageParser<UnionBrief> _parser = new pb::MessageParser<UnionBrief>(() => new UnionBrief());
    public static pb::MessageParser<UnionBrief> Parser { get { return _parser; } }

    private long unionId_;
    /// <summary>
    ///帮会id
    /// </summary>
    public long unionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    ///帮会名字
    /// </summary>
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long leaderId_;
    /// <summary>
    ///会长id
    /// </summary>
    public long leaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    private string leaderName_ = "";
    /// <summary>
    ///会长名字
    /// </summary>
    public string leaderName {
      get { return leaderName_; }
      set {
        leaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int size_;
    /// <summary>
    ///成员数
    /// </summary>
    public int size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    private bool isLeaderOnline_;
    /// <summary>
    ///会长是否在线
    /// </summary>
    public bool isLeaderOnline {
      get { return isLeaderOnline_; }
      set {
        isLeaderOnline_ = value;
      }
    }

    private long createTime_;
    /// <summary>
    ///帮会创建时间
    /// </summary>
    public long createTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    private long declareWarTime_;
    /// <summary>
    ///宣战时间,0表示未宣战
    /// </summary>
    public long declareWarTime {
      get { return declareWarTime_; }
      set {
        declareWarTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (unionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(unionId);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (leaderId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(leaderId);
      }
      if (leaderName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(leaderName);
      }
      if (level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(level);
      }
      if (size != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(size);
      }
      if (isLeaderOnline != false) {
        output.WriteRawTag(56);
        output.WriteBool(isLeaderOnline);
      }
      if (createTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(createTime);
      }
      if (declareWarTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(declareWarTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (unionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(unionId);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (leaderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(leaderId);
      }
      if (leaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(leaderName);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(size);
      }
      if (isLeaderOnline != false) {
        size += 1 + 1;
      }
      if (createTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(createTime);
      }
      if (declareWarTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(declareWarTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            unionId = input.ReadInt64();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 24: {
            leaderId = input.ReadInt64();
            break;
          }
          case 34: {
            leaderName = input.ReadString();
            break;
          }
          case 40: {
            level = input.ReadInt32();
            break;
          }
          case 48: {
            size = input.ReadInt32();
            break;
          }
          case 56: {
            isLeaderOnline = input.ReadBool();
            break;
          }
          case 64: {
            createTime = input.ReadInt64();
            break;
          }
          case 72: {
            declareWarTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class UnionMember : pb::IMessage {
    private static readonly pb::MessageParser<UnionMember> _parser = new pb::MessageParser<UnionMember>(() => new UnionMember());
    public static pb::MessageParser<UnionMember> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private string name_ = "";
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int position_;
    /// <summary>
    ///职位 0会员,1精英,2长老,3副会长,4会长
    /// </summary>
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    private bool isOnline_;
    /// <summary>
    ///是否在线
    /// </summary>
    public bool isOnline {
      get { return isOnline_; }
      set {
        isOnline_ = value;
      }
    }

    private int level_;
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int career_;
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    private int mapId_;
    public int mapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    private long teamId_;
    public long teamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    private long lastLogoutTime_;
    /// <summary>
    ///上次离线时间
    /// </summary>
    public long lastLogoutTime {
      get { return lastLogoutTime_; }
      set {
        lastLogoutTime_ = value;
      }
    }

    private int contribute_;
    /// <summary>
    ///帮会贡献
    /// </summary>
    public int contribute {
      get { return contribute_; }
      set {
        contribute_ = value;
      }
    }

    private int sex_;
    /// <summary>
    ///性别;
    /// </summary>
    public int sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private int fighting_;
    /// <summary>
    ///战斗力
    /// </summary>
    public int fighting {
      get { return fighting_; }
      set {
        fighting_ = value;
      }
    }

    private bool canSpeak_;
    public bool canSpeak {
      get { return canSpeak_; }
      set {
        canSpeak_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (position != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(position);
      }
      if (isOnline != false) {
        output.WriteRawTag(32);
        output.WriteBool(isOnline);
      }
      if (level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(level);
      }
      if (career != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(career);
      }
      if (mapId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(mapId);
      }
      if (teamId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(teamId);
      }
      if (lastLogoutTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(lastLogoutTime);
      }
      if (contribute != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(contribute);
      }
      if (sex != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(sex);
      }
      if (fighting != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(fighting);
      }
      if (canSpeak != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(canSpeak);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      if (isOnline != false) {
        size += 1 + 1;
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (mapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mapId);
      }
      if (teamId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(teamId);
      }
      if (lastLogoutTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(lastLogoutTime);
      }
      if (contribute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(contribute);
      }
      if (sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sex);
      }
      if (fighting != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(fighting);
      }
      if (canSpeak != false) {
        size += 2 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 24: {
            position = input.ReadInt32();
            break;
          }
          case 32: {
            isOnline = input.ReadBool();
            break;
          }
          case 40: {
            level = input.ReadInt32();
            break;
          }
          case 48: {
            career = input.ReadInt32();
            break;
          }
          case 56: {
            mapId = input.ReadInt32();
            break;
          }
          case 64: {
            teamId = input.ReadInt64();
            break;
          }
          case 72: {
            lastLogoutTime = input.ReadInt64();
            break;
          }
          case 88: {
            contribute = input.ReadInt32();
            break;
          }
          case 96: {
            sex = input.ReadInt32();
            break;
          }
          case 168: {
            fighting = input.ReadInt32();
            break;
          }
          case 176: {
            canSpeak = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///申请加入信息
  /// </summary>
  public sealed class UnionApplyInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnionApplyInfo> _parser = new pb::MessageParser<UnionApplyInfo>(() => new UnionApplyInfo());
    public static pb::MessageParser<UnionApplyInfo> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private string name_ = "";
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int level_;
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int career_;
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    private int nbValue_;
    /// <summary>
    ///战斗力
    /// </summary>
    public int nbValue {
      get { return nbValue_; }
      set {
        nbValue_ = value;
      }
    }

    private long applyTime_;
    /// <summary>
    ///申请时间
    /// </summary>
    public long applyTime {
      get { return applyTime_; }
      set {
        applyTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(level);
      }
      if (career != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(career);
      }
      if (nbValue != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(nbValue);
      }
      if (applyTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(applyTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (nbValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nbValue);
      }
      if (applyTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(applyTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 24: {
            level = input.ReadInt32();
            break;
          }
          case 32: {
            career = input.ReadInt32();
            break;
          }
          case 40: {
            nbValue = input.ReadInt32();
            break;
          }
          case 48: {
            applyTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class UnionInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnionInfo> _parser = new pb::MessageParser<UnionInfo>(() => new UnionInfo());
    public static pb::MessageParser<UnionInfo> Parser { get { return _parser; } }

    private global::union.UnionBrief brief_;
    public global::union.UnionBrief brief {
      get { return brief_; }
      set {
        brief_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::union.UnionMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(18, global::union.UnionMember.Parser);
    private readonly pbc::RepeatedField<global::union.UnionMember> members_ = new pbc::RepeatedField<global::union.UnionMember>();
    public pbc::RepeatedField<global::union.UnionMember> members {
      get { return members_; }
    }

    private long wealth_;
    /// <summary>
    ///帮会资金
    /// </summary>
    public long wealth {
      get { return wealth_; }
      set {
        wealth_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::union.UnionBrief> _repeated_enemyUnions_codec
        = pb::FieldCodec.ForMessage(34, global::union.UnionBrief.Parser);
    private readonly pbc::RepeatedField<global::union.UnionBrief> enemyUnions_ = new pbc::RepeatedField<global::union.UnionBrief>();
    /// <summary>
    ///敌对帮会
    /// </summary>
    public pbc::RepeatedField<global::union.UnionBrief> enemyUnions {
      get { return enemyUnions_; }
    }

    private int bulletinCount_;
    /// <summary>
    ///更改公告次数
    /// </summary>
    public int bulletinCount {
      get { return bulletinCount_; }
      set {
        bulletinCount_ = value;
      }
    }

    private string bulletin_ = "";
    /// <summary>
    ///公告
    /// </summary>
    public string bulletin {
      get { return bulletin_; }
      set {
        bulletin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int rank_;
    /// <summary>
    ///排名
    /// </summary>
    public int rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    private int autoJionLevel_;
    /// <summary>
    ///自动加人等级限制
    /// </summary>
    public int autoJionLevel {
      get { return autoJionLevel_; }
      set {
        autoJionLevel_ = value;
      }
    }

    private long lastPushMessageTime_;
    /// <summary>
    ///上次发送推送消息的时间戳
    /// </summary>
    public long lastPushMessageTime {
      get { return lastPushMessageTime_; }
      set {
        lastPushMessageTime_ = value;
      }
    }

    private long yuanbao_;
    /// <summary>
    ///帮会元宝;
    /// </summary>
    public long yuanbao {
      get { return yuanbao_; }
      set {
        yuanbao_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (brief_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(brief);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (wealth != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(wealth);
      }
      enemyUnions_.WriteTo(output, _repeated_enemyUnions_codec);
      if (bulletinCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(bulletinCount);
      }
      if (bulletin.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(bulletin);
      }
      if (rank != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(rank);
      }
      if (autoJionLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(autoJionLevel);
      }
      if (lastPushMessageTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(lastPushMessageTime);
      }
      if (yuanbao != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(yuanbao);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (brief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(brief);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (wealth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(wealth);
      }
      size += enemyUnions_.CalculateSize(_repeated_enemyUnions_codec);
      if (bulletinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bulletinCount);
      }
      if (bulletin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(bulletin);
      }
      if (rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(rank);
      }
      if (autoJionLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(autoJionLevel);
      }
      if (lastPushMessageTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(lastPushMessageTime);
      }
      if (yuanbao != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(yuanbao);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (brief_ == null) {
              brief_ = new global::union.UnionBrief();
            }
            input.ReadMessage(brief_);
            break;
          }
          case 18: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 24: {
            wealth = input.ReadInt64();
            break;
          }
          case 34: {
            enemyUnions_.AddEntriesFrom(input, _repeated_enemyUnions_codec);
            break;
          }
          case 40: {
            bulletinCount = input.ReadInt32();
            break;
          }
          case 50: {
            bulletin = input.ReadString();
            break;
          }
          case 56: {
            rank = input.ReadInt32();
            break;
          }
          case 72: {
            autoJionLevel = input.ReadInt32();
            break;
          }
          case 80: {
            lastPushMessageTime = input.ReadInt64();
            break;
          }
          case 88: {
            yuanbao = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class UnionSouvenirWealthPackInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnionSouvenirWealthPackInfo> _parser = new pb::MessageParser<UnionSouvenirWealthPackInfo>(() => new UnionSouvenirWealthPackInfo());
    public static pb::MessageParser<UnionSouvenirWealthPackInfo> Parser { get { return _parser; } }

    private long id_;
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long roleId_;
    /// <summary>
    ///发红包的人的id
    /// </summary>
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    ///发红包的人的名字
    /// </summary>
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int totalWealth_;
    public int totalWealth {
      get { return totalWealth_; }
      set {
        totalWealth_ = value;
      }
    }

    private int wealthLeft_;
    public int wealthLeft {
      get { return wealthLeft_; }
      set {
        wealthLeft_ = value;
      }
    }

    private int totalNumber_;
    /// <summary>
    ///红包总数
    /// </summary>
    public int totalNumber {
      get { return totalNumber_; }
      set {
        totalNumber_ = value;
      }
    }

    private int takeNumber_;
    /// <summary>
    ///已领数
    /// </summary>
    public int takeNumber {
      get { return takeNumber_; }
      set {
        takeNumber_ = value;
      }
    }

    private bool haveITaken_;
    /// <summary>
    ///自己是否已领
    /// </summary>
    public bool haveITaken {
      get { return haveITaken_; }
      set {
        haveITaken_ = value;
      }
    }

    private long sendTime_;
    /// <summary>
    ///发红包的时间
    /// </summary>
    public long sendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    private int wealthGet_;
    /// <summary>
    ///自己领到的
    /// </summary>
    public int wealthGet {
      get { return wealthGet_; }
      set {
        wealthGet_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
      if (roleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(roleId);
      }
      if (name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(name);
      }
      if (totalWealth != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(totalWealth);
      }
      if (wealthLeft != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(wealthLeft);
      }
      if (totalNumber != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(totalNumber);
      }
      if (takeNumber != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(takeNumber);
      }
      if (haveITaken != false) {
        output.WriteRawTag(64);
        output.WriteBool(haveITaken);
      }
      if (sendTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(sendTime);
      }
      if (wealthGet != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(wealthGet);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (totalWealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(totalWealth);
      }
      if (wealthLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(wealthLeft);
      }
      if (totalNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(totalNumber);
      }
      if (takeNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(takeNumber);
      }
      if (haveITaken != false) {
        size += 1 + 1;
      }
      if (sendTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(sendTime);
      }
      if (wealthGet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(wealthGet);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
          case 16: {
            roleId = input.ReadInt64();
            break;
          }
          case 26: {
            name = input.ReadString();
            break;
          }
          case 32: {
            totalWealth = input.ReadInt32();
            break;
          }
          case 40: {
            wealthLeft = input.ReadInt32();
            break;
          }
          case 48: {
            totalNumber = input.ReadInt32();
            break;
          }
          case 56: {
            takeNumber = input.ReadInt32();
            break;
          }
          case 64: {
            haveITaken = input.ReadBool();
            break;
          }
          case 72: {
            sendTime = input.ReadInt64();
            break;
          }
          case 80: {
            wealthGet = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GetUnionTabRequest : pb::IMessage {
    private static readonly pb::MessageParser<GetUnionTabRequest> _parser = new pb::MessageParser<GetUnionTabRequest>(() => new GetUnionTabRequest());
    public static pb::MessageParser<GetUnionTabRequest> Parser { get { return _parser; } }

    private int tab_;
    public int tab {
      get { return tab_; }
      set {
        tab_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (tab != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(tab);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (tab != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(tab);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            tab = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GetUnionTabResponse : pb::IMessage {
    private static readonly pb::MessageParser<GetUnionTabResponse> _parser = new pb::MessageParser<GetUnionTabResponse>(() => new GetUnionTabResponse());
    public static pb::MessageParser<GetUnionTabResponse> Parser { get { return _parser; } }

    private int tab_;
    public int tab {
      get { return tab_; }
      set {
        tab_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::union.UnionBrief> _repeated_unions_codec
        = pb::FieldCodec.ForMessage(18, global::union.UnionBrief.Parser);
    private readonly pbc::RepeatedField<global::union.UnionBrief> unions_ = new pbc::RepeatedField<global::union.UnionBrief>();
    /// <summary>
    ///帮会列表
    /// </summary>
    public pbc::RepeatedField<global::union.UnionBrief> unions {
      get { return unions_; }
    }

    private global::union.UnionInfo unionInfo_;
    /// <summary>
    ///帮会主信息
    /// </summary>
    public global::union.UnionInfo unionInfo {
      get { return unionInfo_; }
      set {
        unionInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_storehouse_codec
        = pb::FieldCodec.ForMessage(34, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> storehouse_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    /// <summary>
    ///仓库
    /// </summary>
    public pbc::RepeatedField<global::bag.BagItemInfo> storehouse {
      get { return storehouse_; }
    }

    private static readonly pb::FieldCodec<global::union.UnionSouvenirWealthPackInfo> _repeated_wealthPacks_codec
        = pb::FieldCodec.ForMessage(42, global::union.UnionSouvenirWealthPackInfo.Parser);
    private readonly pbc::RepeatedField<global::union.UnionSouvenirWealthPackInfo> wealthPacks_ = new pbc::RepeatedField<global::union.UnionSouvenirWealthPackInfo>();
    /// <summary>
    ///红包
    /// </summary>
    public pbc::RepeatedField<global::union.UnionSouvenirWealthPackInfo> wealthPacks {
      get { return wealthPacks_; }
    }

    private static readonly pb::FieldCodec<global::union.UnionLogInfo> _repeated_wealthPackLog_codec
        = pb::FieldCodec.ForMessage(50, global::union.UnionLogInfo.Parser);
    private readonly pbc::RepeatedField<global::union.UnionLogInfo> wealthPackLog_ = new pbc::RepeatedField<global::union.UnionLogInfo>();
    /// <summary>
    ///红包记录
    /// </summary>
    public pbc::RepeatedField<global::union.UnionLogInfo> wealthPackLog {
      get { return wealthPackLog_; }
    }

    private static readonly pb::FieldCodec<global::union.UnionLogInfo> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(58, global::union.UnionLogInfo.Parser);
    private readonly pbc::RepeatedField<global::union.UnionLogInfo> logs_ = new pbc::RepeatedField<global::union.UnionLogInfo>();
    /// <summary>
    ///帮会消息
    /// </summary>
    public pbc::RepeatedField<global::union.UnionLogInfo> logs {
      get { return logs_; }
    }

    private static readonly pb::FieldCodec<global::union.UnionApplyInfo> _repeated_applies_codec
        = pb::FieldCodec.ForMessage(66, global::union.UnionApplyInfo.Parser);
    private readonly pbc::RepeatedField<global::union.UnionApplyInfo> applies_ = new pbc::RepeatedField<global::union.UnionApplyInfo>();
    /// <summary>
    ///申请列表
    /// </summary>
    public pbc::RepeatedField<global::union.UnionApplyInfo> applies {
      get { return applies_; }
    }

    private int autoJionLevel_;
    /// <summary>
    ///自动加人等级限制
    /// </summary>
    public int autoJionLevel {
      get { return autoJionLevel_; }
      set {
        autoJionLevel_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_noCombineUnionId_codec
        = pb::FieldCodec.ForInt64(90);
    private readonly pbc::RepeatedField<long> noCombineUnionId_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///不能合并的帮派
    /// </summary>
    public pbc::RepeatedField<long> noCombineUnionId {
      get { return noCombineUnionId_; }
    }

    private int storeReincarnation_;
    /// <summary>
    ///仓库取物品的转生限制
    /// </summary>
    public int storeReincarnation {
      get { return storeReincarnation_; }
      set {
        storeReincarnation_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::union.UnionRedPackageInfo> _repeated_redPackageInfos_codec
        = pb::FieldCodec.ForMessage(122, global::union.UnionRedPackageInfo.Parser);
    private readonly pbc::RepeatedField<global::union.UnionRedPackageInfo> redPackageInfos_ = new pbc::RepeatedField<global::union.UnionRedPackageInfo>();
    /// <summary>
    ///红包
    /// </summary>
    public pbc::RepeatedField<global::union.UnionRedPackageInfo> redPackageInfos {
      get { return redPackageInfos_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (tab != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(tab);
      }
      unions_.WriteTo(output, _repeated_unions_codec);
      if (unionInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(unionInfo);
      }
      storehouse_.WriteTo(output, _repeated_storehouse_codec);
      wealthPacks_.WriteTo(output, _repeated_wealthPacks_codec);
      wealthPackLog_.WriteTo(output, _repeated_wealthPackLog_codec);
      logs_.WriteTo(output, _repeated_logs_codec);
      applies_.WriteTo(output, _repeated_applies_codec);
      if (autoJionLevel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(autoJionLevel);
      }
      noCombineUnionId_.WriteTo(output, _repeated_noCombineUnionId_codec);
      if (storeReincarnation != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(storeReincarnation);
      }
      redPackageInfos_.WriteTo(output, _repeated_redPackageInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (tab != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(tab);
      }
      size += unions_.CalculateSize(_repeated_unions_codec);
      if (unionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(unionInfo);
      }
      size += storehouse_.CalculateSize(_repeated_storehouse_codec);
      size += wealthPacks_.CalculateSize(_repeated_wealthPacks_codec);
      size += wealthPackLog_.CalculateSize(_repeated_wealthPackLog_codec);
      size += logs_.CalculateSize(_repeated_logs_codec);
      size += applies_.CalculateSize(_repeated_applies_codec);
      if (autoJionLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(autoJionLevel);
      }
      size += noCombineUnionId_.CalculateSize(_repeated_noCombineUnionId_codec);
      if (storeReincarnation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(storeReincarnation);
      }
      size += redPackageInfos_.CalculateSize(_repeated_redPackageInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            tab = input.ReadInt32();
            break;
          }
          case 18: {
            unions_.AddEntriesFrom(input, _repeated_unions_codec);
            break;
          }
          case 26: {
            if (unionInfo_ == null) {
              unionInfo_ = new global::union.UnionInfo();
            }
            input.ReadMessage(unionInfo_);
            break;
          }
          case 34: {
            storehouse_.AddEntriesFrom(input, _repeated_storehouse_codec);
            break;
          }
          case 42: {
            wealthPacks_.AddEntriesFrom(input, _repeated_wealthPacks_codec);
            break;
          }
          case 50: {
            wealthPackLog_.AddEntriesFrom(input, _repeated_wealthPackLog_codec);
            break;
          }
          case 58: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 66: {
            applies_.AddEntriesFrom(input, _repeated_applies_codec);
            break;
          }
          case 80: {
            autoJionLevel = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            noCombineUnionId_.AddEntriesFrom(input, _repeated_noCombineUnionId_codec);
            break;
          }
          case 96: {
            storeReincarnation = input.ReadInt32();
            break;
          }
          case 122: {
            redPackageInfos_.AddEntriesFrom(input, _repeated_redPackageInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class UnionLogInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnionLogInfo> _parser = new pb::MessageParser<UnionLogInfo>(() => new UnionLogInfo());
    public static pb::MessageParser<UnionLogInfo> Parser { get { return _parser; } }

    private long time_;
    public long time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private string message_ = "";
    public string message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(time);
      }
      if (message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(time);
      }
      if (message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            time = input.ReadInt64();
            break;
          }
          case 18: {
            message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///帮会列表
  /// </summary>
  public sealed class UnionList : pb::IMessage {
    private static readonly pb::MessageParser<UnionList> _parser = new pb::MessageParser<UnionList>(() => new UnionList());
    public static pb::MessageParser<UnionList> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::union.UnionBrief> _repeated_unions_codec
        = pb::FieldCodec.ForMessage(10, global::union.UnionBrief.Parser);
    private readonly pbc::RepeatedField<global::union.UnionBrief> unions_ = new pbc::RepeatedField<global::union.UnionBrief>();
    public pbc::RepeatedField<global::union.UnionBrief> unions {
      get { return unions_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      unions_.WriteTo(output, _repeated_unions_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += unions_.CalculateSize(_repeated_unions_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            unions_.AddEntriesFrom(input, _repeated_unions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建帮会请求
  /// </summary>
  public sealed class CreateUnionRequest : pb::IMessage {
    private static readonly pb::MessageParser<CreateUnionRequest> _parser = new pb::MessageParser<CreateUnionRequest>(() => new CreateUnionRequest());
    public static pb::MessageParser<CreateUnionRequest> Parser { get { return _parser; } }

    private string name_ = "";
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///申请加入请求
  /// </summary>
  public sealed class ApplyUnionRequest : pb::IMessage {
    private static readonly pb::MessageParser<ApplyUnionRequest> _parser = new pb::MessageParser<ApplyUnionRequest>(() => new ApplyUnionRequest());
    public static pb::MessageParser<ApplyUnionRequest> Parser { get { return _parser; } }

    private long unionId_;
    public long unionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (unionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(unionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (unionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(unionId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            unionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加入回应
  /// </summary>
  public sealed class ApplyUnionListResponse : pb::IMessage {
    private static readonly pb::MessageParser<ApplyUnionListResponse> _parser = new pb::MessageParser<ApplyUnionListResponse>(() => new ApplyUnionListResponse());
    public static pb::MessageParser<ApplyUnionListResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<long> _repeated_allUList_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> allUList_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///所有申请的公会列表;
    /// </summary>
    public pbc::RepeatedField<long> allUList {
      get { return allUList_; }
    }

    private long lastUnionTime_;
    /// <summary>
    ///最后一次申请时间
    /// </summary>
    public long lastUnionTime {
      get { return lastUnionTime_; }
      set {
        lastUnionTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      allUList_.WriteTo(output, _repeated_allUList_codec);
      if (lastUnionTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(lastUnionTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += allUList_.CalculateSize(_repeated_allUList_codec);
      if (lastUnionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(lastUnionTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            allUList_.AddEntriesFrom(input, _repeated_allUList_codec);
            break;
          }
          case 16: {
            lastUnionTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///邀请加入请求
  /// </summary>
  public sealed class InviteUnionRequest : pb::IMessage {
    private static readonly pb::MessageParser<InviteUnionRequest> _parser = new pb::MessageParser<InviteUnionRequest>(() => new InviteUnionRequest());
    public static pb::MessageParser<InviteUnionRequest> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///被邀请的人收到的消息
  /// </summary>
  public sealed class InviteUnionMsg : pb::IMessage {
    private static readonly pb::MessageParser<InviteUnionMsg> _parser = new pb::MessageParser<InviteUnionMsg>(() => new InviteUnionMsg());
    public static pb::MessageParser<InviteUnionMsg> Parser { get { return _parser; } }

    private long unionId_;
    public long unionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    private string roleName_ = "";
    /// <summary>
    ///邀请者的名字
    /// </summary>
    public string roleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string unionName_ = "";
    public string unionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (unionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(unionId);
      }
      if (roleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(roleName);
      }
      if (unionName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(unionName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (unionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(unionId);
      }
      if (roleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(roleName);
      }
      if (unionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(unionName);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            unionId = input.ReadInt64();
            break;
          }
          case 18: {
            roleName = input.ReadString();
            break;
          }
          case 26: {
            unionName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///处理申请请求
  /// </summary>
  public sealed class ConfirmAppliesRequest : pb::IMessage {
    private static readonly pb::MessageParser<ConfirmAppliesRequest> _parser = new pb::MessageParser<ConfirmAppliesRequest>(() => new ConfirmAppliesRequest());
    public static pb::MessageParser<ConfirmAppliesRequest> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<long> _repeated_roleIds_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> roleIds_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> roleIds {
      get { return roleIds_; }
    }

    private bool confirm_;
    /// <summary>
    ///同意还是忽略
    /// </summary>
    public bool confirm {
      get { return confirm_; }
      set {
        confirm_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      roleIds_.WriteTo(output, _repeated_roleIds_codec);
      if (confirm != false) {
        output.WriteRawTag(16);
        output.WriteBool(confirm);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += roleIds_.CalculateSize(_repeated_roleIds_codec);
      if (confirm != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            roleIds_.AddEntriesFrom(input, _repeated_roleIds_codec);
            break;
          }
          case 16: {
            confirm = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///改变职位请求,响应,操作人和被操作人都会收到响应
  /// </summary>
  public sealed class ChangePositionMsg : pb::IMessage {
    private static readonly pb::MessageParser<ChangePositionMsg> _parser = new pb::MessageParser<ChangePositionMsg>(() => new ChangePositionMsg());
    public static pb::MessageParser<ChangePositionMsg> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private int position_;
    /// <summary>
    ///目标职位
    /// </summary>
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(position);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 16: {
            position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///退会和踢人请求,退会发自己的id
  /// </summary>
  public sealed class LeaveUnionRequest : pb::IMessage {
    private static readonly pb::MessageParser<LeaveUnionRequest> _parser = new pb::MessageParser<LeaveUnionRequest>(() => new LeaveUnionRequest());
    public static pb::MessageParser<LeaveUnionRequest> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///退会和踢人响应,操作人和被操作人都会收到
  /// </summary>
  public sealed class LeaveUnionResponse : pb::IMessage {
    private static readonly pb::MessageParser<LeaveUnionResponse> _parser = new pb::MessageParser<LeaveUnionResponse>(() => new LeaveUnionResponse());
    public static pb::MessageParser<LeaveUnionResponse> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private string kickBy_ = "";
    /// <summary>
    ///被谁踢了,自己退话为null
    /// </summary>
    public string kickBy {
      get { return kickBy_; }
      set {
        kickBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (kickBy.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(kickBy);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (kickBy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(kickBy);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 18: {
            kickBy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class UnionDonateGoldRequest : pb::IMessage {
    private static readonly pb::MessageParser<UnionDonateGoldRequest> _parser = new pb::MessageParser<UnionDonateGoldRequest>(() => new UnionDonateGoldRequest());
    public static pb::MessageParser<UnionDonateGoldRequest> Parser { get { return _parser; } }

    private int count_;
    /// <summary>
    ///捐献金币数
    /// </summary>
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class UnionDonateEquipRequest : pb::IMessage {
    private static readonly pb::MessageParser<UnionDonateEquipRequest> _parser = new pb::MessageParser<UnionDonateEquipRequest>(() => new UnionDonateEquipRequest());
    public static pb::MessageParser<UnionDonateEquipRequest> Parser { get { return _parser; } }

    private int bagIndex_;
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    private int count_;
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bagIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(bagIndex);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bagIndex = input.ReadInt32();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class UnionDonateResponse : pb::IMessage {
    private static readonly pb::MessageParser<UnionDonateResponse> _parser = new pb::MessageParser<UnionDonateResponse>(() => new UnionDonateResponse());
    public static pb::MessageParser<UnionDonateResponse> Parser { get { return _parser; } }

    private long wealth_;
    /// <summary>
    ///捐献后的帮会资金数
    /// </summary>
    public long wealth {
      get { return wealth_; }
      set {
        wealth_ = value;
      }
    }

    private int level_;
    /// <summary>
    ///捐献后的帮会等级
    /// </summary>
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private global::bag.BagItemInfo oldItem_;
    public global::bag.BagItemInfo oldItem {
      get { return oldItem_; }
      set {
        oldItem_ = value;
      }
    }

    private global::bag.BagItemInfo newItem_;
    public global::bag.BagItemInfo newItem {
      get { return newItem_; }
      set {
        newItem_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (wealth != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(wealth);
      }
      if (level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(level);
      }
      if (oldItem_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(oldItem);
      }
      if (newItem_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(newItem);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (wealth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(wealth);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (oldItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(oldItem);
      }
      if (newItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(newItem);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            wealth = input.ReadInt64();
            break;
          }
          case 16: {
            level = input.ReadInt32();
            break;
          }
          case 26: {
            if (oldItem_ == null) {
              oldItem_ = new global::bag.BagItemInfo();
            }
            input.ReadMessage(oldItem_);
            break;
          }
          case 34: {
            if (newItem_ == null) {
              newItem_ = new global::bag.BagItemInfo();
            }
            input.ReadMessage(newItem_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///兑换装备请求
  /// </summary>
  public sealed class UnionExchangeEquipRequest : pb::IMessage {
    private static readonly pb::MessageParser<UnionExchangeEquipRequest> _parser = new pb::MessageParser<UnionExchangeEquipRequest>(() => new UnionExchangeEquipRequest());
    public static pb::MessageParser<UnionExchangeEquipRequest> Parser { get { return _parser; } }

    private long itemId_;
    public long itemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int count_;
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (itemId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(itemId);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (itemId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(itemId);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemId = input.ReadInt64();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///兑换装备响应
  /// </summary>
  public sealed class UnionExchangeEquipResponse : pb::IMessage {
    private static readonly pb::MessageParser<UnionExchangeEquipResponse> _parser = new pb::MessageParser<UnionExchangeEquipResponse>(() => new UnionExchangeEquipResponse());
    public static pb::MessageParser<UnionExchangeEquipResponse> Parser { get { return _parser; } }

    private long guid_;
    public long guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    private int itemId_;
    public int itemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int count_;
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (guid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(guid);
      }
      if (itemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(itemId);
      }
      if (count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (guid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(guid);
      }
      if (itemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(itemId);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            guid = input.ReadInt64();
            break;
          }
          case 16: {
            itemId = input.ReadInt32();
            break;
          }
          case 24: {
            count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///转让会长,响应为 ChangePositionMsg
  /// </summary>
  public sealed class UnionChangePresidentRequest : pb::IMessage {
    private static readonly pb::MessageParser<UnionChangePresidentRequest> _parser = new pb::MessageParser<UnionChangePresidentRequest>(() => new UnionChangePresidentRequest());
    public static pb::MessageParser<UnionChangePresidentRequest> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///销毁物品请求
  /// </summary>
  public sealed class UnionDestroyItemRequest : pb::IMessage {
    private static readonly pb::MessageParser<UnionDestroyItemRequest> _parser = new pb::MessageParser<UnionDestroyItemRequest>(() => new UnionDestroyItemRequest());
    public static pb::MessageParser<UnionDestroyItemRequest> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<long> _repeated_itemId_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> itemId_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> itemId {
      get { return itemId_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      itemId_.WriteTo(output, _repeated_itemId_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += itemId_.CalculateSize(_repeated_itemId_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            itemId_.AddEntriesFrom(input, _repeated_itemId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///销毁物品回应
  /// </summary>
  public sealed class UnionDestroyItemResponse : pb::IMessage {
    private static readonly pb::MessageParser<UnionDestroyItemResponse> _parser = new pb::MessageParser<UnionDestroyItemResponse>(() => new UnionDestroyItemResponse());
    public static pb::MessageParser<UnionDestroyItemResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<long> _repeated_itemId_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> itemId_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> itemId {
      get { return itemId_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      itemId_.WriteTo(output, _repeated_itemId_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += itemId_.CalculateSize(_repeated_itemId_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            itemId_.AddEntriesFrom(input, _repeated_itemId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宣战请求
  /// </summary>
  public sealed class DeclareWarRequest : pb::IMessage {
    private static readonly pb::MessageParser<DeclareWarRequest> _parser = new pb::MessageParser<DeclareWarRequest>(() => new DeclareWarRequest());
    public static pb::MessageParser<DeclareWarRequest> Parser { get { return _parser; } }

    private long unionId_;
    public long unionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (unionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(unionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (unionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(unionId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            unionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宣战响应,union1对union2宣战,双方在线会员都会收到消息
  /// </summary>
  public sealed class DeclareWarResponse : pb::IMessage {
    private static readonly pb::MessageParser<DeclareWarResponse> _parser = new pb::MessageParser<DeclareWarResponse>(() => new DeclareWarResponse());
    public static pb::MessageParser<DeclareWarResponse> Parser { get { return _parser; } }

    private global::union.UnionBrief union1_;
    public global::union.UnionBrief union1 {
      get { return union1_; }
      set {
        union1_ = value;
      }
    }

    private global::union.UnionBrief union2_;
    public global::union.UnionBrief union2 {
      get { return union2_; }
      set {
        union2_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (union1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(union1);
      }
      if (union2_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(union2);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (union1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(union1);
      }
      if (union2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(union2);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (union1_ == null) {
              union1_ = new global::union.UnionBrief();
            }
            input.ReadMessage(union1_);
            break;
          }
          case 18: {
            if (union2_ == null) {
              union2_ = new global::union.UnionBrief();
            }
            input.ReadMessage(union2_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宣战时间已过,帮会所有在线会员会收到
  /// </summary>
  public sealed class WarTimeout : pb::IMessage {
    private static readonly pb::MessageParser<WarTimeout> _parser = new pb::MessageParser<WarTimeout>(() => new WarTimeout());
    public static pb::MessageParser<WarTimeout> Parser { get { return _parser; } }

    private long enemyUnionId_;
    public long enemyUnionId {
      get { return enemyUnionId_; }
      set {
        enemyUnionId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (enemyUnionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(enemyUnionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (enemyUnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(enemyUnionId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            enemyUnionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发红包请求
  /// </summary>
  public sealed class SendSouvenirWealthRequest : pb::IMessage {
    private static readonly pb::MessageParser<SendSouvenirWealthRequest> _parser = new pb::MessageParser<SendSouvenirWealthRequest>(() => new SendSouvenirWealthRequest());
    public static pb::MessageParser<SendSouvenirWealthRequest> Parser { get { return _parser; } }

    private int totalWealth_;
    public int totalWealth {
      get { return totalWealth_; }
      set {
        totalWealth_ = value;
      }
    }

    private int totalNumber_;
    public int totalNumber {
      get { return totalNumber_; }
      set {
        totalNumber_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (totalWealth != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(totalWealth);
      }
      if (totalNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(totalNumber);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (totalWealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(totalWealth);
      }
      if (totalNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(totalNumber);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            totalWealth = input.ReadInt32();
            break;
          }
          case 16: {
            totalNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GetSouvenirWealthRequest : pb::IMessage {
    private static readonly pb::MessageParser<GetSouvenirWealthRequest> _parser = new pb::MessageParser<GetSouvenirWealthRequest>(() => new GetSouvenirWealthRequest());
    public static pb::MessageParser<GetSouvenirWealthRequest> Parser { get { return _parser; } }

    private long id_;
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class GetSouvenirWealthResponse : pb::IMessage {
    private static readonly pb::MessageParser<GetSouvenirWealthResponse> _parser = new pb::MessageParser<GetSouvenirWealthResponse>(() => new GetSouvenirWealthResponse());
    public static pb::MessageParser<GetSouvenirWealthResponse> Parser { get { return _parser; } }

    private global::union.UnionRedPackageDetailInfo infos_;
    /// <summary>
    ///红包详情
    /// </summary>
    public global::union.UnionRedPackageDetailInfo infos {
      get { return infos_; }
      set {
        infos_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (infos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(infos);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (infos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(infos);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (infos_ == null) {
              infos_ = new global::union.UnionRedPackageDetailInfo();
            }
            input.ReadMessage(infos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///提交帮会公告
  /// </summary>
  public sealed class BulletinRequest : pb::IMessage {
    private static readonly pb::MessageParser<BulletinRequest> _parser = new pb::MessageParser<BulletinRequest>(() => new BulletinRequest());
    public static pb::MessageParser<BulletinRequest> Parser { get { return _parser; } }

    private string bulletin_ = "";
    public string bulletin {
      get { return bulletin_; }
      set {
        bulletin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bulletin.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(bulletin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bulletin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(bulletin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bulletin = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///是否有人申请
  /// </summary>
  public sealed class JoinList : pb::IMessage {
    private static readonly pb::MessageParser<JoinList> _parser = new pb::MessageParser<JoinList>(() => new JoinList());
    public static pb::MessageParser<JoinList> Parser { get { return _parser; } }

    private bool havePerson_;
    public bool havePerson {
      get { return havePerson_; }
      set {
        havePerson_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (havePerson != false) {
        output.WriteRawTag(8);
        output.WriteBool(havePerson);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (havePerson != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            havePerson = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///弹劾请求
  /// </summary>
  public sealed class ImpeachmentRequest : pb::IMessage {
    private static readonly pb::MessageParser<ImpeachmentRequest> _parser = new pb::MessageParser<ImpeachmentRequest>(() => new ImpeachmentRequest());
    public static pb::MessageParser<ImpeachmentRequest> Parser { get { return _parser; } }

    private int type_;
    /// <summary>
    ///1:请求弹劾 2：会员投票 3：请求查看弹劾信息
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private int data_;
    /// <summary>
    ///类型2：（0:弃权，1：支持2：反对）
    /// </summary>
    public int data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(type);
      }
      if (data != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(data);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      if (data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(data);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type = input.ReadInt32();
            break;
          }
          case 16: {
            data = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///弹劾信息
  /// </summary>
  public sealed class ImpeachementMsg : pb::IMessage {
    private static readonly pb::MessageParser<ImpeachementMsg> _parser = new pb::MessageParser<ImpeachementMsg>(() => new ImpeachementMsg());
    public static pb::MessageParser<ImpeachementMsg> Parser { get { return _parser; } }

    private long impeachementer_;
    /// <summary>
    ///弹劾者
    /// </summary>
    public long impeachementer {
      get { return impeachementer_; }
      set {
        impeachementer_ = value;
      }
    }

    private int agree_;
    /// <summary>
    ///赞同的人数
    /// </summary>
    public int agree {
      get { return agree_; }
      set {
        agree_ = value;
      }
    }

    private int refuse_;
    /// <summary>
    ///不支持的人数
    /// </summary>
    public int refuse {
      get { return refuse_; }
      set {
        refuse_ = value;
      }
    }

    private int timeS_;
    /// <summary>
    ///弹劾的时间(s)
    /// </summary>
    public int timeS {
      get { return timeS_; }
      set {
        timeS_ = value;
      }
    }

    private bool data_;
    /// <summary>
    ///是否已投票
    /// </summary>
    public bool data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private string impeachementerName_ = "";
    /// <summary>
    ///弹劾者姓名
    /// </summary>
    public string impeachementerName {
      get { return impeachementerName_; }
      set {
        impeachementerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (impeachementer != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(impeachementer);
      }
      if (agree != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(agree);
      }
      if (refuse != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(refuse);
      }
      if (timeS != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(timeS);
      }
      if (data != false) {
        output.WriteRawTag(40);
        output.WriteBool(data);
      }
      if (impeachementerName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(impeachementerName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (impeachementer != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(impeachementer);
      }
      if (agree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(agree);
      }
      if (refuse != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(refuse);
      }
      if (timeS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(timeS);
      }
      if (data != false) {
        size += 1 + 1;
      }
      if (impeachementerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(impeachementerName);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            impeachementer = input.ReadInt64();
            break;
          }
          case 16: {
            agree = input.ReadInt32();
            break;
          }
          case 24: {
            refuse = input.ReadInt32();
            break;
          }
          case 32: {
            timeS = input.ReadInt32();
            break;
          }
          case 40: {
            data = input.ReadBool();
            break;
          }
          case 50: {
            impeachementerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///可以的申请的一个公会信息
  /// </summary>
  public sealed class canApplyUnion : pb::IMessage {
    private static readonly pb::MessageParser<canApplyUnion> _parser = new pb::MessageParser<canApplyUnion>(() => new canApplyUnion());
    public static pb::MessageParser<canApplyUnion> Parser { get { return _parser; } }

    private long id_;
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private string name_ = "";
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///可以的申请的所有公会信息
  /// </summary>
  public sealed class canApplyUnions : pb::IMessage {
    private static readonly pb::MessageParser<canApplyUnions> _parser = new pb::MessageParser<canApplyUnions>(() => new canApplyUnions());
    public static pb::MessageParser<canApplyUnions> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::union.canApplyUnion> _repeated_union_codec
        = pb::FieldCodec.ForMessage(10, global::union.canApplyUnion.Parser);
    private readonly pbc::RepeatedField<global::union.canApplyUnion> union_ = new pbc::RepeatedField<global::union.canApplyUnion>();
    public pbc::RepeatedField<global::union.canApplyUnion> union {
      get { return union_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      union_.WriteTo(output, _repeated_union_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += union_.CalculateSize(_repeated_union_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            union_.AddEntriesFrom(input, _repeated_union_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置自动加人等级限制
  /// </summary>
  public sealed class SetAutoJionLevelRequest : pb::IMessage {
    private static readonly pb::MessageParser<SetAutoJionLevelRequest> _parser = new pb::MessageParser<SetAutoJionLevelRequest>(() => new SetAutoJionLevelRequest());
    public static pb::MessageParser<SetAutoJionLevelRequest> Parser { get { return _parser; } }

    private int level_;
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(level);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///确定是否允许别人转让会长给我
  /// </summary>
  public sealed class SetApplyLeader : pb::IMessage {
    private static readonly pb::MessageParser<SetApplyLeader> _parser = new pb::MessageParser<SetApplyLeader>(() => new SetApplyLeader());
    public static pb::MessageParser<SetApplyLeader> Parser { get { return _parser; } }

    private bool allow_;
    public bool allow {
      get { return allow_; }
      set {
        allow_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (allow != false) {
        output.WriteRawTag(8);
        output.WriteBool(allow);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (allow != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            allow = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知别人转让会长给我
  /// </summary>
  public sealed class ApplyChangeLeader : pb::IMessage {
    private static readonly pb::MessageParser<ApplyChangeLeader> _parser = new pb::MessageParser<ApplyChangeLeader>(() => new ApplyChangeLeader());
    public static pb::MessageParser<ApplyChangeLeader> Parser { get { return _parser; } }

    private string name_ = "";
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///帮会合并
  /// </summary>
  public sealed class combineUnion : pb::IMessage {
    private static readonly pb::MessageParser<combineUnion> _parser = new pb::MessageParser<combineUnion>(() => new combineUnion());
    public static pb::MessageParser<combineUnion> Parser { get { return _parser; } }

    private int operationType_;
    /// <summary>
    ///操作类型 1:请求 2：响应
    /// </summary>
    public int operationType {
      get { return operationType_; }
      set {
        operationType_ = value;
      }
    }

    private int combineType_;
    /// <summary>
    ///合并类型 1:收编  2：入编
    /// </summary>
    public int combineType {
      get { return combineType_; }
      set {
        combineType_ = value;
      }
    }

    private long unionId_;
    /// <summary>
    ///主工会ID
    /// </summary>
    public long unionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    private string unionName_ = "";
    /// <summary>
    ///主工会名字
    /// </summary>
    public string unionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long unionId1_;
    /// <summary>
    ///副工会ID
    /// </summary>
    public long unionId1 {
      get { return unionId1_; }
      set {
        unionId1_ = value;
      }
    }

    private string unionName1_ = "";
    /// <summary>
    ///副工会名字`
    /// </summary>
    public string unionName1 {
      get { return unionName1_; }
      set {
        unionName1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool agree_;
    /// <summary>
    ///同意
    /// </summary>
    public bool agree {
      get { return agree_; }
      set {
        agree_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (operationType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(operationType);
      }
      if (combineType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(combineType);
      }
      if (unionId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(unionId);
      }
      if (unionName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(unionName);
      }
      if (unionId1 != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(unionId1);
      }
      if (unionName1.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(unionName1);
      }
      if (agree != false) {
        output.WriteRawTag(64);
        output.WriteBool(agree);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (operationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(operationType);
      }
      if (combineType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(combineType);
      }
      if (unionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(unionId);
      }
      if (unionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(unionName);
      }
      if (unionId1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(unionId1);
      }
      if (unionName1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(unionName1);
      }
      if (agree != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            operationType = input.ReadInt32();
            break;
          }
          case 16: {
            combineType = input.ReadInt32();
            break;
          }
          case 24: {
            unionId = input.ReadInt64();
            break;
          }
          case 34: {
            unionName = input.ReadString();
            break;
          }
          case 48: {
            unionId1 = input.ReadInt64();
            break;
          }
          case 58: {
            unionName1 = input.ReadString();
            break;
          }
          case 64: {
            agree = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///改名请求
  /// </summary>
  public sealed class RenameRequest : pb::IMessage {
    private static readonly pb::MessageParser<RenameRequest> _parser = new pb::MessageParser<RenameRequest>(() => new RenameRequest());
    public static pb::MessageParser<RenameRequest> Parser { get { return _parser; } }

    private string name_ = "";
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///帮会取装备权限
  /// </summary>
  public sealed class ExchangeEquipLimit : pb::IMessage {
    private static readonly pb::MessageParser<ExchangeEquipLimit> _parser = new pb::MessageParser<ExchangeEquipLimit>(() => new ExchangeEquipLimit());
    public static pb::MessageParser<ExchangeEquipLimit> Parser { get { return _parser; } }

    private int reincarnation_;
    /// <summary>
    ///转生等级
    /// </summary>
    public int reincarnation {
      get { return reincarnation_; }
      set {
        reincarnation_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (reincarnation != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(reincarnation);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (reincarnation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(reincarnation);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            reincarnation = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///删除申请者
  /// </summary>
  public sealed class UnionInfoUpdate : pb::IMessage {
    private static readonly pb::MessageParser<UnionInfoUpdate> _parser = new pb::MessageParser<UnionInfoUpdate>(() => new UnionInfoUpdate());
    public static pb::MessageParser<UnionInfoUpdate> Parser { get { return _parser; } }

    private int param_;
    /// <summary>
    /// 0: 加入，保留以前 1:全部清空 3:帮会工资是否可领提示
    /// </summary>
    public int param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (param != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(param);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (param != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(param);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            param = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///增员请求
  /// </summary>
  public sealed class AddMemberRequest : pb::IMessage {
    private static readonly pb::MessageParser<AddMemberRequest> _parser = new pb::MessageParser<AddMemberRequest>(() => new AddMemberRequest());
    public static pb::MessageParser<AddMemberRequest> Parser { get { return _parser; } }

    private int addNum_;
    /// <summary>
    /// </summary>
    public int addNum {
      get { return addNum_; }
      set {
        addNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (addNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(addNum);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (addNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(addNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            addNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///副帮主信息
  /// </summary>
  public sealed class Share2AssistantUnion : pb::IMessage {
    private static readonly pb::MessageParser<Share2AssistantUnion> _parser = new pb::MessageParser<Share2AssistantUnion>(() => new Share2AssistantUnion());
    public static pb::MessageParser<Share2AssistantUnion> Parser { get { return _parser; } }

    private long unionId_;
    /// <summary>
    ///帮会id
    /// </summary>
    public long unionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    private string unionName_ = "";
    /// <summary>
    ///帮会名字
    /// </summary>
    public string unionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long leaderId_;
    /// <summary>
    ///帮主Id
    /// </summary>
    public long leaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    private string leaderName_ = "";
    /// <summary>
    ///帮主名称
    /// </summary>
    public string leaderName {
      get { return leaderName_; }
      set {
        leaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int leaderServerId_;
    /// <summary>
    ///所在服务器Id
    /// </summary>
    public int leaderServerId {
      get { return leaderServerId_; }
      set {
        leaderServerId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (unionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(unionId);
      }
      if (unionName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(unionName);
      }
      if (leaderId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(leaderId);
      }
      if (leaderName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(leaderName);
      }
      if (leaderServerId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(leaderServerId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (unionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(unionId);
      }
      if (unionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(unionName);
      }
      if (leaderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(leaderId);
      }
      if (leaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(leaderName);
      }
      if (leaderServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(leaderServerId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            unionId = input.ReadInt64();
            break;
          }
          case 18: {
            unionName = input.ReadString();
            break;
          }
          case 24: {
            leaderId = input.ReadInt64();
            break;
          }
          case 34: {
            leaderName = input.ReadString();
            break;
          }
          case 40: {
            leaderServerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送帮会推送消息
  /// </summary>
  public sealed class pushMessage : pb::IMessage {
    private static readonly pb::MessageParser<pushMessage> _parser = new pb::MessageParser<pushMessage>(() => new pushMessage());
    public static pb::MessageParser<pushMessage> Parser { get { return _parser; } }

    private string message_ = "";
    /// <summary>
    ///要发送的消息
    /// </summary>
    public string message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class UnionRedPackageInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnionRedPackageInfo> _parser = new pb::MessageParser<UnionRedPackageInfo>(() => new UnionRedPackageInfo());
    public static pb::MessageParser<UnionRedPackageInfo> Parser { get { return _parser; } }

    private long id_;
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long roleId_;
    /// <summary>
    ///发红包的人的id
    /// </summary>
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    ///发红包的人的名字
    /// </summary>
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int totalWealth_;
    /// <summary>
    ///红包大小金额
    /// </summary>
    public int totalWealth {
      get { return totalWealth_; }
      set {
        totalWealth_ = value;
      }
    }

    private long time_;
    /// <summary>
    ///发送红包的时间
    /// </summary>
    public long time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private bool haveTaken_;
    /// <summary>
    ///是否领取
    /// </summary>
    public bool haveTaken {
      get { return haveTaken_; }
      set {
        haveTaken_ = value;
      }
    }

    private bool empty_;
    /// <summary>
    ///是否被领光
    /// </summary>
    public bool empty {
      get { return empty_; }
      set {
        empty_ = value;
      }
    }

    private int totalNum_;
    /// <summary>
    ///红包总个数
    /// </summary>
    public int totalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    private int drewNum_;
    /// <summary>
    ///红包已领个数
    /// </summary>
    public int drewNum {
      get { return drewNum_; }
      set {
        drewNum_ = value;
      }
    }

    private int career_;
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    private int sex_;
    public int sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
      if (roleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(roleId);
      }
      if (name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(name);
      }
      if (totalWealth != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(totalWealth);
      }
      if (time != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(time);
      }
      if (haveTaken != false) {
        output.WriteRawTag(56);
        output.WriteBool(haveTaken);
      }
      if (empty != false) {
        output.WriteRawTag(64);
        output.WriteBool(empty);
      }
      if (totalNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(totalNum);
      }
      if (drewNum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(drewNum);
      }
      if (career != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(career);
      }
      if (sex != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(sex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (totalWealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(totalWealth);
      }
      if (time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(time);
      }
      if (haveTaken != false) {
        size += 1 + 1;
      }
      if (empty != false) {
        size += 1 + 1;
      }
      if (totalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(totalNum);
      }
      if (drewNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(drewNum);
      }
      if (career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
          case 16: {
            roleId = input.ReadInt64();
            break;
          }
          case 26: {
            name = input.ReadString();
            break;
          }
          case 40: {
            totalWealth = input.ReadInt32();
            break;
          }
          case 48: {
            time = input.ReadInt64();
            break;
          }
          case 56: {
            haveTaken = input.ReadBool();
            break;
          }
          case 64: {
            empty = input.ReadBool();
            break;
          }
          case 72: {
            totalNum = input.ReadInt32();
            break;
          }
          case 80: {
            drewNum = input.ReadInt32();
            break;
          }
          case 88: {
            career = input.ReadInt32();
            break;
          }
          case 96: {
            sex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class UnionRedPackageDetailMemberInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnionRedPackageDetailMemberInfo> _parser = new pb::MessageParser<UnionRedPackageDetailMemberInfo>(() => new UnionRedPackageDetailMemberInfo());
    public static pb::MessageParser<UnionRedPackageDetailMemberInfo> Parser { get { return _parser; } }

    private long roleId_;
    /// <summary>
    ///发红包的人的id
    /// </summary>
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    ///发红包的人的名字
    /// </summary>
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long time_;
    /// <summary>
    ///抢红包时间
    /// </summary>
    public long time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private int wealth_;
    /// <summary>
    ///抢到的金额
    /// </summary>
    public int wealth {
      get { return wealth_; }
      set {
        wealth_ = value;
      }
    }

    private int career_;
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    private int sex_;
    public int sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (time != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(time);
      }
      if (wealth != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(wealth);
      }
      if (career != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(career);
      }
      if (sex != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(sex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(time);
      }
      if (wealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(wealth);
      }
      if (career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 32: {
            time = input.ReadInt64();
            break;
          }
          case 40: {
            wealth = input.ReadInt32();
            break;
          }
          case 48: {
            career = input.ReadInt32();
            break;
          }
          case 56: {
            sex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class UnionRedPackageDetailInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnionRedPackageDetailInfo> _parser = new pb::MessageParser<UnionRedPackageDetailInfo>(() => new UnionRedPackageDetailInfo());
    public static pb::MessageParser<UnionRedPackageDetailInfo> Parser { get { return _parser; } }

    private string senderName_ = "";
    /// <summary>
    ///发红包的人的名字
    /// </summary>
    public string senderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int wealth_;
    /// <summary>
    ///当前抢到的红包金额
    /// </summary>
    public int wealth {
      get { return wealth_; }
      set {
        wealth_ = value;
      }
    }

    private int curNumber_;
    /// <summary>
    ///当前已领红包数
    /// </summary>
    public int curNumber {
      get { return curNumber_; }
      set {
        curNumber_ = value;
      }
    }

    private int totalNumber_;
    /// <summary>
    ///最大红包数
    /// </summary>
    public int totalNumber {
      get { return totalNumber_; }
      set {
        totalNumber_ = value;
      }
    }

    private int curWealth_;
    /// <summary>
    ///当前已领红包金额
    /// </summary>
    public int curWealth {
      get { return curWealth_; }
      set {
        curWealth_ = value;
      }
    }

    private int totalWealth_;
    /// <summary>
    ///最大金额
    /// </summary>
    public int totalWealth {
      get { return totalWealth_; }
      set {
        totalWealth_ = value;
      }
    }

    private long sendTime_;
    /// <summary>
    ///发红包的时间
    /// </summary>
    public long sendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::union.UnionRedPackageDetailMemberInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(74, global::union.UnionRedPackageDetailMemberInfo.Parser);
    private readonly pbc::RepeatedField<global::union.UnionRedPackageDetailMemberInfo> infos_ = new pbc::RepeatedField<global::union.UnionRedPackageDetailMemberInfo>();
    /// <summary>
    ///领取红包成员
    /// </summary>
    public pbc::RepeatedField<global::union.UnionRedPackageDetailMemberInfo> infos {
      get { return infos_; }
    }

    private int career_;
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    private int sex_;
    public int sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (senderName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(senderName);
      }
      if (wealth != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(wealth);
      }
      if (curNumber != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(curNumber);
      }
      if (totalNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(totalNumber);
      }
      if (curWealth != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(curWealth);
      }
      if (totalWealth != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(totalWealth);
      }
      if (sendTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(sendTime);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
      if (career != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(career);
      }
      if (sex != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(sex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (senderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(senderName);
      }
      if (wealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(wealth);
      }
      if (curNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(curNumber);
      }
      if (totalNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(totalNumber);
      }
      if (curWealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(curWealth);
      }
      if (totalWealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(totalWealth);
      }
      if (sendTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(sendTime);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            senderName = input.ReadString();
            break;
          }
          case 24: {
            wealth = input.ReadInt32();
            break;
          }
          case 32: {
            curNumber = input.ReadInt32();
            break;
          }
          case 40: {
            totalNumber = input.ReadInt32();
            break;
          }
          case 48: {
            curWealth = input.ReadInt32();
            break;
          }
          case 56: {
            totalWealth = input.ReadInt32();
            break;
          }
          case 64: {
            sendTime = input.ReadInt64();
            break;
          }
          case 74: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 88: {
            career = input.ReadInt32();
            break;
          }
          case 96: {
            sex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class UnionBulletinAck : pb::IMessage {
    private static readonly pb::MessageParser<UnionBulletinAck> _parser = new pb::MessageParser<UnionBulletinAck>(() => new UnionBulletinAck());
    public static pb::MessageParser<UnionBulletinAck> Parser { get { return _parser; } }

    private bool isSucccess_;
    /// <summary>
    ///是否修改成功
    /// </summary>
    public bool isSucccess {
      get { return isSucccess_; }
      set {
        isSucccess_ = value;
      }
    }

    private int submitTimes_;
    /// <summary>
    ///已经修改公告的次数;
    /// </summary>
    public int submitTimes {
      get { return submitTimes_; }
      set {
        submitTimes_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (isSucccess != false) {
        output.WriteRawTag(8);
        output.WriteBool(isSucccess);
      }
      if (submitTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(submitTimes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (isSucccess != false) {
        size += 1 + 1;
      }
      if (submitTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(submitTimes);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            isSucccess = input.ReadBool();
            break;
          }
          case 16: {
            submitTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///弹劾结束响应
  /// </summary>
  public sealed class ImpeachmentEndNtf : pb::IMessage {
    private static readonly pb::MessageParser<ImpeachmentEndNtf> _parser = new pb::MessageParser<ImpeachmentEndNtf>(() => new ImpeachmentEndNtf());
    public static pb::MessageParser<ImpeachmentEndNtf> Parser { get { return _parser; } }

    private bool isSuccess_;
    public bool isSuccess {
      get { return isSuccess_; }
      set {
        isSuccess_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (isSuccess != false) {
        output.WriteRawTag(16);
        output.WriteBool(isSuccess);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (isSuccess != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            isSuccess = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///修炼属性: 位置，等级;
  /// </summary>
  public sealed class Improve : pb::IMessage {
    private static readonly pb::MessageParser<Improve> _parser = new pb::MessageParser<Improve>(() => new Improve());
    public static pb::MessageParser<Improve> Parser { get { return _parser; } }

    private int position_;
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    private int level_;
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(position);
      }
      if (level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(level);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            position = input.ReadInt32();
            break;
          }
          case 16: {
            level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///修炼请求
  /// </summary>
  public sealed class ImproveRequest : pb::IMessage {
    private static readonly pb::MessageParser<ImproveRequest> _parser = new pb::MessageParser<ImproveRequest>(() => new ImproveRequest());
    public static pb::MessageParser<ImproveRequest> Parser { get { return _parser; } }

    private int position_;
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(position);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///修炼响应
  /// </summary>
  public sealed class ImproveResponse : pb::IMessage {
    private static readonly pb::MessageParser<ImproveResponse> _parser = new pb::MessageParser<ImproveResponse>(() => new ImproveResponse());
    public static pb::MessageParser<ImproveResponse> Parser { get { return _parser; } }

    private global::union.Improve improve_;
    public global::union.Improve improve {
      get { return improve_; }
      set {
        improve_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (improve_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(improve);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (improve_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(improve);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (improve_ == null) {
              improve_ = new global::union.Improve();
            }
            input.ReadMessage(improve_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///所有修炼数据;
  /// </summary>
  public sealed class ImproveInfos : pb::IMessage {
    private static readonly pb::MessageParser<ImproveInfos> _parser = new pb::MessageParser<ImproveInfos>(() => new ImproveInfos());
    public static pb::MessageParser<ImproveInfos> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::union.Improve> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::union.Improve.Parser);
    private readonly pbc::RepeatedField<global::union.Improve> infos_ = new pbc::RepeatedField<global::union.Improve>();
    public pbc::RepeatedField<global::union.Improve> infos {
      get { return infos_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RemoveApplyUnion : pb::IMessage {
    private static readonly pb::MessageParser<RemoveApplyUnion> _parser = new pb::MessageParser<RemoveApplyUnion>(() => new RemoveApplyUnion());
    public static pb::MessageParser<RemoveApplyUnion> Parser { get { return _parser; } }

    private long unionId_;
    /// <summary>
    /// </summary>
    public long unionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (unionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(unionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (unionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(unionId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            unionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class YuanbaoItem : pb::IMessage {
    private static readonly pb::MessageParser<YuanbaoItem> _parser = new pb::MessageParser<YuanbaoItem>(() => new YuanbaoItem());
    public static pb::MessageParser<YuanbaoItem> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private int num_;
    public int num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(num);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(num);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 16: {
            num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///分配元宝
  /// </summary>
  public sealed class SplitYuanbaoRequest : pb::IMessage {
    private static readonly pb::MessageParser<SplitYuanbaoRequest> _parser = new pb::MessageParser<SplitYuanbaoRequest>(() => new SplitYuanbaoRequest());
    public static pb::MessageParser<SplitYuanbaoRequest> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::union.YuanbaoItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::union.YuanbaoItem.Parser);
    private readonly pbc::RepeatedField<global::union.YuanbaoItem> items_ = new pbc::RepeatedField<global::union.YuanbaoItem>();
    public pbc::RepeatedField<global::union.YuanbaoItem> items {
      get { return items_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SplitYuanbaoResponse : pb::IMessage {
    private static readonly pb::MessageParser<SplitYuanbaoResponse> _parser = new pb::MessageParser<SplitYuanbaoResponse>(() => new SplitYuanbaoResponse());
    public static pb::MessageParser<SplitYuanbaoResponse> Parser { get { return _parser; } }

    private int state_;
    /// <summary>
    /// 1分配成功，-1 有成员不是公会成员，-2数量不对，超过能分配的
    /// </summary>
    public int state {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    private long yuanbao_;
    /// <summary>
    ///元宝;
    /// </summary>
    public long yuanbao {
      get { return yuanbao_; }
      set {
        yuanbao_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (state != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(state);
      }
      if (yuanbao != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(yuanbao);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(state);
      }
      if (yuanbao != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(yuanbao);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state = input.ReadInt32();
            break;
          }
          case 16: {
            yuanbao = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新能否实时语音
  /// </summary>
  public sealed class UpdateCanSpeakMsg : pb::IMessage {
    private static readonly pb::MessageParser<UpdateCanSpeakMsg> _parser = new pb::MessageParser<UpdateCanSpeakMsg>(() => new UpdateCanSpeakMsg());
    public static pb::MessageParser<UpdateCanSpeakMsg> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<long> _repeated_roleIds_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> roleIds_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> roleIds {
      get { return roleIds_; }
    }

    private bool canSpeak_;
    public bool canSpeak {
      get { return canSpeak_; }
      set {
        canSpeak_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      roleIds_.WriteTo(output, _repeated_roleIds_codec);
      if (canSpeak != false) {
        output.WriteRawTag(16);
        output.WriteBool(canSpeak);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += roleIds_.CalculateSize(_repeated_roleIds_codec);
      if (canSpeak != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            roleIds_.AddEntriesFrom(input, _repeated_roleIds_codec);
            break;
          }
          case 16: {
            canSpeak = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///行会召集令信息
  /// </summary>
  public sealed class UnionCallInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnionCallInfo> _parser = new pb::MessageParser<UnionCallInfo>(() => new UnionCallInfo());
    public static pb::MessageParser<UnionCallInfo> Parser { get { return _parser; } }

    private string playerName_ = "";
    /// <summary>
    ///发起人姓名
    /// </summary>
    public string playerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int mapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    public int mapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    private int posx_;
    public int posx {
      get { return posx_; }
      set {
        posx_ = value;
      }
    }

    private int posy_;
    public int posy {
      get { return posy_; }
      set {
        posy_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (playerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(playerName);
      }
      if (mapId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(mapId);
      }
      if (posx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(posx);
      }
      if (posy != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(posy);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (playerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(playerName);
      }
      if (mapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mapId);
      }
      if (posx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(posx);
      }
      if (posy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(posy);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            playerName = input.ReadString();
            break;
          }
          case 16: {
            mapId = input.ReadInt32();
            break;
          }
          case 24: {
            posx = input.ReadInt32();
            break;
          }
          case 32: {
            posy = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
