// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Activity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace activity {

  #region Messages
  /// <summary>
  ///开服活动状态数据
  /// </summary>
  public sealed class ActivityOpenInfo : pb::IMessage {
    private static readonly pb::MessageParser<ActivityOpenInfo> _parser = new pb::MessageParser<ActivityOpenInfo>(() => new ActivityOpenInfo());
    public static pb::MessageParser<ActivityOpenInfo> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///活动id ;
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int open_;
    /// <summary>
    ///是否开启;
    /// </summary>
    public int open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    private long endtime_;
    /// <summary>
    ///结束时间;
    /// </summary>
    public long endtime {
      get { return endtime_; }
      set {
        endtime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (open != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(open);
      }
      if (endtime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(endtime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (open != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(open);
      }
      if (endtime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endtime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            open = input.ReadInt32();
            break;
          }
          case 32: {
            endtime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///开服活动状态数据 
  /// </summary>
  public sealed class SCSpecialActivityOpenInfo : pb::IMessage {
    private static readonly pb::MessageParser<SCSpecialActivityOpenInfo> _parser = new pb::MessageParser<SCSpecialActivityOpenInfo>(() => new SCSpecialActivityOpenInfo());
    public static pb::MessageParser<SCSpecialActivityOpenInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::activity.ActivityOpenInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::activity.ActivityOpenInfo.Parser);
    private readonly pbc::RepeatedField<global::activity.ActivityOpenInfo> infos_ = new pbc::RepeatedField<global::activity.ActivityOpenInfo>();
    public pbc::RepeatedField<global::activity.ActivityOpenInfo> infos {
      get { return infos_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///开服活动数据请求;
  /// </summary>
  public sealed class SpecialActivityDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<SpecialActivityDataRequest> _parser = new pb::MessageParser<SpecialActivityDataRequest>(() => new SpecialActivityDataRequest());
    public static pb::MessageParser<SpecialActivityDataRequest> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///活动id ;
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ReqSpecialActivityReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpecialActivityReward> _parser = new pb::MessageParser<ReqSpecialActivityReward>(() => new ReqSpecialActivityReward());
    public static pb::MessageParser<ReqSpecialActivityReward> Parser { get { return _parser; } }

    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    public int activityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    private int goalId_;
    /// <summary>
    ///目标id
    /// </summary>
    public int goalId {
      get { return goalId_; }
      set {
        goalId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (activityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(activityId);
      }
      if (goalId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(goalId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (activityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(activityId);
      }
      if (goalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(goalId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            activityId = input.ReadInt32();
            break;
          }
          case 16: {
            goalId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ActivityInfo : pb::IMessage {
    private static readonly pb::MessageParser<ActivityInfo> _parser = new pb::MessageParser<ActivityInfo>(() => new ActivityInfo());
    public static pb::MessageParser<ActivityInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::activity.ActivityData> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(10, global::activity.ActivityData.Parser);
    private readonly pbc::RepeatedField<global::activity.ActivityData> datas_ = new pbc::RepeatedField<global::activity.ActivityData>();
    /// <summary>
    ///活动列表
    /// </summary>
    public pbc::RepeatedField<global::activity.ActivityData> datas {
      get { return datas_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ActivityData : pb::IMessage {
    private static readonly pb::MessageParser<ActivityData> _parser = new pb::MessageParser<ActivityData>(() => new ActivityData());
    public static pb::MessageParser<ActivityData> Parser { get { return _parser; } }

    private int activityId_;
    /// <summary>
    ///活动ID
    /// </summary>
    public int activityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    private int count_;
    /// <summary>
    ///当前进度
    /// </summary>
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private int reward_;
    /// <summary>
    ///1已领奖，0未领奖
    /// </summary>
    public int reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    private int bonusCount_;
    /// <summary>
    ///活跃度次数
    /// </summary>
    public int bonusCount {
      get { return bonusCount_; }
      set {
        bonusCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (activityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(activityId);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
      if (reward != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(reward);
      }
      if (bonusCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(bonusCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (activityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(activityId);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(reward);
      }
      if (bonusCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bonusCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            activityId = input.ReadInt32();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
          case 24: {
            reward = input.ReadInt32();
            break;
          }
          case 32: {
            bonusCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ReqActivityReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqActivityReward> _parser = new pb::MessageParser<ReqActivityReward>(() => new ReqActivityReward());
    public static pb::MessageParser<ReqActivityReward> Parser { get { return _parser; } }

    private int activityId_;
    public int activityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (activityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(activityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (activityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(activityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            activityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ReqSpecialActivityEquipCollection : pb::IMessage {
    private static readonly pb::MessageParser<ReqSpecialActivityEquipCollection> _parser = new pb::MessageParser<ReqSpecialActivityEquipCollection>(() => new ReqSpecialActivityEquipCollection());
    public static pb::MessageParser<ReqSpecialActivityEquipCollection> Parser { get { return _parser; } }

    private int activityId_;
    /// <summary>
    ///活动ID
    /// </summary>
    public int activityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (activityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(activityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (activityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(activityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            activityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CollectActivityData : pb::IMessage {
    private static readonly pb::MessageParser<CollectActivityData> _parser = new pb::MessageParser<CollectActivityData>(() => new CollectActivityData());
    public static pb::MessageParser<CollectActivityData> Parser { get { return _parser; } }

    private int goalId_;
    /// <summary>
    ///表头id
    /// </summary>
    public int goalId {
      get { return goalId_; }
      set {
        goalId_ = value;
      }
    }

    private int count_;
    /// <summary>
    ///当前进度
    /// </summary>
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private bool reward_;
    /// <summary>
    ///false未领奖,true已领奖
    /// </summary>
    public bool reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (goalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(goalId);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
      if (reward != false) {
        output.WriteRawTag(24);
        output.WriteBool(reward);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (goalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(goalId);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (reward != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            goalId = input.ReadInt32();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
          case 24: {
            reward = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CollectActivityDatas : pb::IMessage {
    private static readonly pb::MessageParser<CollectActivityDatas> _parser = new pb::MessageParser<CollectActivityDatas>(() => new CollectActivityDatas());
    public static pb::MessageParser<CollectActivityDatas> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::activity.CollectActivityData> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::activity.CollectActivityData.Parser);
    private readonly pbc::RepeatedField<global::activity.CollectActivityData> item_ = new pbc::RepeatedField<global::activity.CollectActivityData>();
    /// <summary>
    ///装备收集的每档列表
    /// </summary>
    public pbc::RepeatedField<global::activity.CollectActivityData> item {
      get { return item_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ReqCollectReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqCollectReward> _parser = new pb::MessageParser<ReqCollectReward>(() => new ReqCollectReward());
    public static pb::MessageParser<ReqCollectReward> Parser { get { return _parser; } }

    private int goal_;
    /// <summary>
    ///目标
    /// </summary>
    public int goal {
      get { return goal_; }
      set {
        goal_ = value;
      }
    }

    private int activityId_;
    /// <summary>
    ///活动ID
    /// </summary>
    public int activityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (goal != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(goal);
      }
      if (activityId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(activityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (goal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(goal);
      }
      if (activityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(activityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            goal = input.ReadInt32();
            break;
          }
          case 16: {
            activityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ReqActiveReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqActiveReward> _parser = new pb::MessageParser<ReqActiveReward>(() => new ReqActiveReward());
    public static pb::MessageParser<ReqActiveReward> Parser { get { return _parser; } }

    private int configId_;
    /// <summary>
    /// 活跃度奖励表配置id
    /// </summary>
    public int configId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (configId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(configId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (configId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(configId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            configId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ResActiveReward : pb::IMessage {
    private static readonly pb::MessageParser<ResActiveReward> _parser = new pb::MessageParser<ResActiveReward>(() => new ResActiveReward());
    public static pb::MessageParser<ResActiveReward> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_rewards_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> rewards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已领取过的活跃度奖励
    /// </summary>
    public pbc::RepeatedField<int> rewards {
      get { return rewards_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ResActive : pb::IMessage {
    private static readonly pb::MessageParser<ResActive> _parser = new pb::MessageParser<ResActive>(() => new ResActive());
    public static pb::MessageParser<ResActive> Parser { get { return _parser; } }

    private int active_;
    /// <summary>
    /// 活跃度
    /// </summary>
    public int active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (active != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(active);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (active != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(active);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            active = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ResFengYinData : pb::IMessage {
    private static readonly pb::MessageParser<ResFengYinData> _parser = new pb::MessageParser<ResFengYinData>(() => new ResFengYinData());
    public static pb::MessageParser<ResFengYinData> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<string> _repeated_datas_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> datas_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 数据
    /// </summary>
    public pbc::RepeatedField<string> datas {
      get { return datas_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SpecialActivityData : pb::IMessage {
    private static readonly pb::MessageParser<SpecialActivityData> _parser = new pb::MessageParser<SpecialActivityData>(() => new SpecialActivityData());
    public static pb::MessageParser<SpecialActivityData> Parser { get { return _parser; } }

    private int activityId_;
    /// <summary>
    /// 活动ID
    /// </summary>
    public int activityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    private int maxScore_;
    /// <summary>
    /// 该活动最大数据记录
    /// </summary>
    public int maxScore {
      get { return maxScore_; }
      set {
        maxScore_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_finishGoals_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> finishGoals_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 完成的目标
    /// </summary>
    public pbc::RepeatedField<int> finishGoals {
      get { return finishGoals_; }
    }

    private static readonly pb::FieldCodec<int> _repeated_rewardGoals_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> rewardGoals_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 领取的目标
    /// </summary>
    public pbc::RepeatedField<int> rewardGoals {
      get { return rewardGoals_; }
    }

    private long endTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (activityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(activityId);
      }
      if (maxScore != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(maxScore);
      }
      finishGoals_.WriteTo(output, _repeated_finishGoals_codec);
      rewardGoals_.WriteTo(output, _repeated_rewardGoals_codec);
      if (endTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(endTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (activityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(activityId);
      }
      if (maxScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxScore);
      }
      size += finishGoals_.CalculateSize(_repeated_finishGoals_codec);
      size += rewardGoals_.CalculateSize(_repeated_rewardGoals_codec);
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            activityId = input.ReadInt32();
            break;
          }
          case 16: {
            maxScore = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            finishGoals_.AddEntriesFrom(input, _repeated_finishGoals_codec);
            break;
          }
          case 34:
          case 32: {
            rewardGoals_.AddEntriesFrom(input, _repeated_rewardGoals_codec);
            break;
          }
          case 40: {
            endTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取boss首杀信息，请求
  /// </summary>
  public sealed class BossFirstKillInfoRequest : pb::IMessage {
    private static readonly pb::MessageParser<BossFirstKillInfoRequest> _parser = new pb::MessageParser<BossFirstKillInfoRequest>(() => new BossFirstKillInfoRequest());
    public static pb::MessageParser<BossFirstKillInfoRequest> Parser { get { return _parser; } }

    private int activityId_;
    /// <summary>
    ///活动ID
    /// </summary>
    public int activityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (activityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(activityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (activityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(activityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            activityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取boss首杀的奖励
  /// </summary>
  public sealed class BossFirstKillRewardRequest : pb::IMessage {
    private static readonly pb::MessageParser<BossFirstKillRewardRequest> _parser = new pb::MessageParser<BossFirstKillRewardRequest>(() => new BossFirstKillRewardRequest());
    public static pb::MessageParser<BossFirstKillRewardRequest> Parser { get { return _parser; } }

    private int goal_;
    /// <summary>
    ///目标
    /// </summary>
    public int goal {
      get { return goal_; }
      set {
        goal_ = value;
      }
    }

    private int activityId_;
    /// <summary>
    ///活动ID
    /// </summary>
    public int activityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    private int type_;
    /// <summary>
    ///1:全服奖励 2:个人奖励
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (goal != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(goal);
      }
      if (activityId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(activityId);
      }
      if (type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (goal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(goal);
      }
      if (activityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(activityId);
      }
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            goal = input.ReadInt32();
            break;
          }
          case 16: {
            activityId = input.ReadInt32();
            break;
          }
          case 24: {
            type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取boss首杀信息，响应
  /// </summary>
  public sealed class BossFirstKillDatasResponse : pb::IMessage {
    private static readonly pb::MessageParser<BossFirstKillDatasResponse> _parser = new pb::MessageParser<BossFirstKillDatasResponse>(() => new BossFirstKillDatasResponse());
    public static pb::MessageParser<BossFirstKillDatasResponse> Parser { get { return _parser; } }

    private long time_;
    /// <summary>
    ///剩余时间
    /// </summary>
    public long time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::activity.BossFirstKillData> _repeated_bossFirstKillData_codec
        = pb::FieldCodec.ForMessage(18, global::activity.BossFirstKillData.Parser);
    private readonly pbc::RepeatedField<global::activity.BossFirstKillData> bossFirstKillData_ = new pbc::RepeatedField<global::activity.BossFirstKillData>();
    public pbc::RepeatedField<global::activity.BossFirstKillData> bossFirstKillData {
      get { return bossFirstKillData_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(time);
      }
      bossFirstKillData_.WriteTo(output, _repeated_bossFirstKillData_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(time);
      }
      size += bossFirstKillData_.CalculateSize(_repeated_bossFirstKillData_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            time = input.ReadInt64();
            break;
          }
          case 18: {
            bossFirstKillData_.AddEntriesFrom(input, _repeated_bossFirstKillData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class BossFirstKillData : pb::IMessage {
    private static readonly pb::MessageParser<BossFirstKillData> _parser = new pb::MessageParser<BossFirstKillData>(() => new BossFirstKillData());
    public static pb::MessageParser<BossFirstKillData> Parser { get { return _parser; } }

    private string killName_ = "";
    /// <summary>
    ///全服首杀 用户姓名
    /// </summary>
    public string killName {
      get { return killName_; }
      set {
        killName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int service_;
    /// <summary>
    ///全服首杀状态码 0：前往 1：可领 2：已领取 3：不可领
    /// </summary>
    public int service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    private int personal_;
    /// <summary>
    ///个人首杀状态码 0：前往 1：可领 2：已领取 3：不可领
    /// </summary>
    public int personal {
      get { return personal_; }
      set {
        personal_ = value;
      }
    }

    private int serviceId_;
    /// <summary>
    ///全服表头id
    /// </summary>
    public int serviceId {
      get { return serviceId_; }
      set {
        serviceId_ = value;
      }
    }

    private int personalId_;
    /// <summary>
    ///个人表头id
    /// </summary>
    public int personalId {
      get { return personalId_; }
      set {
        personalId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (killName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(killName);
      }
      if (service != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(service);
      }
      if (personal != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(personal);
      }
      if (serviceId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(serviceId);
      }
      if (personalId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(personalId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (killName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(killName);
      }
      if (service != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(service);
      }
      if (personal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(personal);
      }
      if (serviceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(serviceId);
      }
      if (personalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(personalId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            killName = input.ReadString();
            break;
          }
          case 16: {
            service = input.ReadInt32();
            break;
          }
          case 24: {
            personal = input.ReadInt32();
            break;
          }
          case 32: {
            serviceId = input.ReadInt32();
            break;
          }
          case 40: {
            personalId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///卧龙悬赏、普通悬赏，响应
  /// </summary>
  public sealed class ResEquipXuanShang : pb::IMessage {
    private static readonly pb::MessageParser<ResEquipXuanShang> _parser = new pb::MessageParser<ResEquipXuanShang>(() => new ResEquipXuanShang());
    public static pb::MessageParser<ResEquipXuanShang> Parser { get { return _parser; } }

    private int activityId_;
    /// <summary>
    /// 目前之前只有两个 10105:卧龙悬赏 10124:普通悬赏
    /// </summary>
    public int activityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    private int type_;
    /// <summary>
    /// 1:主界面获取信息 2:更新的信息
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::activity.EquipXuanShangData> _repeated_equipXuanShangData_codec
        = pb::FieldCodec.ForMessage(26, global::activity.EquipXuanShangData.Parser);
    private readonly pbc::RepeatedField<global::activity.EquipXuanShangData> equipXuanShangData_ = new pbc::RepeatedField<global::activity.EquipXuanShangData>();
    public pbc::RepeatedField<global::activity.EquipXuanShangData> equipXuanShangData {
      get { return equipXuanShangData_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (activityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(activityId);
      }
      if (type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(type);
      }
      equipXuanShangData_.WriteTo(output, _repeated_equipXuanShangData_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (activityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(activityId);
      }
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      size += equipXuanShangData_.CalculateSize(_repeated_equipXuanShangData_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            activityId = input.ReadInt32();
            break;
          }
          case 16: {
            type = input.ReadInt32();
            break;
          }
          case 26: {
            equipXuanShangData_.AddEntriesFrom(input, _repeated_equipXuanShangData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class EquipXuanShangData : pb::IMessage {
    private static readonly pb::MessageParser<EquipXuanShangData> _parser = new pb::MessageParser<EquipXuanShangData>(() => new EquipXuanShangData());
    public static pb::MessageParser<EquipXuanShangData> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    /// 表头id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int goalId_;
    /// <summary>
    /// 区分全服还是个人 1:全服 2:个人
    /// </summary>
    public int goalId {
      get { return goalId_; }
      set {
        goalId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    ///第一位获取该装备的用户名字
    /// </summary>
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int xuanShangType_;
    /// <summary>
    ///0:虚位以待 1:可领取 2:已领取 3:不可领
    /// </summary>
    public int xuanShangType {
      get { return xuanShangType_; }
      set {
        xuanShangType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (goalId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(goalId);
      }
      if (name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(name);
      }
      if (xuanShangType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(xuanShangType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (goalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(goalId);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (xuanShangType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(xuanShangType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            goalId = input.ReadInt32();
            break;
          }
          case 26: {
            name = input.ReadString();
            break;
          }
          case 32: {
            xuanShangType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GoalDatas : pb::IMessage {
    private static readonly pb::MessageParser<GoalDatas> _parser = new pb::MessageParser<GoalDatas>(() => new GoalDatas());
    public static pb::MessageParser<GoalDatas> Parser { get { return _parser; } }

    private int configId_;
    /// <summary>
    /// 参数
    /// </summary>
    public int configId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    private int value_;
    /// <summary>
    /// 数值
    /// </summary>
    public int value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    private int reward_;
    /// <summary>
    /// 1表示已领取
    /// </summary>
    public int reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (configId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(configId);
      }
      if (value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(value);
      }
      if (reward != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(reward);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (configId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(configId);
      }
      if (value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(value);
      }
      if (reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(reward);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            configId = input.ReadInt32();
            break;
          }
          case 16: {
            value = input.ReadInt32();
            break;
          }
          case 24: {
            reward = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SevenDayData : pb::IMessage {
    private static readonly pb::MessageParser<SevenDayData> _parser = new pb::MessageParser<SevenDayData>(() => new SevenDayData());
    public static pb::MessageParser<SevenDayData> Parser { get { return _parser; } }

    private int score_;
    /// <summary>
    /// 试炼积分
    /// </summary>
    public int score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_scoreRewards_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> scoreRewards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 领取过的积分奖励
    /// </summary>
    public pbc::RepeatedField<int> scoreRewards {
      get { return scoreRewards_; }
    }

    private static readonly pb::FieldCodec<global::activity.GoalDatas> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(26, global::activity.GoalDatas.Parser);
    private readonly pbc::RepeatedField<global::activity.GoalDatas> datas_ = new pbc::RepeatedField<global::activity.GoalDatas>();
    public pbc::RepeatedField<global::activity.GoalDatas> datas {
      get { return datas_; }
    }

    private long openTime_;
    /// <summary>
    /// 开启时间
    /// </summary>
    public long openTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(score);
      }
      scoreRewards_.WriteTo(output, _repeated_scoreRewards_codec);
      datas_.WriteTo(output, _repeated_datas_codec);
      if (openTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(openTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(score);
      }
      size += scoreRewards_.CalculateSize(_repeated_scoreRewards_codec);
      size += datas_.CalculateSize(_repeated_datas_codec);
      if (openTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(openTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            score = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            scoreRewards_.AddEntriesFrom(input, _repeated_scoreRewards_codec);
            break;
          }
          case 26: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
          case 32: {
            openTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class EquipCompetition : pb::IMessage {
    private static readonly pb::MessageParser<EquipCompetition> _parser = new pb::MessageParser<EquipCompetition>(() => new EquipCompetition());
    public static pb::MessageParser<EquipCompetition> Parser { get { return _parser; } }

    private int curGroup_;
    /// <summary>
    /// 当前组
    /// </summary>
    public int curGroup {
      get { return curGroup_; }
      set {
        curGroup_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_groupRewards_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> groupRewards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 领取过的级别奖励
    /// </summary>
    public pbc::RepeatedField<int> groupRewards {
      get { return groupRewards_; }
    }

    private static readonly pb::FieldCodec<global::activity.GoalDatas> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(26, global::activity.GoalDatas.Parser);
    private readonly pbc::RepeatedField<global::activity.GoalDatas> datas_ = new pbc::RepeatedField<global::activity.GoalDatas>();
    public pbc::RepeatedField<global::activity.GoalDatas> datas {
      get { return datas_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (curGroup != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(curGroup);
      }
      groupRewards_.WriteTo(output, _repeated_groupRewards_codec);
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (curGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(curGroup);
      }
      size += groupRewards_.CalculateSize(_repeated_groupRewards_codec);
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            curGroup = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            groupRewards_.AddEntriesFrom(input, _repeated_groupRewards_codec);
            break;
          }
          case 26: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///boss狂欢，响应
  /// </summary>
  public sealed class ResBossKuangHuan : pb::IMessage {
    private static readonly pb::MessageParser<ResBossKuangHuan> _parser = new pb::MessageParser<ResBossKuangHuan>(() => new ResBossKuangHuan());
    public static pb::MessageParser<ResBossKuangHuan> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::activity.BossKuangHuanData> _repeated_bossKuangHuanData_codec
        = pb::FieldCodec.ForMessage(10, global::activity.BossKuangHuanData.Parser);
    private readonly pbc::RepeatedField<global::activity.BossKuangHuanData> bossKuangHuanData_ = new pbc::RepeatedField<global::activity.BossKuangHuanData>();
    public pbc::RepeatedField<global::activity.BossKuangHuanData> bossKuangHuanData {
      get { return bossKuangHuanData_; }
    }

    private int integralTicketNum_;
    /// <summary>
    ///积分券数量
    /// </summary>
    public int integralTicketNum {
      get { return integralTicketNum_; }
      set {
        integralTicketNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bossKuangHuanData_.WriteTo(output, _repeated_bossKuangHuanData_codec);
      if (integralTicketNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(integralTicketNum);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += bossKuangHuanData_.CalculateSize(_repeated_bossKuangHuanData_codec);
      if (integralTicketNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(integralTicketNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bossKuangHuanData_.AddEntriesFrom(input, _repeated_bossKuangHuanData_codec);
            break;
          }
          case 16: {
            integralTicketNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BossKuangHuanData : pb::IMessage {
    private static readonly pb::MessageParser<BossKuangHuanData> _parser = new pb::MessageParser<BossKuangHuanData>(() => new BossKuangHuanData());
    public static pb::MessageParser<BossKuangHuanData> Parser { get { return _parser; } }

    private int goalId_;
    /// <summary>
    ///表头id
    /// </summary>
    public int goalId {
      get { return goalId_; }
      set {
        goalId_ = value;
      }
    }

    private int stockNum_;
    /// <summary>
    ///库存数量
    /// </summary>
    public int stockNum {
      get { return stockNum_; }
      set {
        stockNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (goalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(goalId);
      }
      if (stockNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(stockNum);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (goalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(goalId);
      }
      if (stockNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(stockNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            goalId = input.ReadInt32();
            break;
          }
          case 16: {
            stockNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///屠魔活动，响应
  /// </summary>
  public sealed class ResKillDemon : pb::IMessage {
    private static readonly pb::MessageParser<ResKillDemon> _parser = new pb::MessageParser<ResKillDemon>(() => new ResKillDemon());
    public static pb::MessageParser<ResKillDemon> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::activity.KillDemonData> _repeated_killDemonData_codec
        = pb::FieldCodec.ForMessage(10, global::activity.KillDemonData.Parser);
    private readonly pbc::RepeatedField<global::activity.KillDemonData> killDemonData_ = new pbc::RepeatedField<global::activity.KillDemonData>();
    public pbc::RepeatedField<global::activity.KillDemonData> killDemonData {
      get { return killDemonData_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      killDemonData_.WriteTo(output, _repeated_killDemonData_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += killDemonData_.CalculateSize(_repeated_killDemonData_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            killDemonData_.AddEntriesFrom(input, _repeated_killDemonData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class KillDemonData : pb::IMessage {
    private static readonly pb::MessageParser<KillDemonData> _parser = new pb::MessageParser<KillDemonData>(() => new KillDemonData());
    public static pb::MessageParser<KillDemonData> Parser { get { return _parser; } }

    private int goalId_;
    /// <summary>
    ///表头id
    /// </summary>
    public int goalId {
      get { return goalId_; }
      set {
        goalId_ = value;
      }
    }

    private int count_;
    /// <summary>
    ///当前进度S
    /// </summary>
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private bool reward_;
    /// <summary>
    ///false未领奖,true已领奖
    /// </summary>
    public bool reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (goalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(goalId);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
      if (reward != false) {
        output.WriteRawTag(24);
        output.WriteBool(reward);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (goalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(goalId);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (reward != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            goalId = input.ReadInt32();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
          case 24: {
            reward = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class ReqSevenDayReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqSevenDayReward> _parser = new pb::MessageParser<ReqSevenDayReward>(() => new ReqSevenDayReward());
    public static pb::MessageParser<ReqSevenDayReward> Parser { get { return _parser; } }

    private int configId_;
    /// <summary>
    ///NewbieActivit ID
    /// </summary>
    public int configId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    private int scheduleId_;
    /// <summary>
    ///NewbieActivitySchedule ID
    /// </summary>
    public int scheduleId {
      get { return scheduleId_; }
      set {
        scheduleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (configId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(configId);
      }
      if (scheduleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(scheduleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (configId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(configId);
      }
      if (scheduleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(scheduleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            configId = input.ReadInt32();
            break;
          }
          case 16: {
            scheduleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ReqEquipCompetitionReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqEquipCompetitionReward> _parser = new pb::MessageParser<ReqEquipCompetitionReward>(() => new ReqEquipCompetitionReward());
    public static pb::MessageParser<ReqEquipCompetitionReward> Parser { get { return _parser; } }

    private int configId_;
    /// <summary>
    ///ArmsRaceTask ID
    /// </summary>
    public int configId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    private int packId_;
    /// <summary>
    ///Pack ID
    /// </summary>
    public int packId {
      get { return packId_; }
      set {
        packId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (configId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(configId);
      }
      if (packId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(packId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (configId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(configId);
      }
      if (packId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(packId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            configId = input.ReadInt32();
            break;
          }
          case 16: {
            packId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///boss狂欢兑换请求
  /// </summary>
  public sealed class ReqKuangHuanReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqKuangHuanReward> _parser = new pb::MessageParser<ReqKuangHuanReward>(() => new ReqKuangHuanReward());
    public static pb::MessageParser<ReqKuangHuanReward> Parser { get { return _parser; } }

    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    public int activityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    private int goalId_;
    /// <summary>
    ///目标id
    /// </summary>
    public int goalId {
      get { return goalId_; }
      set {
        goalId_ = value;
      }
    }

    private int num_;
    /// <summary>
    ///兑换次数
    /// </summary>
    public int num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (activityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(activityId);
      }
      if (goalId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(goalId);
      }
      if (num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(num);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (activityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(activityId);
      }
      if (goalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(goalId);
      }
      if (num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(num);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            activityId = input.ReadInt32();
            break;
          }
          case 16: {
            goalId = input.ReadInt32();
            break;
          }
          case 24: {
            num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 七日登录，响应
  /// </summary>
  public sealed class ResSevenLogin : pb::IMessage {
    private static readonly pb::MessageParser<ResSevenLogin> _parser = new pb::MessageParser<ResSevenLogin>(() => new ResSevenLogin());
    public static pb::MessageParser<ResSevenLogin> Parser { get { return _parser; } }

    private int openDay_;
    /// <summary>
    /// 当前开服天数
    /// </summary>
    public int openDay {
      get { return openDay_; }
      set {
        openDay_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::activity.SevenLoginInfo> _repeated_sevenLoginInfo_codec
        = pb::FieldCodec.ForMessage(18, global::activity.SevenLoginInfo.Parser);
    private readonly pbc::RepeatedField<global::activity.SevenLoginInfo> sevenLoginInfo_ = new pbc::RepeatedField<global::activity.SevenLoginInfo>();
    public pbc::RepeatedField<global::activity.SevenLoginInfo> sevenLoginInfo {
      get { return sevenLoginInfo_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (openDay != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(openDay);
      }
      sevenLoginInfo_.WriteTo(output, _repeated_sevenLoginInfo_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (openDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(openDay);
      }
      size += sevenLoginInfo_.CalculateSize(_repeated_sevenLoginInfo_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            openDay = input.ReadInt32();
            break;
          }
          case 18: {
            sevenLoginInfo_.AddEntriesFrom(input, _repeated_sevenLoginInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SevenLoginInfo : pb::IMessage {
    private static readonly pb::MessageParser<SevenLoginInfo> _parser = new pb::MessageParser<SevenLoginInfo>(() => new SevenLoginInfo());
    public static pb::MessageParser<SevenLoginInfo> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    /// 表头id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int rewardType_;
    /// <summary>
    /// 0:未达标 1:可领 2:已领
    /// </summary>
    public int rewardType {
      get { return rewardType_; }
      set {
        rewardType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (rewardType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(rewardType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (rewardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(rewardType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            rewardType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
