// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wing.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace wing {

  #region Messages
  /// <summary>
  ///翅膀信息
  /// </summary>
  public sealed class WingInfo : pb::IMessage {
    private static readonly pb::MessageParser<WingInfo> _parser = new pb::MessageParser<WingInfo>(() => new WingInfo());
    public static pb::MessageParser<WingInfo> Parser { get { return _parser; } }

    private int wingId_;
    /// <summary>
    ///翅膀索引ID
    /// </summary>
    public int wingId {
      get { return wingId_; }
      set {
        wingId_ = value;
      }
    }

    private int curExp_;
    /// <summary>
    ///当前经验进度
    /// </summary>
    public int curExp {
      get { return curExp_; }
      set {
        curExp_ = value;
      }
    }

    private int wingColorId_;
    /// <summary>
    ///幻彩的
    /// </summary>
    public int wingColorId {
      get { return wingColorId_; }
      set {
        wingColorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (wingId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(wingId);
      }
      if (curExp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(curExp);
      }
      if (wingColorId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(wingColorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (wingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(wingId);
      }
      if (curExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(curExp);
      }
      if (wingColorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(wingColorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            wingId = input.ReadInt32();
            break;
          }
          case 16: {
            curExp = input.ReadInt32();
            break;
          }
          case 24: {
            wingColorId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///幻彩道具信息
  /// </summary>
  public sealed class WingColorInfo : pb::IMessage {
    private static readonly pb::MessageParser<WingColorInfo> _parser = new pb::MessageParser<WingColorInfo>(() => new WingColorInfo());
    public static pb::MessageParser<WingColorInfo> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///幻彩道具id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long endTime_;
    /// <summary>
    ///到期时间  -1为永久 0为到期需要移除
    /// </summary>
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (endTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(endTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            endTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回给客户端的翅膀信息
  /// </summary>
  public sealed class WingInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<WingInfoResponse> _parser = new pb::MessageParser<WingInfoResponse>(() => new WingInfoResponse());
    public static pb::MessageParser<WingInfoResponse> Parser { get { return _parser; } }

    private global::wing.WingInfo wingInfo_;
    /// <summary>
    ///翅膀信息
    /// </summary>
    public global::wing.WingInfo wingInfo {
      get { return wingInfo_; }
      set {
        wingInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::wing.WingColorInfo> _repeated_wingColorInfos_codec
        = pb::FieldCodec.ForMessage(18, global::wing.WingColorInfo.Parser);
    private readonly pbc::RepeatedField<global::wing.WingColorInfo> wingColorInfos_ = new pbc::RepeatedField<global::wing.WingColorInfo>();
    /// <summary>
    ///已激活的幻彩道具
    /// </summary>
    public pbc::RepeatedField<global::wing.WingColorInfo> wingColorInfos {
      get { return wingColorInfos_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (wingInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(wingInfo);
      }
      wingColorInfos_.WriteTo(output, _repeated_wingColorInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (wingInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(wingInfo);
      }
      size += wingColorInfos_.CalculateSize(_repeated_wingColorInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (wingInfo_ == null) {
              wingInfo_ = new global::wing.WingInfo();
            }
            input.ReadMessage(wingInfo_);
            break;
          }
          case 18: {
            wingColorInfos_.AddEntriesFrom(input, _repeated_wingColorInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///幻彩道具变更
  /// </summary>
  public sealed class WingColorChange : pb::IMessage {
    private static readonly pb::MessageParser<WingColorChange> _parser = new pb::MessageParser<WingColorChange>(() => new WingColorChange());
    public static pb::MessageParser<WingColorChange> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::wing.WingColorInfo> _repeated_wingColorInfos_codec
        = pb::FieldCodec.ForMessage(10, global::wing.WingColorInfo.Parser);
    private readonly pbc::RepeatedField<global::wing.WingColorInfo> wingColorInfos_ = new pbc::RepeatedField<global::wing.WingColorInfo>();
    /// <summary>
    /// </summary>
    public pbc::RepeatedField<global::wing.WingColorInfo> wingColorInfos {
      get { return wingColorInfos_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      wingColorInfos_.WriteTo(output, _repeated_wingColorInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += wingColorInfos_.CalculateSize(_repeated_wingColorInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            wingColorInfos_.AddEntriesFrom(input, _repeated_wingColorInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///穿戴幻彩道具请求
  /// </summary>
  public sealed class DressColorWingRequest : pb::IMessage {
    private static readonly pb::MessageParser<DressColorWingRequest> _parser = new pb::MessageParser<DressColorWingRequest>(() => new DressColorWingRequest());
    public static pb::MessageParser<DressColorWingRequest> Parser { get { return _parser; } }

    private int itemId_;
    /// <summary>
    ///幻彩翅膀id
    /// </summary>
    public int itemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int type_;
    /// <summary>
    ///1为穿戴  2为脱下
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (itemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(itemId);
      }
      if (type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (itemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(itemId);
      }
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemId = input.ReadInt32();
            break;
          }
          case 16: {
            type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///穿戴幻彩道具返回
  /// </summary>
  public sealed class DressColorWingResponse : pb::IMessage {
    private static readonly pb::MessageParser<DressColorWingResponse> _parser = new pb::MessageParser<DressColorWingResponse>(() => new DressColorWingResponse());
    public static pb::MessageParser<DressColorWingResponse> Parser { get { return _parser; } }

    private int itemId_;
    /// <summary>
    ///幻彩翅膀id
    /// </summary>
    public int itemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int type_;
    /// <summary>
    ///1为穿戴  2为脱下
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (itemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(itemId);
      }
      if (type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (itemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(itemId);
      }
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemId = input.ReadInt32();
            break;
          }
          case 16: {
            type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///翅膀升星返回
  /// </summary>
  public sealed class WingUpStarResponse : pb::IMessage {
    private static readonly pb::MessageParser<WingUpStarResponse> _parser = new pb::MessageParser<WingUpStarResponse>(() => new WingUpStarResponse());
    public static pb::MessageParser<WingUpStarResponse> Parser { get { return _parser; } }

    private global::wing.WingInfo wingInfo_;
    /// <summary>
    ///翅膀信息
    /// </summary>
    public global::wing.WingInfo wingInfo {
      get { return wingInfo_; }
      set {
        wingInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (wingInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(wingInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (wingInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(wingInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (wingInfo_ == null) {
              wingInfo_ = new global::wing.WingInfo();
            }
            input.ReadMessage(wingInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///翅膀进阶返回
  /// </summary>
  public sealed class WingAdvanceResponse : pb::IMessage {
    private static readonly pb::MessageParser<WingAdvanceResponse> _parser = new pb::MessageParser<WingAdvanceResponse>(() => new WingAdvanceResponse());
    public static pb::MessageParser<WingAdvanceResponse> Parser { get { return _parser; } }

    private global::wing.WingInfo wingInfo_;
    /// <summary>
    ///翅膀信息
    /// </summary>
    public global::wing.WingInfo wingInfo {
      get { return wingInfo_; }
      set {
        wingInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (wingInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(wingInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (wingInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(wingInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (wingInfo_ == null) {
              wingInfo_ = new global::wing.WingInfo();
            }
            input.ReadMessage(wingInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///翅膀经验丹使用返回
  /// </summary>
  public sealed class WingExpItemUseResponse : pb::IMessage {
    private static readonly pb::MessageParser<WingExpItemUseResponse> _parser = new pb::MessageParser<WingExpItemUseResponse>(() => new WingExpItemUseResponse());
    public static pb::MessageParser<WingExpItemUseResponse> Parser { get { return _parser; } }

    private global::wing.WingInfo wingInfo_;
    /// <summary>
    ///翅膀信息
    /// </summary>
    public global::wing.WingInfo wingInfo {
      get { return wingInfo_; }
      set {
        wingInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (wingInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(wingInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (wingInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(wingInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (wingInfo_ == null) {
              wingInfo_ = new global::wing.WingInfo();
            }
            input.ReadMessage(wingInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///翅膀升星
  /// </summary>
  public sealed class WingUpStarRequest : pb::IMessage {
    private static readonly pb::MessageParser<WingUpStarRequest> _parser = new pb::MessageParser<WingUpStarRequest>(() => new WingUpStarRequest());
    public static pb::MessageParser<WingUpStarRequest> Parser { get { return _parser; } }

    private int times_;
    /// <summary>
    ///屯经验次数
    /// </summary>
    public int times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (times != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(times);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(times);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            times = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 羽灵信息，响应
  /// </summary>
  public sealed class ResYuLingInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResYuLingInfo> _parser = new pb::MessageParser<ResYuLingInfo>(() => new ResYuLingInfo());
    public static pb::MessageParser<ResYuLingInfo> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    /// 对应YuLingLevel表的表头id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::wing.YuLingInfo> _repeated_yuLingInfo_codec
        = pb::FieldCodec.ForMessage(18, global::wing.YuLingInfo.Parser);
    private readonly pbc::RepeatedField<global::wing.YuLingInfo> yuLingInfo_ = new pbc::RepeatedField<global::wing.YuLingInfo>();
    public pbc::RepeatedField<global::wing.YuLingInfo> yuLingInfo {
      get { return yuLingInfo_; }
    }

    private bool isMax_;
    /// <summary>
    /// false:未到满级 true:满级
    /// </summary>
    public bool isMax {
      get { return isMax_; }
      set {
        isMax_ = value;
      }
    }

    private int addition_;
    /// <summary>
    /// 各个位置的加成万分比 未/10000
    /// </summary>
    public int addition {
      get { return addition_; }
      set {
        addition_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      yuLingInfo_.WriteTo(output, _repeated_yuLingInfo_codec);
      if (isMax != false) {
        output.WriteRawTag(24);
        output.WriteBool(isMax);
      }
      if (addition != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(addition);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      size += yuLingInfo_.CalculateSize(_repeated_yuLingInfo_codec);
      if (isMax != false) {
        size += 1 + 1;
      }
      if (addition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(addition);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 18: {
            yuLingInfo_.AddEntriesFrom(input, _repeated_yuLingInfo_codec);
            break;
          }
          case 24: {
            isMax = input.ReadBool();
            break;
          }
          case 32: {
            addition = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class YuLingInfo : pb::IMessage {
    private static readonly pb::MessageParser<YuLingInfo> _parser = new pb::MessageParser<YuLingInfo>(() => new YuLingInfo());
    public static pb::MessageParser<YuLingInfo> Parser { get { return _parser; } }

    private int position_;
    /// <summary>
    /// 镶嵌的羽灵之魂位置
    /// </summary>
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    private int yuLingSoulId_;
    /// <summary>
    /// 镶嵌的羽灵之魂id
    /// </summary>
    public int yuLingSoulId {
      get { return yuLingSoulId_; }
      set {
        yuLingSoulId_ = value;
      }
    }

    private int lockFlag_;
    /// <summary>
    /// 0为未解锁，1未镶嵌，2已镶嵌
    /// </summary>
    public int lockFlag {
      get { return lockFlag_; }
      set {
        lockFlag_ = value;
      }
    }

    private bool isSoulMax_;
    /// <summary>
    /// false:未到满级 true:满级
    /// </summary>
    public bool isSoulMax {
      get { return isSoulMax_; }
      set {
        isSoulMax_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(position);
      }
      if (yuLingSoulId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(yuLingSoulId);
      }
      if (lockFlag != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(lockFlag);
      }
      if (isSoulMax != false) {
        output.WriteRawTag(32);
        output.WriteBool(isSoulMax);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      if (yuLingSoulId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(yuLingSoulId);
      }
      if (lockFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(lockFlag);
      }
      if (isSoulMax != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            position = input.ReadInt32();
            break;
          }
          case 16: {
            yuLingSoulId = input.ReadInt32();
            break;
          }
          case 24: {
            lockFlag = input.ReadInt32();
            break;
          }
          case 32: {
            isSoulMax = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 羽灵之魂快捷合成，请求
  /// </summary>
  public sealed class ReqYuLingSoulUpgrade : pb::IMessage {
    private static readonly pb::MessageParser<ReqYuLingSoulUpgrade> _parser = new pb::MessageParser<ReqYuLingSoulUpgrade>(() => new ReqYuLingSoulUpgrade());
    public static pb::MessageParser<ReqYuLingSoulUpgrade> Parser { get { return _parser; } }

    private int position_;
    /// <summary>
    /// 镶嵌的羽灵之魂位置
    /// </summary>
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(position);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 羽灵之魂、单个镶嵌，请求
  /// </summary>
  public sealed class ReqYuLingSoulSingleSet : pb::IMessage {
    private static readonly pb::MessageParser<ReqYuLingSoulSingleSet> _parser = new pb::MessageParser<ReqYuLingSoulSingleSet>(() => new ReqYuLingSoulSingleSet());
    public static pb::MessageParser<ReqYuLingSoulSingleSet> Parser { get { return _parser; } }

    private int position_;
    /// <summary>
    /// 镶嵌的位置
    /// </summary>
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    private int bagIndex_;
    /// <summary>
    /// 羽灵
    /// </summary>
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(position);
      }
      if (bagIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(bagIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            position = input.ReadInt32();
            break;
          }
          case 16: {
            bagIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
