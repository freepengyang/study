// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MonthCard.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace monthcard {

  #region Messages
  /// <summary>
  ///月卡购买
  /// </summary>
  public sealed class BuyMonthCardRequest : pb::IMessage {
    private static readonly pb::MessageParser<BuyMonthCardRequest> _parser = new pb::MessageParser<BuyMonthCardRequest>(() => new BuyMonthCardRequest());
    public static pb::MessageParser<BuyMonthCardRequest> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///月卡id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///月卡购买响应
  /// </summary>
  public sealed class BuyMonthCardResponse : pb::IMessage {
    private static readonly pb::MessageParser<BuyMonthCardResponse> _parser = new pb::MessageParser<BuyMonthCardResponse>(() => new BuyMonthCardResponse());
    public static pb::MessageParser<BuyMonthCardResponse> Parser { get { return _parser; } }

    private global::monthcard.MonthCardInfo monthCardInfo_;
    public global::monthcard.MonthCardInfo monthCardInfo {
      get { return monthCardInfo_; }
      set {
        monthCardInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (monthCardInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(monthCardInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (monthCardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(monthCardInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (monthCardInfo_ == null) {
              monthCardInfo_ = new global::monthcard.MonthCardInfo();
            }
            input.ReadMessage(monthCardInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class MonthCardInfo : pb::IMessage {
    private static readonly pb::MessageParser<MonthCardInfo> _parser = new pb::MessageParser<MonthCardInfo>(() => new MonthCardInfo());
    public static pb::MessageParser<MonthCardInfo> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///月卡id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long endTime_;
    /// <summary>
    ///月卡结束时间
    /// </summary>
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    private int keepRewardDay_;
    /// <summary>
    ///保留奖励的天数
    /// </summary>
    public int keepRewardDay {
      get { return keepRewardDay_; }
      set {
        keepRewardDay_ = value;
      }
    }

    private bool isReceive_;
    /// <summary>
    ///是否领取今天奖励
    /// </summary>
    public bool isReceive {
      get { return isReceive_; }
      set {
        isReceive_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (endTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(endTime);
      }
      if (keepRewardDay != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(keepRewardDay);
      }
      if (isReceive != false) {
        output.WriteRawTag(32);
        output.WriteBool(isReceive);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      if (keepRewardDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(keepRewardDay);
      }
      if (isReceive != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            endTime = input.ReadInt64();
            break;
          }
          case 24: {
            keepRewardDay = input.ReadInt32();
            break;
          }
          case 32: {
            isReceive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class ReceiveMonthCardRewardRequest : pb::IMessage {
    private static readonly pb::MessageParser<ReceiveMonthCardRewardRequest> _parser = new pb::MessageParser<ReceiveMonthCardRewardRequest>(() => new ReceiveMonthCardRewardRequest());
    public static pb::MessageParser<ReceiveMonthCardRewardRequest> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///月卡id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ReceiveMonthCardRewardResponse : pb::IMessage {
    private static readonly pb::MessageParser<ReceiveMonthCardRewardResponse> _parser = new pb::MessageParser<ReceiveMonthCardRewardResponse>(() => new ReceiveMonthCardRewardResponse());
    public static pb::MessageParser<ReceiveMonthCardRewardResponse> Parser { get { return _parser; } }

    private global::monthcard.MonthCardInfo monthCardInfo_;
    public global::monthcard.MonthCardInfo monthCardInfo {
      get { return monthCardInfo_; }
      set {
        monthCardInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (monthCardInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(monthCardInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (monthCardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(monthCardInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (monthCardInfo_ == null) {
              monthCardInfo_ = new global::monthcard.MonthCardInfo();
            }
            input.ReadMessage(monthCardInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class MonthCardInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<MonthCardInfoResponse> _parser = new pb::MessageParser<MonthCardInfoResponse>(() => new MonthCardInfoResponse());
    public static pb::MessageParser<MonthCardInfoResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::monthcard.MonthCardInfo> _repeated_monthCardInfo_codec
        = pb::FieldCodec.ForMessage(10, global::monthcard.MonthCardInfo.Parser);
    private readonly pbc::RepeatedField<global::monthcard.MonthCardInfo> monthCardInfo_ = new pbc::RepeatedField<global::monthcard.MonthCardInfo>();
    public pbc::RepeatedField<global::monthcard.MonthCardInfo> monthCardInfo {
      get { return monthCardInfo_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      monthCardInfo_.WriteTo(output, _repeated_monthCardInfo_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += monthCardInfo_.CalculateSize(_repeated_monthCardInfo_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            monthCardInfo_.AddEntriesFrom(input, _repeated_monthCardInfo_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
