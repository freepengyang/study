// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace user {

  #region Messages
  public sealed class RoleBrief : pb::IMessage {
    private static readonly pb::MessageParser<RoleBrief> _parser = new pb::MessageParser<RoleBrief>(() => new RoleBrief());
    public static pb::MessageParser<RoleBrief> Parser { get { return _parser; } }

    private long roleId_;
    /// <summary>
    ///角色ID
    /// </summary>
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private string roleName_ = "";
    /// <summary>
    ///名称
    /// </summary>
    public string roleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int career_;
    /// <summary>
    ///职业
    /// </summary>
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    private int sex_;
    /// <summary>
    ///性别
    /// </summary>
    public int sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private int mapId_;
    /// <summary>
    ///所在地图
    /// </summary>
    public int mapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    private int line_;
    /// <summary>
    ///所在分线
    /// </summary>
    public int line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    private int hp_;
    /// <summary>
    ///血量
    /// </summary>
    public int hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int maxHp_;
    /// <summary>
    ///最大血量
    /// </summary>
    public int maxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private int weapon_;
    /// <summary>
    ///武器
    /// </summary>
    public int weapon {
      get { return weapon_; }
      set {
        weapon_ = value;
      }
    }

    private int armor_;
    /// <summary>
    ///衣服
    /// </summary>
    public int armor {
      get { return armor_; }
      set {
        armor_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::fight.BufferInfo> _repeated_buffers_codec
        = pb::FieldCodec.ForMessage(114, global::fight.BufferInfo.Parser);
    private readonly pbc::RepeatedField<global::fight.BufferInfo> buffers_ = new pbc::RepeatedField<global::fight.BufferInfo>();
    /// <summary>
    ///身上的buff
    /// </summary>
    public pbc::RepeatedField<global::fight.BufferInfo> buffers {
      get { return buffers_; }
    }

    private int mp_;
    /// <summary>
    ///魔法值
    /// </summary>
    public int mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    private int maxMp_;
    /// <summary>
    ///最大魔法值
    /// </summary>
    public int maxMp {
      get { return maxMp_; }
      set {
        maxMp_ = value;
      }
    }

    private string unionName_ = "";
    /// <summary>
    ///帮会名称
    /// </summary>
    public string unionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int unionPos_;
    /// <summary>
    ///帮会职位
    /// </summary>
    public int unionPos {
      get { return unionPos_; }
      set {
        unionPos_ = value;
      }
    }

    private int mountsId_;
    /// <summary>
    ///坐骑
    /// </summary>
    public int mountsId {
      get { return mountsId_; }
      set {
        mountsId_ = value;
      }
    }

    private bool isRideMount_;
    /// <summary>
    ///是否骑乘状态
    /// </summary>
    public bool isRideMount {
      get { return isRideMount_; }
      set {
        isRideMount_ = value;
      }
    }

    private int titleId_;
    /// <summary>
    ///称号
    /// </summary>
    public int titleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    private long unionId_;
    /// <summary>
    ///帮会id
    /// </summary>
    public long unionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    private long teamId_;
    /// <summary>
    ///组队id
    /// </summary>
    public long teamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    private int uLv_;
    /// <summary>
    ///帮会等级
    /// </summary>
    public int ULv {
      get { return uLv_; }
      set {
        uLv_ = value;
      }
    }

    private int showIcon_;
    /// <summary>
    ///显示图标
    /// </summary>
    public int showIcon {
      get { return showIcon_; }
      set {
        showIcon_ = value;
      }
    }

    private int serverId_;
    /// <summary>
    ///角色以前的服务器ID
    /// </summary>
    public int serverId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    private int curServerId_;
    /// <summary>
    ///角色当前的服务器ID
    /// </summary>
    public int curServerId {
      get { return curServerId_; }
      set {
        curServerId_ = value;
      }
    }

    private int curServerType_;
    /// <summary>
    ///当前服务器类型
    /// </summary>
    public int curServerType {
      get { return curServerType_; }
      set {
        curServerType_ = value;
      }
    }

    private int photo_;
    /// <summary>
    ///头像
    /// </summary>
    public int photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    private int speed_;
    /// <summary>
    ///速度
    /// </summary>
    public int speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    private int fashionId_;
    /// <summary>
    ///时装-衣服
    /// </summary>
    public int fashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    private int fashionWeaponId_;
    /// <summary>
    ///时装-武器
    /// </summary>
    public int fashionWeaponId {
      get { return fashionWeaponId_; }
      set {
        fashionWeaponId_ = value;
      }
    }

    private int activeEquipSuit_;
    /// <summary>
    ///激活的套装
    /// </summary>
    public int activeEquipSuit {
      get { return activeEquipSuit_; }
      set {
        activeEquipSuit_ = value;
      }
    }

    private int wolongPetId_;
    /// <summary>
    ///激活的卧龙战魂id;
    /// </summary>
    public int wolongPetId {
      get { return wolongPetId_; }
      set {
        wolongPetId_ = value;
      }
    }

    private long wingId_;
    /// <summary>
    ///高32幻彩ID 低32翅膀id;
    /// </summary>
    public long wingId {
      get { return wingId_; }
      set {
        wingId_ = value;
      }
    }

    private int vipLevel_;
    /// <summary>
    ///vip level;
    /// </summary>
    public int vipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    private int wolongLevel_;
    /// <summary>
    ///卧龙等级;
    /// </summary>
    public int wolongLevel {
      get { return wolongLevel_; }
      set {
        wolongLevel_ = value;
      }
    }

    private int suitId_;
    /// <summary>
    ///套装ID（时装）
    /// </summary>
    public int suitId {
      get { return suitId_; }
      set {
        suitId_ = value;
      }
    }

    private int pkValue_;
    /// <summary>
    ///pk值
    /// </summary>
    public int pkValue {
      get { return pkValue_; }
      set {
        pkValue_ = value;
      }
    }

    private int greyName_;
    /// <summary>
    ///1灰名，2不是灰名
    /// </summary>
    public int greyName {
      get { return greyName_; }
      set {
        greyName_ = value;
      }
    }

    private bool hasShield_;
    /// <summary>
    ///是否拥有护体;
    /// </summary>
    public bool hasShield {
      get { return hasShield_; }
      set {
        hasShield_ = value;
      }
    }

    private int shieldAttr_;
    /// <summary>
    ///护盾属性
    /// </summary>
    public int shieldAttr {
      get { return shieldAttr_; }
      set {
        shieldAttr_ = value;
      }
    }

    private int maxShield_;
    /// <summary>
    ///最大值
    /// </summary>
    public int maxShield {
      get { return maxShield_; }
      set {
        maxShield_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (roleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(roleName);
      }
      if (level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(level);
      }
      if (career != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(career);
      }
      if (sex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(sex);
      }
      if (mapId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(mapId);
      }
      if (line != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(line);
      }
      if (hp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(hp);
      }
      if (maxHp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(maxHp);
      }
      if (x != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(y);
      }
      if (weapon != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(weapon);
      }
      if (armor != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(armor);
      }
      buffers_.WriteTo(output, _repeated_buffers_codec);
      if (mp != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(mp);
      }
      if (maxMp != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(maxMp);
      }
      if (unionName.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(unionName);
      }
      if (unionPos != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(unionPos);
      }
      if (mountsId != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(mountsId);
      }
      if (isRideMount != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(isRideMount);
      }
      if (titleId != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(titleId);
      }
      if (unionId != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(unionId);
      }
      if (teamId != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(teamId);
      }
      if (ULv != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(ULv);
      }
      if (showIcon != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(showIcon);
      }
      if (serverId != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(serverId);
      }
      if (curServerId != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(curServerId);
      }
      if (curServerType != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(curServerType);
      }
      if (photo != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(photo);
      }
      if (speed != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(speed);
      }
      if (fashionId != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(fashionId);
      }
      if (fashionWeaponId != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(fashionWeaponId);
      }
      if (activeEquipSuit != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(activeEquipSuit);
      }
      if (wolongPetId != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(wolongPetId);
      }
      if (wingId != 0L) {
        output.WriteRawTag(232, 2);
        output.WriteInt64(wingId);
      }
      if (vipLevel != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(vipLevel);
      }
      if (wolongLevel != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(wolongLevel);
      }
      if (suitId != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(suitId);
      }
      if (pkValue != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(pkValue);
      }
      if (greyName != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(greyName);
      }
      if (hasShield != false) {
        output.WriteRawTag(152, 3);
        output.WriteBool(hasShield);
      }
      if (shieldAttr != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(shieldAttr);
      }
      if (maxShield != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(maxShield);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (roleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(roleName);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sex);
      }
      if (mapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mapId);
      }
      if (line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(line);
      }
      if (hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hp);
      }
      if (maxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxHp);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      if (weapon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(weapon);
      }
      if (armor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(armor);
      }
      size += buffers_.CalculateSize(_repeated_buffers_codec);
      if (mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mp);
      }
      if (maxMp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(maxMp);
      }
      if (unionName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(unionName);
      }
      if (unionPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(unionPos);
      }
      if (mountsId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(mountsId);
      }
      if (isRideMount != false) {
        size += 2 + 1;
      }
      if (titleId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(titleId);
      }
      if (unionId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(unionId);
      }
      if (teamId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(teamId);
      }
      if (ULv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ULv);
      }
      if (showIcon != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(showIcon);
      }
      if (serverId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(serverId);
      }
      if (curServerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(curServerId);
      }
      if (curServerType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(curServerType);
      }
      if (photo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(photo);
      }
      if (speed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(speed);
      }
      if (fashionId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(fashionId);
      }
      if (fashionWeaponId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(fashionWeaponId);
      }
      if (activeEquipSuit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(activeEquipSuit);
      }
      if (wolongPetId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(wolongPetId);
      }
      if (wingId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(wingId);
      }
      if (vipLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(vipLevel);
      }
      if (wolongLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(wolongLevel);
      }
      if (suitId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(suitId);
      }
      if (pkValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(pkValue);
      }
      if (greyName != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(greyName);
      }
      if (hasShield != false) {
        size += 2 + 1;
      }
      if (shieldAttr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(shieldAttr);
      }
      if (maxShield != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(maxShield);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 18: {
            roleName = input.ReadString();
            break;
          }
          case 24: {
            level = input.ReadInt32();
            break;
          }
          case 32: {
            career = input.ReadInt32();
            break;
          }
          case 40: {
            sex = input.ReadInt32();
            break;
          }
          case 48: {
            mapId = input.ReadInt32();
            break;
          }
          case 56: {
            line = input.ReadInt32();
            break;
          }
          case 64: {
            hp = input.ReadInt32();
            break;
          }
          case 72: {
            maxHp = input.ReadInt32();
            break;
          }
          case 80: {
            x = input.ReadInt32();
            break;
          }
          case 88: {
            y = input.ReadInt32();
            break;
          }
          case 96: {
            weapon = input.ReadInt32();
            break;
          }
          case 104: {
            armor = input.ReadInt32();
            break;
          }
          case 114: {
            buffers_.AddEntriesFrom(input, _repeated_buffers_codec);
            break;
          }
          case 120: {
            mp = input.ReadInt32();
            break;
          }
          case 128: {
            maxMp = input.ReadInt32();
            break;
          }
          case 154: {
            unionName = input.ReadString();
            break;
          }
          case 160: {
            unionPos = input.ReadInt32();
            break;
          }
          case 168: {
            mountsId = input.ReadInt32();
            break;
          }
          case 176: {
            isRideMount = input.ReadBool();
            break;
          }
          case 184: {
            titleId = input.ReadInt32();
            break;
          }
          case 192: {
            unionId = input.ReadInt64();
            break;
          }
          case 232: {
            teamId = input.ReadInt64();
            break;
          }
          case 240: {
            ULv = input.ReadInt32();
            break;
          }
          case 256: {
            showIcon = input.ReadInt32();
            break;
          }
          case 264: {
            serverId = input.ReadInt32();
            break;
          }
          case 272: {
            curServerId = input.ReadInt32();
            break;
          }
          case 280: {
            curServerType = input.ReadInt32();
            break;
          }
          case 312: {
            photo = input.ReadInt32();
            break;
          }
          case 320: {
            speed = input.ReadInt32();
            break;
          }
          case 328: {
            fashionId = input.ReadInt32();
            break;
          }
          case 336: {
            fashionWeaponId = input.ReadInt32();
            break;
          }
          case 344: {
            activeEquipSuit = input.ReadInt32();
            break;
          }
          case 352: {
            wolongPetId = input.ReadInt32();
            break;
          }
          case 360: {
            wingId = input.ReadInt64();
            break;
          }
          case 368: {
            vipLevel = input.ReadInt32();
            break;
          }
          case 376: {
            wolongLevel = input.ReadInt32();
            break;
          }
          case 384: {
            suitId = input.ReadInt32();
            break;
          }
          case 392: {
            pkValue = input.ReadInt32();
            break;
          }
          case 400: {
            greyName = input.ReadInt32();
            break;
          }
          case 408: {
            hasShield = input.ReadBool();
            break;
          }
          case 416: {
            shieldAttr = input.ReadInt32();
            break;
          }
          case 424: {
            maxShield = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TupleProperty : pb::IMessage {
    private static readonly pb::MessageParser<TupleProperty> _parser = new pb::MessageParser<TupleProperty>(() => new TupleProperty());
    public static pb::MessageParser<TupleProperty> Parser { get { return _parser; } }

    private int type_;
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private int value_;
    public int value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(type);
      }
      if (value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      if (value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(value);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type = input.ReadInt32();
            break;
          }
          case 16: {
            value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PlayerAttribute : pb::IMessage {
    private static readonly pb::MessageParser<PlayerAttribute> _parser = new pb::MessageParser<PlayerAttribute>(() => new PlayerAttribute());
    public static pb::MessageParser<PlayerAttribute> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::user.TupleProperty> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(10, global::user.TupleProperty.Parser);
    private readonly pbc::RepeatedField<global::user.TupleProperty> attrs_ = new pbc::RepeatedField<global::user.TupleProperty>();
    /// <summary>
    /// map&lt;int32, int32> attrs = 1;
    /// </summary>
    public pbc::RepeatedField<global::user.TupleProperty> attrs {
      get { return attrs_; }
    }

    private int nbValue_;
    /// <summary>
    ///战斗力
    /// </summary>
    public int nbValue {
      get { return nbValue_; }
      set {
        nbValue_ = value;
      }
    }

    private int speed_;
    /// <summary>
    ///速度
    /// </summary>
    public int speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      attrs_.WriteTo(output, _repeated_attrs_codec);
      if (nbValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(nbValue);
      }
      if (speed != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(speed);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      if (nbValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nbValue);
      }
      if (speed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(speed);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 16: {
            nbValue = input.ReadInt32();
            break;
          }
          case 320: {
            speed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PlayerMoveSpeed : pb::IMessage {
    private static readonly pb::MessageParser<PlayerMoveSpeed> _parser = new pb::MessageParser<PlayerMoveSpeed>(() => new PlayerMoveSpeed());
    public static pb::MessageParser<PlayerMoveSpeed> Parser { get { return _parser; } }

    private long roleId_;
    /// <summary>
    ///角色ID
    /// </summary>
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private int speed_;
    /// <summary>
    ///速度
    /// </summary>
    public int speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (speed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(speed);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(speed);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 16: {
            speed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SkillGroupInfo : pb::IMessage {
    private static readonly pb::MessageParser<SkillGroupInfo> _parser = new pb::MessageParser<SkillGroupInfo>(() => new SkillGroupInfo());
    public static pb::MessageParser<SkillGroupInfo> Parser { get { return _parser; } }

    private int skillGroup_;
    public int skillGroup {
      get { return skillGroup_; }
      set {
        skillGroup_ = value;
      }
    }

    private int level_;
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int sid_;
    public int sid {
      get { return sid_; }
      set {
        sid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (skillGroup != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(skillGroup);
      }
      if (level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(level);
      }
      if (sid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(sid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (skillGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(skillGroup);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (sid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            skillGroup = input.ReadInt32();
            break;
          }
          case 16: {
            level = input.ReadInt32();
            break;
          }
          case 24: {
            sid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SkillRefixInfo : pb::IMessage {
    private static readonly pb::MessageParser<SkillRefixInfo> _parser = new pb::MessageParser<SkillRefixInfo>(() => new SkillRefixInfo());
    public static pb::MessageParser<SkillRefixInfo> Parser { get { return _parser; } }

    private int allSkillRefixLevel_;
    /// <summary>
    ///所有技能等级修正数据 （影响来源：装备随机属性...)
    /// </summary>
    public int allSkillRefixLevel {
      get { return allSkillRefixLevel_; }
      set {
        allSkillRefixLevel_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::user.TupleProperty> _repeated_levelRefixList_codec
        = pb::FieldCodec.ForMessage(18, global::user.TupleProperty.Parser);
    private readonly pbc::RepeatedField<global::user.TupleProperty> levelRefixList_ = new pbc::RepeatedField<global::user.TupleProperty>();
    /// <summary>
    /// 技能组等级修正数据;（影响来源：装备随机属性...)技能组,影响的等级; type:group,value:加成等级;
    /// </summary>
    public pbc::RepeatedField<global::user.TupleProperty> levelRefixList {
      get { return levelRefixList_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (allSkillRefixLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(allSkillRefixLevel);
      }
      levelRefixList_.WriteTo(output, _repeated_levelRefixList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (allSkillRefixLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(allSkillRefixLevel);
      }
      size += levelRefixList_.CalculateSize(_repeated_levelRefixList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            allSkillRefixLevel = input.ReadInt32();
            break;
          }
          case 18: {
            levelRefixList_.AddEntriesFrom(input, _repeated_levelRefixList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    private global::user.RoleBrief roleBrief_;
    public global::user.RoleBrief roleBrief {
      get { return roleBrief_; }
      set {
        roleBrief_ = value;
      }
    }

    private global::user.PlayerAttribute attribute_;
    public global::user.PlayerAttribute attribute {
      get { return attribute_; }
      set {
        attribute_ = value;
      }
    }

    private global::bag.BagInfo bag_;
    public global::bag.BagInfo bag {
      get { return bag_; }
      set {
        bag_ = value;
      }
    }

    private long exp_;
    /// <summary>
    ///经验
    /// </summary>
    public long exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::user.SkillGroupInfo> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(42, global::user.SkillGroupInfo.Parser);
    private readonly pbc::RepeatedField<global::user.SkillGroupInfo> skills_ = new pbc::RepeatedField<global::user.SkillGroupInfo>();
    /// <summary>
    /// </summary>
    public pbc::RepeatedField<global::user.SkillGroupInfo> skills {
      get { return skills_; }
    }

    private static readonly pb::FieldCodec<global::task.TaskInfo> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(50, global::task.TaskInfo.Parser);
    private readonly pbc::RepeatedField<global::task.TaskInfo> tasks_ = new pbc::RepeatedField<global::task.TaskInfo>();
    public pbc::RepeatedField<global::task.TaskInfo> tasks {
      get { return tasks_; }
    }

    private static readonly pb::FieldCodec<global::fight.BufferInfo> _repeated_buffers_codec
        = pb::FieldCodec.ForMessage(58, global::fight.BufferInfo.Parser);
    private readonly pbc::RepeatedField<global::fight.BufferInfo> buffers_ = new pbc::RepeatedField<global::fight.BufferInfo>();
    public pbc::RepeatedField<global::fight.BufferInfo> buffers {
      get { return buffers_; }
    }

    private static readonly pb::FieldCodec<long> _repeated_skillShortCut_codec
        = pb::FieldCodec.ForInt64(66);
    private readonly pbc::RepeatedField<long> skillShortCut_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///技能快捷方式
    /// </summary>
    public pbc::RepeatedField<long> skillShortCut {
      get { return skillShortCut_; }
    }

    private global::player.RoleExtraValues roleExtraValues_;
    /// <summary>
    ///玩家额外数据
    /// </summary>
    public global::player.RoleExtraValues roleExtraValues {
      get { return roleExtraValues_; }
      set {
        roleExtraValues_ = value;
      }
    }

    private int office_;
    /// <summary>
    ///官职
    /// </summary>
    public int office {
      get { return office_; }
      set {
        office_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_roleSettings_codec
        = pb::FieldCodec.ForInt64(90);
    private readonly pbc::RepeatedField<long> roleSettings_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///玩家设置
    /// </summary>
    public pbc::RepeatedField<long> roleSettings {
      get { return roleSettings_; }
    }

    private int dailyTaskDone_;
    /// <summary>
    ///已完成的日常任务数
    /// </summary>
    public int dailyTaskDone {
      get { return dailyTaskDone_; }
      set {
        dailyTaskDone_ = value;
      }
    }

    private long teamId_;
    /// <summary>
    ///组队id
    /// </summary>
    public long teamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    private int teamMode_;
    /// <summary>
    ///组队模式 0自动 1手动 2拒绝
    /// </summary>
    public int teamMode {
      get { return teamMode_; }
      set {
        teamMode_ = value;
      }
    }

    private int pkMode_;
    /// <summary>
    ///pk模式 0和平 1全体 2善恶 3组队 4帮会
    /// </summary>
    public int pkMode {
      get { return pkMode_; }
      set {
        pkMode_ = value;
      }
    }

    private long serverOpenTime_;
    /// <summary>
    ///开服时间
    /// </summary>
    public long serverOpenTime {
      get { return serverOpenTime_; }
      set {
        serverOpenTime_ = value;
      }
    }

    private long createRoleTime_;
    /// <summary>
    ///角色创建时间
    /// </summary>
    public long createRoleTime {
      get { return createRoleTime_; }
      set {
        createRoleTime_ = value;
      }
    }

    private int serverId_;
    public int serverId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    private int serverType_;
    /// <summary>
    ///服务器类型 1：游戏服务器 3：共享服务器
    /// </summary>
    public int serverType {
      get { return serverType_; }
      set {
        serverType_ = value;
      }
    }

    private bool changeLine_;
    /// <summary>
    ///是否切换服务器
    /// </summary>
    public bool changeLine {
      get { return changeLine_; }
      set {
        changeLine_ = value;
      }
    }

    private global::fight.AutoSkillList autoSkills_;
    /// <summary>
    ///自动释放技能列表;
    /// </summary>
    public global::fight.AutoSkillList autoSkills {
      get { return autoSkills_; }
      set {
        autoSkills_ = value;
      }
    }

    private int pkValue_;
    /// <summary>
    ///pk值
    /// </summary>
    public int pkValue {
      get { return pkValue_; }
      set {
        pkValue_ = value;
      }
    }

    private global::user.SkillRefixInfo skillRefixData_;
    /// <summary>
    ///技能修正数据;
    /// </summary>
    public global::user.SkillRefixInfo skillRefixData {
      get { return skillRefixData_; }
      set {
        skillRefixData_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_newbieGuide_codec
        = pb::FieldCodec.ForInt32(242);
    private readonly pbc::RepeatedField<int> newbieGuide_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///新手引导数据
    /// </summary>
    public pbc::RepeatedField<int> newbieGuide {
      get { return newbieGuide_; }
    }

    private bool canSpeak_;
    /// <summary>
    ///能否语音;
    /// </summary>
    public bool canSpeak {
      get { return canSpeak_; }
      set {
        canSpeak_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleBrief_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(roleBrief);
      }
      if (attribute_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(attribute);
      }
      if (bag_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(bag);
      }
      if (exp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(exp);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      tasks_.WriteTo(output, _repeated_tasks_codec);
      buffers_.WriteTo(output, _repeated_buffers_codec);
      skillShortCut_.WriteTo(output, _repeated_skillShortCut_codec);
      if (roleExtraValues_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(roleExtraValues);
      }
      if (office != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(office);
      }
      roleSettings_.WriteTo(output, _repeated_roleSettings_codec);
      if (dailyTaskDone != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(dailyTaskDone);
      }
      if (teamId != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(teamId);
      }
      if (teamMode != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(teamMode);
      }
      if (pkMode != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(pkMode);
      }
      if (serverOpenTime != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(serverOpenTime);
      }
      if (createRoleTime != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(createRoleTime);
      }
      if (serverId != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(serverId);
      }
      if (serverType != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(serverType);
      }
      if (changeLine != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(changeLine);
      }
      if (autoSkills_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(autoSkills);
      }
      if (pkValue != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(pkValue);
      }
      if (skillRefixData_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(skillRefixData);
      }
      newbieGuide_.WriteTo(output, _repeated_newbieGuide_codec);
      if (canSpeak != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(canSpeak);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleBrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(roleBrief);
      }
      if (attribute_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(attribute);
      }
      if (bag_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(bag);
      }
      if (exp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(exp);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      size += buffers_.CalculateSize(_repeated_buffers_codec);
      size += skillShortCut_.CalculateSize(_repeated_skillShortCut_codec);
      if (roleExtraValues_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(roleExtraValues);
      }
      if (office != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(office);
      }
      size += roleSettings_.CalculateSize(_repeated_roleSettings_codec);
      if (dailyTaskDone != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(dailyTaskDone);
      }
      if (teamId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(teamId);
      }
      if (teamMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(teamMode);
      }
      if (pkMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(pkMode);
      }
      if (serverOpenTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(serverOpenTime);
      }
      if (createRoleTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(createRoleTime);
      }
      if (serverId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(serverId);
      }
      if (serverType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(serverType);
      }
      if (changeLine != false) {
        size += 2 + 1;
      }
      if (autoSkills_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(autoSkills);
      }
      if (pkValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(pkValue);
      }
      if (skillRefixData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(skillRefixData);
      }
      size += newbieGuide_.CalculateSize(_repeated_newbieGuide_codec);
      if (canSpeak != false) {
        size += 2 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roleBrief_ == null) {
              roleBrief_ = new global::user.RoleBrief();
            }
            input.ReadMessage(roleBrief_);
            break;
          }
          case 18: {
            if (attribute_ == null) {
              attribute_ = new global::user.PlayerAttribute();
            }
            input.ReadMessage(attribute_);
            break;
          }
          case 26: {
            if (bag_ == null) {
              bag_ = new global::bag.BagInfo();
            }
            input.ReadMessage(bag_);
            break;
          }
          case 32: {
            exp = input.ReadInt64();
            break;
          }
          case 42: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 50: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
          case 58: {
            buffers_.AddEntriesFrom(input, _repeated_buffers_codec);
            break;
          }
          case 66:
          case 64: {
            skillShortCut_.AddEntriesFrom(input, _repeated_skillShortCut_codec);
            break;
          }
          case 74: {
            if (roleExtraValues_ == null) {
              roleExtraValues_ = new global::player.RoleExtraValues();
            }
            input.ReadMessage(roleExtraValues_);
            break;
          }
          case 80: {
            office = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            roleSettings_.AddEntriesFrom(input, _repeated_roleSettings_codec);
            break;
          }
          case 128: {
            dailyTaskDone = input.ReadInt32();
            break;
          }
          case 136: {
            teamId = input.ReadInt64();
            break;
          }
          case 144: {
            teamMode = input.ReadInt32();
            break;
          }
          case 152: {
            pkMode = input.ReadInt32();
            break;
          }
          case 168: {
            serverOpenTime = input.ReadInt64();
            break;
          }
          case 184: {
            createRoleTime = input.ReadInt64();
            break;
          }
          case 192: {
            serverId = input.ReadInt32();
            break;
          }
          case 200: {
            serverType = input.ReadInt32();
            break;
          }
          case 208: {
            changeLine = input.ReadBool();
            break;
          }
          case 218: {
            if (autoSkills_ == null) {
              autoSkills_ = new global::fight.AutoSkillList();
            }
            input.ReadMessage(autoSkills_);
            break;
          }
          case 224: {
            pkValue = input.ReadInt32();
            break;
          }
          case 234: {
            if (skillRefixData_ == null) {
              skillRefixData_ = new global::user.SkillRefixInfo();
            }
            input.ReadMessage(skillRefixData_);
            break;
          }
          case 242:
          case 240: {
            newbieGuide_.AddEntriesFrom(input, _repeated_newbieGuide_codec);
            break;
          }
          case 248: {
            canSpeak = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class LoginRequest : pb::IMessage {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    private string loginName_ = "";
    /// <summary>
    ///用户登录名
    /// </summary>
    public string loginName {
      get { return loginName_; }
      set {
        loginName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int forumId_;
    /// <summary>
    ///平台
    /// </summary>
    public int forumId {
      get { return forumId_; }
      set {
        forumId_ = value;
      }
    }

    private int serverId_;
    /// <summary>
    ///服务器ID
    /// </summary>
    public int serverId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    private string sign_ = "";
    public string sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long time_;
    public long time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private string client_ = "";
    /// <summary>
    ///客户端版本
    /// </summary>
    public string client {
      get { return client_; }
      set {
        client_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string phoneModel_ = "";
    /// <summary>
    ///手机型号
    /// </summary>
    public string phoneModel {
      get { return phoneModel_; }
      set {
        phoneModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int over18Flag_;
    /// <summary>
    ///0代表兼容之前版本，1代表未成年，2代表成年
    /// </summary>
    public int over18Flag {
      get { return over18Flag_; }
      set {
        over18Flag_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (loginName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(loginName);
      }
      if (forumId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(forumId);
      }
      if (serverId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(serverId);
      }
      if (sign.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(sign);
      }
      if (time != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(time);
      }
      if (client.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(client);
      }
      if (phoneModel.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(phoneModel);
      }
      if (over18Flag != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(over18Flag);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (loginName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(loginName);
      }
      if (forumId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(forumId);
      }
      if (serverId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(serverId);
      }
      if (sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(sign);
      }
      if (time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(time);
      }
      if (client.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(client);
      }
      if (phoneModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(phoneModel);
      }
      if (over18Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(over18Flag);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            loginName = input.ReadString();
            break;
          }
          case 16: {
            forumId = input.ReadInt32();
            break;
          }
          case 24: {
            serverId = input.ReadInt32();
            break;
          }
          case 34: {
            sign = input.ReadString();
            break;
          }
          case 40: {
            time = input.ReadInt64();
            break;
          }
          case 50: {
            client = input.ReadString();
            break;
          }
          case 58: {
            phoneModel = input.ReadString();
            break;
          }
          case 64: {
            over18Flag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class LoginResponse : pb::IMessage {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::user.RoleBrief> _repeated_roleList_codec
        = pb::FieldCodec.ForMessage(10, global::user.RoleBrief.Parser);
    private readonly pbc::RepeatedField<global::user.RoleBrief> roleList_ = new pbc::RepeatedField<global::user.RoleBrief>();
    /// <summary>
    ///角色列表
    /// </summary>
    public pbc::RepeatedField<global::user.RoleBrief> roleList {
      get { return roleList_; }
    }

    private long userId_;
    public long userId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      roleList_.WriteTo(output, _repeated_roleList_codec);
      if (userId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(userId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += roleList_.CalculateSize(_repeated_roleList_codec);
      if (userId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(userId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roleList_.AddEntriesFrom(input, _repeated_roleList_codec);
            break;
          }
          case 16: {
            userId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CreateRoleRequest : pb::IMessage {
    private static readonly pb::MessageParser<CreateRoleRequest> _parser = new pb::MessageParser<CreateRoleRequest>(() => new CreateRoleRequest());
    public static pb::MessageParser<CreateRoleRequest> Parser { get { return _parser; } }

    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int sex_;
    /// <summary>
    ///性别
    /// </summary>
    public int sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private int career_;
    /// <summary>
    ///职业
    /// </summary>
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    private string phoneModel_ = "";
    /// <summary>
    ///手机型号
    /// </summary>
    public string phoneModel {
      get { return phoneModel_; }
      set {
        phoneModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(name);
      }
      if (sex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(sex);
      }
      if (career != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(career);
      }
      if (phoneModel.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(phoneModel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sex);
      }
      if (career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (phoneModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(phoneModel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            name = input.ReadString();
            break;
          }
          case 16: {
            sex = input.ReadInt32();
            break;
          }
          case 24: {
            career = input.ReadInt32();
            break;
          }
          case 34: {
            phoneModel = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class RandomRoleNameResponse : pb::IMessage {
    private static readonly pb::MessageParser<RandomRoleNameResponse> _parser = new pb::MessageParser<RandomRoleNameResponse>(() => new RandomRoleNameResponse());
    public static pb::MessageParser<RandomRoleNameResponse> Parser { get { return _parser; } }

    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class RandomRoleNameRequest : pb::IMessage {
    private static readonly pb::MessageParser<RandomRoleNameRequest> _parser = new pb::MessageParser<RandomRoleNameRequest>(() => new RandomRoleNameRequest());
    public static pb::MessageParser<RandomRoleNameRequest> Parser { get { return _parser; } }

    private int sex_;
    /// <summary>
    ///性别
    /// </summary>
    public int sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (sex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(sex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            sex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleIdMsg : pb::IMessage {
    private static readonly pb::MessageParser<RoleIdMsg> _parser = new pb::MessageParser<RoleIdMsg>(() => new RoleIdMsg());
    public static pb::MessageParser<RoleIdMsg> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///gm命令请求
  /// </summary>
  public sealed class GMCommand : pb::IMessage {
    private static readonly pb::MessageParser<GMCommand> _parser = new pb::MessageParser<GMCommand>(() => new GMCommand());
    public static pb::MessageParser<GMCommand> Parser { get { return _parser; } }

    private string command_ = "";
    public string command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (command.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(command);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(command);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            command = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CloseServerResponse : pb::IMessage {
    private static readonly pb::MessageParser<CloseServerResponse> _parser = new pb::MessageParser<CloseServerResponse>(() => new CloseServerResponse());
    public static pb::MessageParser<CloseServerResponse> Parser { get { return _parser; } }

    private int code_;
    public int code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    private string msg_ = "";
    public string msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(code);
      }
      if (msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(msg);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(code);
      }
      if (msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(msg);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code = input.ReadInt32();
            break;
          }
          case 18: {
            msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///其他玩家的通用信息
  /// </summary>
  public sealed class OtherPlayerCommonInfo : pb::IMessage {
    private static readonly pb::MessageParser<OtherPlayerCommonInfo> _parser = new pb::MessageParser<OtherPlayerCommonInfo>(() => new OtherPlayerCommonInfo());
    public static pb::MessageParser<OtherPlayerCommonInfo> Parser { get { return _parser; } }

    private long otherRoleId_;
    /// <summary>
    ///其他玩家的Id
    /// </summary>
    public long otherRoleId {
      get { return otherRoleId_; }
      set {
        otherRoleId_ = value;
      }
    }

    private long teamId_;
    /// <summary>
    ///指定玩家的队伍Id
    /// </summary>
    public long teamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    private long selfTeamLeaderId_;
    /// <summary>
    ///请求者本队伍的队长Id
    /// </summary>
    public long selfTeamLeaderId {
      get { return selfTeamLeaderId_; }
      set {
        selfTeamLeaderId_ = value;
      }
    }

    private bool isSameUnion_;
    /// <summary>
    ///是否为同一帮派
    /// </summary>
    public bool isSameUnion {
      get { return isSameUnion_; }
      set {
        isSameUnion_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (otherRoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(otherRoleId);
      }
      if (teamId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(teamId);
      }
      if (selfTeamLeaderId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(selfTeamLeaderId);
      }
      if (isSameUnion != false) {
        output.WriteRawTag(32);
        output.WriteBool(isSameUnion);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (otherRoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(otherRoleId);
      }
      if (teamId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(teamId);
      }
      if (selfTeamLeaderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(selfTeamLeaderId);
      }
      if (isSameUnion != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            otherRoleId = input.ReadInt64();
            break;
          }
          case 16: {
            teamId = input.ReadInt64();
            break;
          }
          case 24: {
            selfTeamLeaderId = input.ReadInt64();
            break;
          }
          case 32: {
            isSameUnion = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///其他玩家的信息
  /// </summary>
  public sealed class OtherPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<OtherPlayerInfo> _parser = new pb::MessageParser<OtherPlayerInfo>(() => new OtherPlayerInfo());
    public static pb::MessageParser<OtherPlayerInfo> Parser { get { return _parser; } }

    private global::user.RoleBrief roleBrief_;
    public global::user.RoleBrief roleBrief {
      get { return roleBrief_; }
      set {
        roleBrief_ = value;
      }
    }

    private global::user.PlayerAttribute attribute_;
    public global::user.PlayerAttribute attribute {
      get { return attribute_; }
      set {
        attribute_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::bag.EquipInfo> _repeated_equips_codec
        = pb::FieldCodec.ForMessage(26, global::bag.EquipInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.EquipInfo> equips_ = new pbc::RepeatedField<global::bag.EquipInfo>();
    public pbc::RepeatedField<global::bag.EquipInfo> equips {
      get { return equips_; }
    }

    private int office_;
    /// <summary>
    ///官职
    /// </summary>
    public int office {
      get { return office_; }
      set {
        office_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleBrief_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(roleBrief);
      }
      if (attribute_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(attribute);
      }
      equips_.WriteTo(output, _repeated_equips_codec);
      if (office != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(office);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleBrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(roleBrief);
      }
      if (attribute_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(attribute);
      }
      size += equips_.CalculateSize(_repeated_equips_codec);
      if (office != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(office);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roleBrief_ == null) {
              roleBrief_ = new global::user.RoleBrief();
            }
            input.ReadMessage(roleBrief_);
            break;
          }
          case 18: {
            if (attribute_ == null) {
              attribute_ = new global::user.PlayerAttribute();
            }
            input.ReadMessage(attribute_);
            break;
          }
          case 26: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
          case 32: {
            office = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重新连接请求
  /// </summary>
  public sealed class ReconnectRequest : pb::IMessage {
    private static readonly pb::MessageParser<ReconnectRequest> _parser = new pb::MessageParser<ReconnectRequest>(() => new ReconnectRequest());
    public static pb::MessageParser<ReconnectRequest> Parser { get { return _parser; } }

    private string loginName_ = "";
    public string loginName {
      get { return loginName_; }
      set {
        loginName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int serverId_;
    public int serverId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    private int forumId_;
    public int forumId {
      get { return forumId_; }
      set {
        forumId_ = value;
      }
    }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private string sign_ = "";
    public string sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long time_;
    public long time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private bool changeLine_;
    /// <summary>
    ///是否切换服务器
    /// </summary>
    public bool changeLine {
      get { return changeLine_; }
      set {
        changeLine_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (loginName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(loginName);
      }
      if (serverId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(serverId);
      }
      if (forumId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(forumId);
      }
      if (roleId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(roleId);
      }
      if (sign.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(sign);
      }
      if (time != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(time);
      }
      if (changeLine != false) {
        output.WriteRawTag(56);
        output.WriteBool(changeLine);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (loginName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(loginName);
      }
      if (serverId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(serverId);
      }
      if (forumId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(forumId);
      }
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(sign);
      }
      if (time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(time);
      }
      if (changeLine != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            loginName = input.ReadString();
            break;
          }
          case 16: {
            serverId = input.ReadInt32();
            break;
          }
          case 24: {
            forumId = input.ReadInt32();
            break;
          }
          case 32: {
            roleId = input.ReadInt64();
            break;
          }
          case 42: {
            sign = input.ReadString();
            break;
          }
          case 48: {
            time = input.ReadInt64();
            break;
          }
          case 56: {
            changeLine = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class DisconnectResponse : pb::IMessage {
    private static readonly pb::MessageParser<DisconnectResponse> _parser = new pb::MessageParser<DisconnectResponse>(() => new DisconnectResponse());
    public static pb::MessageParser<DisconnectResponse> Parser { get { return _parser; } }

    private int reason_;
    /// <summary>
    ///GoingDownReason
    /// </summary>
    public int reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    private int onlineTime_;
    /// <summary>
    ///防沉迷原因使用，在线时间, 秒
    /// </summary>
    public int onlineTime {
      get { return onlineTime_; }
      set {
        onlineTime_ = value;
      }
    }

    private long currentTime_;
    /// <summary>
    ///防沉迷原因使用，当前时间，毫秒
    /// </summary>
    public long currentTime {
      get { return currentTime_; }
      set {
        currentTime_ = value;
      }
    }

    private int kickFlag_;
    /// <summary>
    ///防沉迷原因使用，0代表超过当前时间，1代表在22点到早上8点不能线上
    /// </summary>
    public int kickFlag {
      get { return kickFlag_; }
      set {
        kickFlag_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (reason != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(reason);
      }
      if (onlineTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(onlineTime);
      }
      if (currentTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(currentTime);
      }
      if (kickFlag != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(kickFlag);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(reason);
      }
      if (onlineTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(onlineTime);
      }
      if (currentTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(currentTime);
      }
      if (kickFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(kickFlag);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            reason = input.ReadInt32();
            break;
          }
          case 16: {
            onlineTime = input.ReadInt32();
            break;
          }
          case 24: {
            currentTime = input.ReadInt64();
            break;
          }
          case 32: {
            kickFlag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户反馈请求
  /// </summary>
  public sealed class UserFeedbackRequest : pb::IMessage {
    private static readonly pb::MessageParser<UserFeedbackRequest> _parser = new pb::MessageParser<UserFeedbackRequest>(() => new UserFeedbackRequest());
    public static pb::MessageParser<UserFeedbackRequest> Parser { get { return _parser; } }

    private string content_ = "";
    public string content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string phoneType_ = "";
    public string phoneType {
      get { return phoneType_; }
      set {
        phoneType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string qq_ = "";
    public string qq {
      get { return qq_; }
      set {
        qq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(content);
      }
      if (phoneType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(phoneType);
      }
      if (qq.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(qq);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(content);
      }
      if (phoneType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(phoneType);
      }
      if (qq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(qq);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            content = input.ReadString();
            break;
          }
          case 18: {
            phoneType = input.ReadString();
            break;
          }
          case 26: {
            qq = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///绑定手机号请求
  /// </summary>
  public sealed class BindPhoneNumberRequest : pb::IMessage {
    private static readonly pb::MessageParser<BindPhoneNumberRequest> _parser = new pb::MessageParser<BindPhoneNumberRequest>(() => new BindPhoneNumberRequest());
    public static pb::MessageParser<BindPhoneNumberRequest> Parser { get { return _parser; } }

    private string phoneNumber_ = "";
    public string phoneNumber {
      get { return phoneNumber_; }
      set {
        phoneNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (phoneNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(phoneNumber);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (phoneNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(phoneNumber);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            phoneNumber = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class RechargeingRequest : pb::IMessage {
    private static readonly pb::MessageParser<RechargeingRequest> _parser = new pb::MessageParser<RechargeingRequest>(() => new RechargeingRequest());
    public static pb::MessageParser<RechargeingRequest> Parser { get { return _parser; } }

    private string rechargeId_ = "";
    public string rechargeId {
      get { return rechargeId_; }
      set {
        rechargeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (rechargeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(rechargeId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (rechargeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(rechargeId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rechargeId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///推送消息请求
  /// </summary>
  public sealed class PushMessageRequest : pb::IMessage {
    private static readonly pb::MessageParser<PushMessageRequest> _parser = new pb::MessageParser<PushMessageRequest>(() => new PushMessageRequest());
    public static pb::MessageParser<PushMessageRequest> Parser { get { return _parser; } }

    private int type_;
    /// <summary>
    ///1:发送cid 2:发送活动设置
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_activityOpen_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> activityOpen_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///活动开关
    /// </summary>
    public pbc::RepeatedField<string> activityOpen {
      get { return activityOpen_; }
    }

    private string cid_ = "";
    public string cid {
      get { return cid_; }
      set {
        cid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string packegeName_ = "";
    /// <summary>
    ///包名
    /// </summary>
    public string packegeName {
      get { return packegeName_; }
      set {
        packegeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(type);
      }
      activityOpen_.WriteTo(output, _repeated_activityOpen_codec);
      if (cid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(cid);
      }
      if (packegeName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(packegeName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      size += activityOpen_.CalculateSize(_repeated_activityOpen_codec);
      if (cid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(cid);
      }
      if (packegeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(packegeName);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type = input.ReadInt32();
            break;
          }
          case 18: {
            activityOpen_.AddEntriesFrom(input, _repeated_activityOpen_codec);
            break;
          }
          case 26: {
            cid = input.ReadString();
            break;
          }
          case 34: {
            packegeName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///推送消息响应
  /// </summary>
  public sealed class PushMessageResponse : pb::IMessage {
    private static readonly pb::MessageParser<PushMessageResponse> _parser = new pb::MessageParser<PushMessageResponse>(() => new PushMessageResponse());
    public static pb::MessageParser<PushMessageResponse> Parser { get { return _parser; } }

    private int type_;
    /// <summary>
    ///1:通知tag 2:设置返回结果
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private string messageTag_ = "";
    public string messageTag {
      get { return messageTag_; }
      set {
        messageTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(type);
      }
      if (messageTag.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(messageTag);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      if (messageTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(messageTag);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type = input.ReadInt32();
            break;
          }
          case 34: {
            messageTag = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///使用邀请码
  /// </summary>
  public sealed class UseInvitationCode : pb::IMessage {
    private static readonly pb::MessageParser<UseInvitationCode> _parser = new pb::MessageParser<UseInvitationCode>(() => new UseInvitationCode());
    public static pb::MessageParser<UseInvitationCode> Parser { get { return _parser; } }

    private string invitationCode_ = "";
    public string invitationCode {
      get { return invitationCode_; }
      set {
        invitationCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int sex_;
    /// <summary>
    ///性别
    /// </summary>
    public int sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private int career_;
    /// <summary>
    ///职业
    /// </summary>
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    private int photo_;
    /// <summary>
    ///头像
    /// </summary>
    public int photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (invitationCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(invitationCode);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (sex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(sex);
      }
      if (career != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(career);
      }
      if (photo != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(photo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (invitationCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(invitationCode);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sex);
      }
      if (career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (photo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(photo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            invitationCode = input.ReadString();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 24: {
            sex = input.ReadInt32();
            break;
          }
          case 32: {
            career = input.ReadInt32();
            break;
          }
          case 40: {
            photo = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///提取邀请码
  /// </summary>
  public sealed class ExtractInvitationCodeResponse : pb::IMessage {
    private static readonly pb::MessageParser<ExtractInvitationCodeResponse> _parser = new pb::MessageParser<ExtractInvitationCodeResponse>(() => new ExtractInvitationCodeResponse());
    public static pb::MessageParser<ExtractInvitationCodeResponse> Parser { get { return _parser; } }

    private bool flag_;
    public bool flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    private int count_;
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private string nextInvitationCode_ = "";
    public string nextInvitationCode {
      get { return nextInvitationCode_; }
      set {
        nextInvitationCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (flag != false) {
        output.WriteRawTag(8);
        output.WriteBool(flag);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
      if (nextInvitationCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(nextInvitationCode);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (flag != false) {
        size += 1 + 1;
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (nextInvitationCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(nextInvitationCode);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag = input.ReadBool();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
          case 26: {
            nextInvitationCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///检测玩家创建角色的参数是否正常请求
  /// </summary>
  public sealed class CheckCreateRoleArgsVaildReq : pb::IMessage {
    private static readonly pb::MessageParser<CheckCreateRoleArgsVaildReq> _parser = new pb::MessageParser<CheckCreateRoleArgsVaildReq>(() => new CheckCreateRoleArgsVaildReq());
    public static pb::MessageParser<CheckCreateRoleArgsVaildReq> Parser { get { return _parser; } }

    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///检测玩家创建角色的参数是否正常回应
  /// </summary>
  public sealed class CheckCreateRoleArgsVaildAck : pb::IMessage {
    private static readonly pb::MessageParser<CheckCreateRoleArgsVaildAck> _parser = new pb::MessageParser<CheckCreateRoleArgsVaildAck>(() => new CheckCreateRoleArgsVaildAck());
    public static pb::MessageParser<CheckCreateRoleArgsVaildAck> Parser { get { return _parser; } }

    private bool ok_;
    /// <summary>
    ///是否通过
    /// </summary>
    public bool ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    private string errMsg_ = "";
    /// <summary>
    ///错误通知
    /// </summary>
    public string errMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ok != false) {
        output.WriteRawTag(8);
        output.WriteBool(ok);
      }
      if (errMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(errMsg);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ok != false) {
        size += 1 + 1;
      }
      if (errMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(errMsg);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ok = input.ReadBool();
            break;
          }
          case 18: {
            errMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class ServerTimeNtf : pb::IMessage {
    private static readonly pb::MessageParser<ServerTimeNtf> _parser = new pb::MessageParser<ServerTimeNtf>(() => new ServerTimeNtf());
    public static pb::MessageParser<ServerTimeNtf> Parser { get { return _parser; } }

    private long serverTime_;
    public long serverTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    private int mergeCount_;
    public int mergeCount {
      get { return mergeCount_; }
      set {
        mergeCount_ = value;
      }
    }

    private long firstMergeTime_;
    public long firstMergeTime {
      get { return firstMergeTime_; }
      set {
        firstMergeTime_ = value;
      }
    }

    private long lastMergeTime_;
    public long lastMergeTime {
      get { return lastMergeTime_; }
      set {
        lastMergeTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (serverTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(serverTime);
      }
      if (mergeCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(mergeCount);
      }
      if (firstMergeTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(firstMergeTime);
      }
      if (lastMergeTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(lastMergeTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (serverTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(serverTime);
      }
      if (mergeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mergeCount);
      }
      if (firstMergeTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(firstMergeTime);
      }
      if (lastMergeTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(lastMergeTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            serverTime = input.ReadInt64();
            break;
          }
          case 16: {
            mergeCount = input.ReadInt32();
            break;
          }
          case 24: {
            firstMergeTime = input.ReadInt64();
            break;
          }
          case 32: {
            lastMergeTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class ServerLoadNtf : pb::IMessage {
    private static readonly pb::MessageParser<ServerLoadNtf> _parser = new pb::MessageParser<ServerLoadNtf>(() => new ServerLoadNtf());
    public static pb::MessageParser<ServerLoadNtf> Parser { get { return _parser; } }

    private int count_;
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ServerBusyNtf : pb::IMessage {
    private static readonly pb::MessageParser<ServerBusyNtf> _parser = new pb::MessageParser<ServerBusyNtf>(() => new ServerBusyNtf());
    public static pb::MessageParser<ServerBusyNtf> Parser { get { return _parser; } }

    private int count_;
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CreateRoleNtf : pb::IMessage {
    private static readonly pb::MessageParser<CreateRoleNtf> _parser = new pb::MessageParser<CreateRoleNtf>(() => new CreateRoleNtf());
    public static pb::MessageParser<CreateRoleNtf> Parser { get { return _parser; } }

    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int sex_;
    /// <summary>
    ///性别
    /// </summary>
    public int sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private int career_;
    /// <summary>
    ///职业
    /// </summary>
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    private int photo_;
    /// <summary>
    ///头像
    /// </summary>
    public int photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    private bool isRecomend_;
    /// <summary>
    ///是否选择推荐国家
    /// </summary>
    public bool isRecomend {
      get { return isRecomend_; }
      set {
        isRecomend_ = value;
      }
    }

    private string phoneModel_ = "";
    /// <summary>
    ///手机型号
    /// </summary>
    public string phoneModel {
      get { return phoneModel_; }
      set {
        phoneModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private long userId_;
    public long userId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(name);
      }
      if (sex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(sex);
      }
      if (career != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(career);
      }
      if (photo != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(photo);
      }
      if (isRecomend != false) {
        output.WriteRawTag(40);
        output.WriteBool(isRecomend);
      }
      if (phoneModel.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(phoneModel);
      }
      if (roleId != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(roleId);
      }
      if (userId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(userId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sex);
      }
      if (career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (photo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(photo);
      }
      if (isRecomend != false) {
        size += 1 + 1;
      }
      if (phoneModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(phoneModel);
      }
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (userId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(userId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            name = input.ReadString();
            break;
          }
          case 16: {
            sex = input.ReadInt32();
            break;
          }
          case 24: {
            career = input.ReadInt32();
            break;
          }
          case 32: {
            photo = input.ReadInt32();
            break;
          }
          case 40: {
            isRecomend = input.ReadBool();
            break;
          }
          case 50: {
            phoneModel = input.ReadString();
            break;
          }
          case 56: {
            roleId = input.ReadInt64();
            break;
          }
          case 64: {
            userId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class ReloadScriptResponse : pb::IMessage {
    private static readonly pb::MessageParser<ReloadScriptResponse> _parser = new pb::MessageParser<ReloadScriptResponse>(() => new ReloadScriptResponse());
    public static pb::MessageParser<ReloadScriptResponse> Parser { get { return _parser; } }

    private int code_;
    public int code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    private string msg_ = "";
    public string msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(code);
      }
      if (msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(msg);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(code);
      }
      if (msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(msg);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code = input.ReadInt32();
            break;
          }
          case 18: {
            msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
