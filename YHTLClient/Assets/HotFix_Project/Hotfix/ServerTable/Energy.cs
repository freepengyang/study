// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Energy.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace energy {

  #region Messages
  /// <summary>
  ///精力数据
  /// </summary>
  public sealed class EnergyInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<EnergyInfoResponse> _parser = new pb::MessageParser<EnergyInfoResponse>(() => new EnergyInfoResponse());
    public static pb::MessageParser<EnergyInfoResponse> Parser { get { return _parser; } }

    private double energy_;
    /// <summary>
    ///当前精力值
    /// </summary>
    public double energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (energy != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(energy);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (energy != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            energy = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed class TimerState : pb::IMessage {
    private static readonly pb::MessageParser<TimerState> _parser = new pb::MessageParser<TimerState>(() => new TimerState());
    public static pb::MessageParser<TimerState> Parser { get { return _parser; } }

    private int timerId_;
    public int timerId {
      get { return timerId_; }
      set {
        timerId_ = value;
      }
    }

    private int state_;
    /// <summary>
    /// 1:不可领,2:可以领,3:已经领取
    /// </summary>
    public int state {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (timerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(timerId);
      }
      if (state != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(state);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (timerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(timerId);
      }
      if (state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(state);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            timerId = input.ReadInt32();
            break;
          }
          case 16: {
            state = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///精力值免费领取的timer id信息;
  /// </summary>
  public sealed class EnergyFreeGetInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<EnergyFreeGetInfoResponse> _parser = new pb::MessageParser<EnergyFreeGetInfoResponse>(() => new EnergyFreeGetInfoResponse());
    public static pb::MessageParser<EnergyFreeGetInfoResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::energy.TimerState> _repeated_timers_codec
        = pb::FieldCodec.ForMessage(10, global::energy.TimerState.Parser);
    private readonly pbc::RepeatedField<global::energy.TimerState> timers_ = new pbc::RepeatedField<global::energy.TimerState>();
    /// <summary>
    ///能领取的timerid s
    /// </summary>
    public pbc::RepeatedField<global::energy.TimerState> timers {
      get { return timers_; }
    }

    private bool hasChargeEnergy_;
    /// <summary>
    ///是否拥有充值领取
    /// </summary>
    public bool hasChargeEnergy {
      get { return hasChargeEnergy_; }
      set {
        hasChargeEnergy_ = value;
      }
    }

    private bool isGetChargeEnergy_;
    /// <summary>
    ///是否领取过
    /// </summary>
    public bool isGetChargeEnergy {
      get { return isGetChargeEnergy_; }
      set {
        isGetChargeEnergy_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      timers_.WriteTo(output, _repeated_timers_codec);
      if (hasChargeEnergy != false) {
        output.WriteRawTag(16);
        output.WriteBool(hasChargeEnergy);
      }
      if (isGetChargeEnergy != false) {
        output.WriteRawTag(24);
        output.WriteBool(isGetChargeEnergy);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += timers_.CalculateSize(_repeated_timers_codec);
      if (hasChargeEnergy != false) {
        size += 1 + 1;
      }
      if (isGetChargeEnergy != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            timers_.AddEntriesFrom(input, _repeated_timers_codec);
            break;
          }
          case 16: {
            hasChargeEnergy = input.ReadBool();
            break;
          }
          case 24: {
            isGetChargeEnergy = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取免费的精力值
  /// </summary>
  public sealed class GetFreeEnergyRequest : pb::IMessage {
    private static readonly pb::MessageParser<GetFreeEnergyRequest> _parser = new pb::MessageParser<GetFreeEnergyRequest>(() => new GetFreeEnergyRequest());
    public static pb::MessageParser<GetFreeEnergyRequest> Parser { get { return _parser; } }

    private int timerId_;
    public int timerId {
      get { return timerId_; }
      set {
        timerId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (timerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(timerId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (timerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(timerId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            timerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///精力值经验有变化通知;
  /// </summary>
  public sealed class NotifyEnergyChangeResponse : pb::IMessage {
    private static readonly pb::MessageParser<NotifyEnergyChangeResponse> _parser = new pb::MessageParser<NotifyEnergyChangeResponse>(() => new NotifyEnergyChangeResponse());
    public static pb::MessageParser<NotifyEnergyChangeResponse> Parser { get { return _parser; } }

    private double energy_;
    /// <summary>
    ///当前精力值
    /// </summary>
    public double energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (energy != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(energy);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (energy != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            energy = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed class EnergyExchangeInfo : pb::IMessage {
    private static readonly pb::MessageParser<EnergyExchangeInfo> _parser = new pb::MessageParser<EnergyExchangeInfo>(() => new EnergyExchangeInfo());
    public static pb::MessageParser<EnergyExchangeInfo> Parser { get { return _parser; } }

    private global::google.Int32Value maxExchangeTime_;
    /// <summary>
    ///最大兑换次数
    /// </summary>
    public global::google.Int32Value maxExchangeTime {
      get { return maxExchangeTime_; }
      set {
        maxExchangeTime_ = value;
      }
    }

    private global::google.Int32Value doneExchangeTimes_;
    /// <summary>
    ///已经兑换次数
    /// </summary>
    public global::google.Int32Value doneExchangeTimes {
      get { return doneExchangeTimes_; }
      set {
        doneExchangeTimes_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (maxExchangeTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(maxExchangeTime);
      }
      if (doneExchangeTimes_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(doneExchangeTimes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (maxExchangeTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(maxExchangeTime);
      }
      if (doneExchangeTimes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(doneExchangeTimes);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (maxExchangeTime_ == null) {
              maxExchangeTime_ = new global::google.Int32Value();
            }
            input.ReadMessage(maxExchangeTime_);
            break;
          }
          case 18: {
            if (doneExchangeTimes_ == null) {
              doneExchangeTimes_ = new global::google.Int32Value();
            }
            input.ReadMessage(doneExchangeTimes_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
