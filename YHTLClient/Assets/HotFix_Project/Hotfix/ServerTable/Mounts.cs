// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mounts.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace mounts {

  #region Messages
  /// <summary>
  ///坐骑信息
  /// </summary>
  public sealed class MountsBagInfo : pb::IMessage {
    private static readonly pb::MessageParser<MountsBagInfo> _parser = new pb::MessageParser<MountsBagInfo>(() => new MountsBagInfo());
    public static pb::MessageParser<MountsBagInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::mounts.MountsInfo> _repeated_mountsInfo_codec
        = pb::FieldCodec.ForMessage(10, global::mounts.MountsInfo.Parser);
    private readonly pbc::RepeatedField<global::mounts.MountsInfo> mountsInfo_ = new pbc::RepeatedField<global::mounts.MountsInfo>();
    public pbc::RepeatedField<global::mounts.MountsInfo> mountsInfo {
      get { return mountsInfo_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mountsInfo_.WriteTo(output, _repeated_mountsInfo_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += mountsInfo_.CalculateSize(_repeated_mountsInfo_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mountsInfo_.AddEntriesFrom(input, _repeated_mountsInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///坐骑
  /// </summary>
  public sealed class MountsInfo : pb::IMessage {
    private static readonly pb::MessageParser<MountsInfo> _parser = new pb::MessageParser<MountsInfo>(() => new MountsInfo());
    public static pb::MessageParser<MountsInfo> Parser { get { return _parser; } }

    private int mountsId_;
    /// <summary>
    ///坐骑id
    /// </summary>
    public int mountsId {
      get { return mountsId_; }
      set {
        mountsId_ = value;
      }
    }

    private int starLv_;
    /// <summary>
    ///等级
    /// </summary>
    public int starLv {
      get { return starLv_; }
      set {
        starLv_ = value;
      }
    }

    private long getTime_;
    /// <summary>
    ///获得的时间
    /// </summary>
    public long getTime {
      get { return getTime_; }
      set {
        getTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mountsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(mountsId);
      }
      if (starLv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(starLv);
      }
      if (getTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(getTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mountsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mountsId);
      }
      if (starLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(starLv);
      }
      if (getTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(getTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mountsId = input.ReadInt32();
            break;
          }
          case 16: {
            starLv = input.ReadInt32();
            break;
          }
          case 24: {
            getTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///升级请求
  /// </summary>
  public sealed class UpgradeMountRequest : pb::IMessage {
    private static readonly pb::MessageParser<UpgradeMountRequest> _parser = new pb::MessageParser<UpgradeMountRequest>(() => new UpgradeMountRequest());
    public static pb::MessageParser<UpgradeMountRequest> Parser { get { return _parser; } }

    private int mountsId_;
    /// <summary>
    ///坐骑id
    /// </summary>
    public int mountsId {
      get { return mountsId_; }
      set {
        mountsId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mountsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(mountsId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mountsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mountsId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mountsId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 更换坐骑请求，响应
  /// </summary>
  public sealed class ChangeMountMsg : pb::IMessage {
    private static readonly pb::MessageParser<ChangeMountMsg> _parser = new pb::MessageParser<ChangeMountMsg>(() => new ChangeMountMsg());
    public static pb::MessageParser<ChangeMountMsg> Parser { get { return _parser; } }

    private int mountsId_;
    /// <summary>
    ///坐骑id 
    /// </summary>
    public int mountsId {
      get { return mountsId_; }
      set {
        mountsId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mountsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(mountsId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mountsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mountsId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mountsId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///坐骑2 基本信息
  /// </summary>
  public sealed class Mounts2Info : pb::IMessage {
    private static readonly pb::MessageParser<Mounts2Info> _parser = new pb::MessageParser<Mounts2Info>(() => new Mounts2Info());
    public static pb::MessageParser<Mounts2Info> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///坐骑id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long endTime_;
    /// <summary>
    ///结束时间（0代表无限时间）
    /// </summary>
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (endTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(endTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            endTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///坐骑2所有信息
  /// </summary>
  public sealed class Mounts2BagInfo : pb::IMessage {
    private static readonly pb::MessageParser<Mounts2BagInfo> _parser = new pb::MessageParser<Mounts2BagInfo>(() => new Mounts2BagInfo());
    public static pb::MessageParser<Mounts2BagInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::mounts.Mounts2Info> _repeated_mounts2Info_codec
        = pb::FieldCodec.ForMessage(10, global::mounts.Mounts2Info.Parser);
    private readonly pbc::RepeatedField<global::mounts.Mounts2Info> mounts2Info_ = new pbc::RepeatedField<global::mounts.Mounts2Info>();
    /// <summary>
    ///所有坐骑信息
    /// </summary>
    public pbc::RepeatedField<global::mounts.Mounts2Info> mounts2Info {
      get { return mounts2Info_; }
    }

    private int blessValue_;
    /// <summary>
    ///普通坐骑祝福值
    /// </summary>
    public int blessValue {
      get { return blessValue_; }
      set {
        blessValue_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mounts2Info_.WriteTo(output, _repeated_mounts2Info_codec);
      if (blessValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(blessValue);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += mounts2Info_.CalculateSize(_repeated_mounts2Info_codec);
      if (blessValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(blessValue);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mounts2Info_.AddEntriesFrom(input, _repeated_mounts2Info_codec);
            break;
          }
          case 16: {
            blessValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 坐骑2, 请求上下马（0下马， 否则上马）
  /// </summary>
  public sealed class ChangeMount2Req : pb::IMessage {
    private static readonly pb::MessageParser<ChangeMount2Req> _parser = new pb::MessageParser<ChangeMount2Req>(() => new ChangeMount2Req());
    public static pb::MessageParser<ChangeMount2Req> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///坐骑id 
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 坐骑2, 马更换通知
  /// </summary>
  public sealed class ChangeMount2Ntf : pb::IMessage {
    private static readonly pb::MessageParser<ChangeMount2Ntf> _parser = new pb::MessageParser<ChangeMount2Ntf>(() => new ChangeMount2Ntf());
    public static pb::MessageParser<ChangeMount2Ntf> Parser { get { return _parser; } }

    private int idBefore_;
    /// <summary>
    ///之前骑的马ID（0代表未骑）
    /// </summary>
    public int idBefore {
      get { return idBefore_; }
      set {
        idBefore_ = value;
      }
    }

    private int idNow_;
    /// <summary>
    ///现在骑的马ID
    /// </summary>
    public int idNow {
      get { return idNow_; }
      set {
        idNow_ = value;
      }
    }

    private long id_;
    /// <summary>
    ///变更马的角色id
    /// </summary>
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (idBefore != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(idBefore);
      }
      if (idNow != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(idNow);
      }
      if (id != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (idBefore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(idBefore);
      }
      if (idNow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(idNow);
      }
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            idBefore = input.ReadInt32();
            break;
          }
          case 16: {
            idNow = input.ReadInt32();
            break;
          }
          case 24: {
            id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 坐骑2, 请求获得一个坐骑
  /// </summary>
  public sealed class GetMount2Req : pb::IMessage {
    private static readonly pb::MessageParser<GetMount2Req> _parser = new pb::MessageParser<GetMount2Req>(() => new GetMount2Req());
    public static pb::MessageParser<GetMount2Req> Parser { get { return _parser; } }

    private int id_;
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int activeIndex_;
    /// <summary>
    ///激活下标， unlockItem表里，第几种方式, 0代表默认第1种，以此类推
    /// </summary>
    public int activeIndex {
      get { return activeIndex_; }
      set {
        activeIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (activeIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(activeIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (activeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(activeIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            activeIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 坐骑2, 获得一个坐骑通知
  /// </summary>
  public sealed class GetMount2Ntf : pb::IMessage {
    private static readonly pb::MessageParser<GetMount2Ntf> _parser = new pb::MessageParser<GetMount2Ntf>(() => new GetMount2Ntf());
    public static pb::MessageParser<GetMount2Ntf> Parser { get { return _parser; } }

    private global::mounts.Mounts2Info mount_;
    public global::mounts.Mounts2Info mount {
      get { return mount_; }
      set {
        mount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mount_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(mount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(mount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mount_ == null) {
              mount_ = new global::mounts.Mounts2Info();
            }
            input.ReadMessage(mount_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 坐骑2, 失去一个坐骑通知
  /// </summary>
  public sealed class LoseMount2Ntf : pb::IMessage {
    private static readonly pb::MessageParser<LoseMount2Ntf> _parser = new pb::MessageParser<LoseMount2Ntf>(() => new LoseMount2Ntf());
    public static pb::MessageParser<LoseMount2Ntf> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///失去坐骑的id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 坐骑2, 坐骑祝福值变更通知
  /// </summary>
  public sealed class Mount2BlessNtf : pb::IMessage {
    private static readonly pb::MessageParser<Mount2BlessNtf> _parser = new pb::MessageParser<Mount2BlessNtf>(() => new Mount2BlessNtf());
    public static pb::MessageParser<Mount2BlessNtf> Parser { get { return _parser; } }

    private bool levelUp_;
    /// <summary>
    ///是否升级（祝福值满，自动升级）
    /// </summary>
    public bool levelUp {
      get { return levelUp_; }
      set {
        levelUp_ = value;
      }
    }

    private int blessValue_;
    /// <summary>
    ///普通坐骑祝福值变更当前值
    /// </summary>
    public int blessValue {
      get { return blessValue_; }
      set {
        blessValue_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (levelUp != false) {
        output.WriteRawTag(8);
        output.WriteBool(levelUp);
      }
      if (blessValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(blessValue);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (levelUp != false) {
        size += 1 + 1;
      }
      if (blessValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(blessValue);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            levelUp = input.ReadBool();
            break;
          }
          case 16: {
            blessValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获得新坐骑显示通知
  /// </summary>
  public sealed class Mount2ShowNtf : pb::IMessage {
    private static readonly pb::MessageParser<Mount2ShowNtf> _parser = new pb::MessageParser<Mount2ShowNtf>(() => new Mount2ShowNtf());
    public static pb::MessageParser<Mount2ShowNtf> Parser { get { return _parser; } }

    private int mountId_;
    /// <summary>
    ///坐骑id
    /// </summary>
    public int mountId {
      get { return mountId_; }
      set {
        mountId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mountId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(mountId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mountId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mountId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///踏痕 基本信息
  /// </summary>
  public sealed class TaHenInfo : pb::IMessage {
    private static readonly pb::MessageParser<TaHenInfo> _parser = new pb::MessageParser<TaHenInfo>(() => new TaHenInfo());
    public static pb::MessageParser<TaHenInfo> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///踏痕id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long endTime_;
    /// <summary>
    ///结束时间（0代表无限时间）
    /// </summary>
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (endTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(endTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            endTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///踏痕 所有信息
  /// </summary>
  public sealed class TaHenAllInfo : pb::IMessage {
    private static readonly pb::MessageParser<TaHenAllInfo> _parser = new pb::MessageParser<TaHenAllInfo>(() => new TaHenAllInfo());
    public static pb::MessageParser<TaHenAllInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::mounts.TaHenInfo> _repeated_taHenInfo_codec
        = pb::FieldCodec.ForMessage(10, global::mounts.TaHenInfo.Parser);
    private readonly pbc::RepeatedField<global::mounts.TaHenInfo> taHenInfo_ = new pbc::RepeatedField<global::mounts.TaHenInfo>();
    /// <summary>
    ///所有坐骑信息
    /// </summary>
    public pbc::RepeatedField<global::mounts.TaHenInfo> taHenInfo {
      get { return taHenInfo_; }
    }

    private int currentTaHenId_;
    /// <summary>
    ///当前使用的踏痕id
    /// </summary>
    public int currentTaHenId {
      get { return currentTaHenId_; }
      set {
        currentTaHenId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      taHenInfo_.WriteTo(output, _repeated_taHenInfo_codec);
      if (currentTaHenId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(currentTaHenId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += taHenInfo_.CalculateSize(_repeated_taHenInfo_codec);
      if (currentTaHenId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(currentTaHenId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            taHenInfo_.AddEntriesFrom(input, _repeated_taHenInfo_codec);
            break;
          }
          case 16: {
            currentTaHenId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 踏痕 请求使用（0不使用， 否则使用踏痕id）, 使用后会刷新所有踏痕信息
  /// </summary>
  public sealed class UseTaHenReq : pb::IMessage {
    private static readonly pb::MessageParser<UseTaHenReq> _parser = new pb::MessageParser<UseTaHenReq>(() => new UseTaHenReq());
    public static pb::MessageParser<UseTaHenReq> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///踏痕id 
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 踏痕, 请求获得一个踏痕
  /// </summary>
  public sealed class GetTaHenReq : pb::IMessage {
    private static readonly pb::MessageParser<GetTaHenReq> _parser = new pb::MessageParser<GetTaHenReq>(() => new GetTaHenReq());
    public static pb::MessageParser<GetTaHenReq> Parser { get { return _parser; } }

    private int id_;
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 踏痕, 获得一个踏痕通知
  /// </summary>
  public sealed class GetTaHenNtf : pb::IMessage {
    private static readonly pb::MessageParser<GetTaHenNtf> _parser = new pb::MessageParser<GetTaHenNtf>(() => new GetTaHenNtf());
    public static pb::MessageParser<GetTaHenNtf> Parser { get { return _parser; } }

    private global::mounts.TaHenInfo taHen_;
    public global::mounts.TaHenInfo taHen {
      get { return taHen_; }
      set {
        taHen_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (taHen_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(taHen);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (taHen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(taHen);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (taHen_ == null) {
              taHen_ = new global::mounts.TaHenInfo();
            }
            input.ReadMessage(taHen_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 踏痕, 失去一个踏痕通知
  /// </summary>
  public sealed class LoseTaHenNtf : pb::IMessage {
    private static readonly pb::MessageParser<LoseTaHenNtf> _parser = new pb::MessageParser<LoseTaHenNtf>(() => new LoseTaHenNtf());
    public static pb::MessageParser<LoseTaHenNtf> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///失去踏痕的id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 新坐骑升星请求
  /// </summary>
  public sealed class Mount2AddStarReq : pb::IMessage {
    private static readonly pb::MessageParser<Mount2AddStarReq> _parser = new pb::MessageParser<Mount2AddStarReq>(() => new Mount2AddStarReq());
    public static pb::MessageParser<Mount2AddStarReq> Parser { get { return _parser; } }

    private int mountId_;
    /// <summary>
    ///坐骑id
    /// </summary>
    public int mountId {
      get { return mountId_; }
      set {
        mountId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mountId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(mountId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mountId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mountId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 新坐骑升星刷新协议
  /// </summary>
  public sealed class Mount2AddStarNtf : pb::IMessage {
    private static readonly pb::MessageParser<Mount2AddStarNtf> _parser = new pb::MessageParser<Mount2AddStarNtf>(() => new Mount2AddStarNtf());
    public static pb::MessageParser<Mount2AddStarNtf> Parser { get { return _parser; } }

    private global::mounts.Mount2StarItem mount2StarItem_;
    /// <summary>
    ///刷新的坐骑星级等信息
    /// </summary>
    public global::mounts.Mount2StarItem mount2StarItem {
      get { return mount2StarItem_; }
      set {
        mount2StarItem_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mount2StarItem_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(mount2StarItem);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mount2StarItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(mount2StarItem);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mount2StarItem_ == null) {
              mount2StarItem_ = new global::mounts.Mount2StarItem();
            }
            input.ReadMessage(mount2StarItem_);
            break;
          }
        }
      }
    }

  }

  public sealed class Mount2StarItem : pb::IMessage {
    private static readonly pb::MessageParser<Mount2StarItem> _parser = new pb::MessageParser<Mount2StarItem>(() => new Mount2StarItem());
    public static pb::MessageParser<Mount2StarItem> Parser { get { return _parser; } }

    private int mountId_;
    public int mountId {
      get { return mountId_; }
      set {
        mountId_ = value;
      }
    }

    private int star_;
    /// <summary>
    ///坐骑星级
    /// </summary>
    public int star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mountId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(mountId);
      }
      if (star != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(star);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mountId);
      }
      if (star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(star);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mountId = input.ReadInt32();
            break;
          }
          case 16: {
            star = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class Mount2StarAllInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<Mount2StarAllInfoNtf> _parser = new pb::MessageParser<Mount2StarAllInfoNtf>(() => new Mount2StarAllInfoNtf());
    public static pb::MessageParser<Mount2StarAllInfoNtf> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::mounts.Mount2StarItem> _repeated_allMount2StarItem_codec
        = pb::FieldCodec.ForMessage(10, global::mounts.Mount2StarItem.Parser);
    private readonly pbc::RepeatedField<global::mounts.Mount2StarItem> allMount2StarItem_ = new pbc::RepeatedField<global::mounts.Mount2StarItem>();
    /// <summary>
    ///所有坐骑星级列表
    /// </summary>
    public pbc::RepeatedField<global::mounts.Mount2StarItem> allMount2StarItem {
      get { return allMount2StarItem_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      allMount2StarItem_.WriteTo(output, _repeated_allMount2StarItem_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += allMount2StarItem_.CalculateSize(_repeated_allMount2StarItem_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            allMount2StarItem_.AddEntriesFrom(input, _repeated_allMount2StarItem_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
