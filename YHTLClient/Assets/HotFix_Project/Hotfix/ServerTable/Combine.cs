// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Combine.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace combine {

  #region Messages
  /// <summary>
  ///合成请求
  /// </summary>
  public sealed class CombineItemRequest : pb::IMessage {
    private static readonly pb::MessageParser<CombineItemRequest> _parser = new pb::MessageParser<CombineItemRequest>(() => new CombineItemRequest());
    public static pb::MessageParser<CombineItemRequest> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///合成表唯一id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int times_;
    /// <summary>
    ///合成次数
    /// </summary>
    public int times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(times);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(times);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            times = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///合成响应
  /// </summary>
  public sealed class CombineItemResponse : pb::IMessage {
    private static readonly pb::MessageParser<CombineItemResponse> _parser = new pb::MessageParser<CombineItemResponse>(() => new CombineItemResponse());
    public static pb::MessageParser<CombineItemResponse> Parser { get { return _parser; } }

    private int itemId_;
    /// <summary>
    ///合成的道具ID
    /// </summary>
    public int itemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int itemNum_;
    /// <summary>
    ///合成的道具数量
    /// </summary>
    public int itemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (itemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(itemId);
      }
      if (itemNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(itemNum);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (itemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(itemId);
      }
      if (itemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(itemNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemId = input.ReadInt32();
            break;
          }
          case 16: {
            itemNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
