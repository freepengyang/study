// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mail.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace mail {

  #region Messages
  public sealed class MailInfo : pb::IMessage {
    private static readonly pb::MessageParser<MailInfo> _parser = new pb::MessageParser<MailInfo>(() => new MailInfo());
    public static pb::MessageParser<MailInfo> Parser { get { return _parser; } }

    private long mailId_;
    public long mailId {
      get { return mailId_; }
      set {
        mailId_ = value;
      }
    }

    private string title_ = "";
    /// <summary>
    ///标题
    /// </summary>
    public string title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string content_ = "";
    /// <summary>
    ///内容
    /// </summary>
    public string content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string from_ = "";
    /// <summary>
    ///发件人
    /// </summary>
    public string from {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long sendTime_;
    /// <summary>
    ///发件时间戳
    /// </summary>
    public long sendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    private string items_ = "";
    /// <summary>
    ///物品,格式 configId#数量#限时(秒数)#强化等级#注灵;configId#count#限时(秒数)#强化等级#注灵
    /// </summary>
    public string items {
      get { return items_; }
      set {
        items_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int state_;
    /// <summary>
    ///0未读 1已读 2已提取物品
    /// </summary>
    public int state {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mailId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(mailId);
      }
      if (title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(title);
      }
      if (content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(content);
      }
      if (from.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(from);
      }
      if (sendTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(sendTime);
      }
      if (items.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(items);
      }
      if (state != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(state);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mailId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(mailId);
      }
      if (title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(title);
      }
      if (content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(content);
      }
      if (from.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(from);
      }
      if (sendTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(sendTime);
      }
      if (items.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(items);
      }
      if (state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(state);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mailId = input.ReadInt64();
            break;
          }
          case 18: {
            title = input.ReadString();
            break;
          }
          case 26: {
            content = input.ReadString();
            break;
          }
          case 34: {
            from = input.ReadString();
            break;
          }
          case 40: {
            sendTime = input.ReadInt64();
            break;
          }
          case 50: {
            items = input.ReadString();
            break;
          }
          case 56: {
            state = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class MailList : pb::IMessage {
    private static readonly pb::MessageParser<MailList> _parser = new pb::MessageParser<MailList>(() => new MailList());
    public static pb::MessageParser<MailList> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::mail.MailInfo> _repeated_mails_codec
        = pb::FieldCodec.ForMessage(10, global::mail.MailInfo.Parser);
    private readonly pbc::RepeatedField<global::mail.MailInfo> mails_ = new pbc::RepeatedField<global::mail.MailInfo>();
    public pbc::RepeatedField<global::mail.MailInfo> mails {
      get { return mails_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mails_.WriteTo(output, _repeated_mails_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += mails_.CalculateSize(_repeated_mails_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mails_.AddEntriesFrom(input, _repeated_mails_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class MailIdMsg : pb::IMessage {
    private static readonly pb::MessageParser<MailIdMsg> _parser = new pb::MessageParser<MailIdMsg>(() => new MailIdMsg());
    public static pb::MessageParser<MailIdMsg> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<long> _repeated_mailIds_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> mailIds_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> mailIds {
      get { return mailIds_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mailIds_.WriteTo(output, _repeated_mailIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += mailIds_.CalculateSize(_repeated_mailIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            mailIds_.AddEntriesFrom(input, _repeated_mailIds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
