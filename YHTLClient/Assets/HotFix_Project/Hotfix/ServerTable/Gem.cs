// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gem.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace gem {

  #region Messages
  public sealed class EquipGem : pb::IMessage {
    private static readonly pb::MessageParser<EquipGem> _parser = new pb::MessageParser<EquipGem>(() => new EquipGem());
    public static pb::MessageParser<EquipGem> Parser { get { return _parser; } }

    private int subType_;
    /// <summary>
    ///位置
    /// </summary>
    public int subType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    private int pos_;
    /// <summary>
    ///宝石位置
    /// </summary>
    public int pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    private int bagIndex_;
    /// <summary>
    ///背包里的宝石位置编号，用于将背包里的宝石穿戴到身上
    /// </summary>
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (subType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(subType);
      }
      if (pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(pos);
      }
      if (bagIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(bagIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (subType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(subType);
      }
      if (pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(pos);
      }
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            subType = input.ReadInt32();
            break;
          }
          case 16: {
            pos = input.ReadInt32();
            break;
          }
          case 24: {
            bagIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PosGemChange : pb::IMessage {
    private static readonly pb::MessageParser<PosGemChange> _parser = new pb::MessageParser<PosGemChange>(() => new PosGemChange());
    public static pb::MessageParser<PosGemChange> Parser { get { return _parser; } }

    private int subType_;
    /// <summary>
    ///位置
    /// </summary>
    public int subType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    private int pos_;
    /// <summary>
    ///宝石位置
    /// </summary>
    public int pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    private int gemId_;
    /// <summary>
    ///宝石ID
    /// </summary>
    public int gemId {
      get { return gemId_; }
      set {
        gemId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (subType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(subType);
      }
      if (pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(pos);
      }
      if (gemId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(gemId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (subType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(subType);
      }
      if (pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(pos);
      }
      if (gemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(gemId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            subType = input.ReadInt32();
            break;
          }
          case 16: {
            pos = input.ReadInt32();
            break;
          }
          case 24: {
            gemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class UpgradePosGem : pb::IMessage {
    private static readonly pb::MessageParser<UpgradePosGem> _parser = new pb::MessageParser<UpgradePosGem>(() => new UpgradePosGem());
    public static pb::MessageParser<UpgradePosGem> Parser { get { return _parser; } }

    private int subType_;
    /// <summary>
    ///位置
    /// </summary>
    public int subType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    private int pos_;
    /// <summary>
    ///宝石位置
    /// </summary>
    public int pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (subType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(subType);
      }
      if (pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(pos);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (subType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(subType);
      }
      if (pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(pos);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            subType = input.ReadInt32();
            break;
          }
          case 16: {
            pos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PosGemInfo : pb::IMessage {
    private static readonly pb::MessageParser<PosGemInfo> _parser = new pb::MessageParser<PosGemInfo>(() => new PosGemInfo());
    public static pb::MessageParser<PosGemInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::gem.GemInfo> _repeated_gemInfo_codec
        = pb::FieldCodec.ForMessage(10, global::gem.GemInfo.Parser);
    private readonly pbc::RepeatedField<global::gem.GemInfo> gemInfo_ = new pbc::RepeatedField<global::gem.GemInfo>();
    /// <summary>
    ///宝石信息
    /// </summary>
    public pbc::RepeatedField<global::gem.GemInfo> gemInfo {
      get { return gemInfo_; }
    }

    private int unlockingPosition_;
    /// <summary>
    ///当前待解锁的位置
    /// </summary>
    public int unlockingPosition {
      get { return unlockingPosition_; }
      set {
        unlockingPosition_ = value;
      }
    }

    private int bossCounter_;
    /// <summary>
    ///当前解锁位置的boss计数
    /// </summary>
    public int bossCounter {
      get { return bossCounter_; }
      set {
        bossCounter_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      gemInfo_.WriteTo(output, _repeated_gemInfo_codec);
      if (unlockingPosition != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(unlockingPosition);
      }
      if (bossCounter != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(bossCounter);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += gemInfo_.CalculateSize(_repeated_gemInfo_codec);
      if (unlockingPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(unlockingPosition);
      }
      if (bossCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bossCounter);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            gemInfo_.AddEntriesFrom(input, _repeated_gemInfo_codec);
            break;
          }
          case 16: {
            unlockingPosition = input.ReadInt32();
            break;
          }
          case 24: {
            bossCounter = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GemInfo : pb::IMessage {
    private static readonly pb::MessageParser<GemInfo> _parser = new pb::MessageParser<GemInfo>(() => new GemInfo());
    public static pb::MessageParser<GemInfo> Parser { get { return _parser; } }

    private int subType_;
    /// <summary>
    ///位置
    /// </summary>
    public int subType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    private int pos_;
    /// <summary>
    ///宝石位置
    /// </summary>
    public int pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    private int gemId_;
    /// <summary>
    ///宝石ID
    /// </summary>
    public int gemId {
      get { return gemId_; }
      set {
        gemId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (subType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(subType);
      }
      if (pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(pos);
      }
      if (gemId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(gemId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (subType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(subType);
      }
      if (pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(pos);
      }
      if (gemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(gemId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            subType = input.ReadInt32();
            break;
          }
          case 16: {
            pos = input.ReadInt32();
            break;
          }
          case 24: {
            gemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class UnlockGemPosition : pb::IMessage {
    private static readonly pb::MessageParser<UnlockGemPosition> _parser = new pb::MessageParser<UnlockGemPosition>(() => new UnlockGemPosition());
    public static pb::MessageParser<UnlockGemPosition> Parser { get { return _parser; } }

    private int unlockingPosition_;
    /// <summary>
    ///当前已解锁的位置
    /// </summary>
    public int unlockingPosition {
      get { return unlockingPosition_; }
      set {
        unlockingPosition_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (unlockingPosition != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(unlockingPosition);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (unlockingPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(unlockingPosition);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            unlockingPosition = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GemSuit : pb::IMessage {
    private static readonly pb::MessageParser<GemSuit> _parser = new pb::MessageParser<GemSuit>(() => new GemSuit());
    public static pb::MessageParser<GemSuit> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::gem.PosGemSuit> _repeated_sutis_codec
        = pb::FieldCodec.ForMessage(10, global::gem.PosGemSuit.Parser);
    private readonly pbc::RepeatedField<global::gem.PosGemSuit> sutis_ = new pbc::RepeatedField<global::gem.PosGemSuit>();
    /// <summary>
    ///每个位置的套装id
    /// </summary>
    public pbc::RepeatedField<global::gem.PosGemSuit> sutis {
      get { return sutis_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      sutis_.WriteTo(output, _repeated_sutis_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += sutis_.CalculateSize(_repeated_sutis_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sutis_.AddEntriesFrom(input, _repeated_sutis_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class PosGemSuit : pb::IMessage {
    private static readonly pb::MessageParser<PosGemSuit> _parser = new pb::MessageParser<PosGemSuit>(() => new PosGemSuit());
    public static pb::MessageParser<PosGemSuit> Parser { get { return _parser; } }

    private int pos_;
    /// <summary>
    ///位置
    /// </summary>
    public int pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    private int configId_;
    /// <summary>
    ///配置表id
    /// </summary>
    public int configId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(pos);
      }
      if (configId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(configId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(pos);
      }
      if (configId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(configId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pos = input.ReadInt32();
            break;
          }
          case 16: {
            configId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GemBossCountChange : pb::IMessage {
    private static readonly pb::MessageParser<GemBossCountChange> _parser = new pb::MessageParser<GemBossCountChange>(() => new GemBossCountChange());
    public static pb::MessageParser<GemBossCountChange> Parser { get { return _parser; } }

    private int bossCounter_;
    /// <summary>
    ///当前解锁位置的boss计数
    /// </summary>
    public int bossCounter {
      get { return bossCounter_; }
      set {
        bossCounter_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bossCounter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(bossCounter);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bossCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bossCounter);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bossCounter = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
