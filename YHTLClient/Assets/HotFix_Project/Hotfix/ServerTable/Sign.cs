// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sign.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace sign {

  #region Messages
  public sealed class CardInfo : pb::IMessage {
    private static readonly pb::MessageParser<CardInfo> _parser = new pb::MessageParser<CardInfo>(() => new CardInfo());
    public static pb::MessageParser<CardInfo> Parser { get { return _parser; } }

    private int card_;
    /// <summary>
    /// 卡片
    /// </summary>
    public int card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_cardNotGet_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> cardNotGet_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 未获得的5张卡片
    /// </summary>
    public pbc::RepeatedField<int> cardNotGet {
      get { return cardNotGet_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (card != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(card);
      }
      cardNotGet_.WriteTo(output, _repeated_cardNotGet_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(card);
      }
      size += cardNotGet_.CalculateSize(_repeated_cardNotGet_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            card = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cardNotGet_.AddEntriesFrom(input, _repeated_cardNotGet_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SignInfo : pb::IMessage {
    private static readonly pb::MessageParser<SignInfo> _parser = new pb::MessageParser<SignInfo>(() => new SignInfo());
    public static pb::MessageParser<SignInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::sign.SignCard> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::sign.SignCard.Parser);
    private readonly pbc::RepeatedField<global::sign.SignCard> cards_ = new pbc::RepeatedField<global::sign.SignCard>();
    /// <summary>
    /// 卡片
    /// </summary>
    public pbc::RepeatedField<global::sign.SignCard> cards {
      get { return cards_; }
    }

    private static readonly pb::FieldCodec<global::sign.SignCard> _repeated_masterCards_codec
        = pb::FieldCodec.ForMessage(18, global::sign.SignCard.Parser);
    private readonly pbc::RepeatedField<global::sign.SignCard> masterCards_ = new pbc::RepeatedField<global::sign.SignCard>();
    /// <summary>
    /// 万能卡
    /// </summary>
    public pbc::RepeatedField<global::sign.SignCard> masterCards {
      get { return masterCards_; }
    }

    private int capacity_;
    /// <summary>
    /// 容量
    /// </summary>
    public int capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::sign.SignHonor> _repeated_honors_codec
        = pb::FieldCodec.ForMessage(34, global::sign.SignHonor.Parser);
    private readonly pbc::RepeatedField<global::sign.SignHonor> honors_ = new pbc::RepeatedField<global::sign.SignHonor>();
    /// <summary>
    /// 成就数据
    /// </summary>
    public pbc::RepeatedField<global::sign.SignHonor> honors {
      get { return honors_; }
    }

    private int fragment_;
    /// <summary>
    /// 碎片
    /// </summary>
    public int fragment {
      get { return fragment_; }
      set {
        fragment_ = value;
      }
    }

    private long lastCardTime_;
    /// <summary>
    /// 上次抽卡时间
    /// </summary>
    public long lastCardTime {
      get { return lastCardTime_; }
      set {
        lastCardTime_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_lockIds_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> lockIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 锁列表
    /// </summary>
    public pbc::RepeatedField<int> lockIds {
      get { return lockIds_; }
    }

    private int todayExchangeCount_;
    /// <summary>
    /// 今日兑换次数
    /// </summary>
    public int todayExchangeCount {
      get { return todayExchangeCount_; }
      set {
        todayExchangeCount_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_collection_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> collection_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已达成的组合
    /// </summary>
    public pbc::RepeatedField<int> collection {
      get { return collection_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      masterCards_.WriteTo(output, _repeated_masterCards_codec);
      if (capacity != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(capacity);
      }
      honors_.WriteTo(output, _repeated_honors_codec);
      if (fragment != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(fragment);
      }
      if (lastCardTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(lastCardTime);
      }
      lockIds_.WriteTo(output, _repeated_lockIds_codec);
      if (todayExchangeCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(todayExchangeCount);
      }
      collection_.WriteTo(output, _repeated_collection_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += masterCards_.CalculateSize(_repeated_masterCards_codec);
      if (capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(capacity);
      }
      size += honors_.CalculateSize(_repeated_honors_codec);
      if (fragment != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(fragment);
      }
      if (lastCardTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(lastCardTime);
      }
      size += lockIds_.CalculateSize(_repeated_lockIds_codec);
      if (todayExchangeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(todayExchangeCount);
      }
      size += collection_.CalculateSize(_repeated_collection_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 18: {
            masterCards_.AddEntriesFrom(input, _repeated_masterCards_codec);
            break;
          }
          case 24: {
            capacity = input.ReadInt32();
            break;
          }
          case 34: {
            honors_.AddEntriesFrom(input, _repeated_honors_codec);
            break;
          }
          case 40: {
            fragment = input.ReadInt32();
            break;
          }
          case 48: {
            lastCardTime = input.ReadInt64();
            break;
          }
          case 58:
          case 56: {
            lockIds_.AddEntriesFrom(input, _repeated_lockIds_codec);
            break;
          }
          case 64: {
            todayExchangeCount = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            collection_.AddEntriesFrom(input, _repeated_collection_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SignHonor : pb::IMessage {
    private static readonly pb::MessageParser<SignHonor> _parser = new pb::MessageParser<SignHonor>(() => new SignHonor());
    public static pb::MessageParser<SignHonor> Parser { get { return _parser; } }

    private int honorId_;
    /// <summary>
    /// 成就ID
    /// </summary>
    public int honorId {
      get { return honorId_; }
      set {
        honorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_honorRequres_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> honorRequres_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 成就需求
    /// </summary>
    public pbc::RepeatedField<int> honorRequres {
      get { return honorRequres_; }
    }

    private int reward_;
    /// <summary>
    /// 是否领奖
    /// </summary>
    public int reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (honorId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(honorId);
      }
      honorRequres_.WriteTo(output, _repeated_honorRequres_codec);
      if (reward != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(reward);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (honorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(honorId);
      }
      size += honorRequres_.CalculateSize(_repeated_honorRequres_codec);
      if (reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(reward);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            honorId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            honorRequres_.AddEntriesFrom(input, _repeated_honorRequres_codec);
            break;
          }
          case 24: {
            reward = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CardChange : pb::IMessage {
    private static readonly pb::MessageParser<CardChange> _parser = new pb::MessageParser<CardChange>(() => new CardChange());
    public static pb::MessageParser<CardChange> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::sign.SignCard> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::sign.SignCard.Parser);
    private readonly pbc::RepeatedField<global::sign.SignCard> cards_ = new pbc::RepeatedField<global::sign.SignCard>();
    /// <summary>
    /// 变化卡牌
    /// </summary>
    public pbc::RepeatedField<global::sign.SignCard> cards {
      get { return cards_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SignCard : pb::IMessage {
    private static readonly pb::MessageParser<SignCard> _parser = new pb::MessageParser<SignCard>(() => new SignCard());
    public static pb::MessageParser<SignCard> Parser { get { return _parser; } }

    private long lid_;
    public long lid {
      get { return lid_; }
      set {
        lid_ = value;
      }
    }

    private int cardId_;
    public int cardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    private int count_;
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (lid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(lid);
      }
      if (cardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(cardId);
      }
      if (count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (lid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(lid);
      }
      if (cardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(cardId);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            lid = input.ReadInt64();
            break;
          }
          case 16: {
            cardId = input.ReadInt32();
            break;
          }
          case 24: {
            count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SignCompose : pb::IMessage {
    private static readonly pb::MessageParser<SignCompose> _parser = new pb::MessageParser<SignCompose>(() => new SignCompose());
    public static pb::MessageParser<SignCompose> Parser { get { return _parser; } }

    private int composeId_;
    public int composeId {
      get { return composeId_; }
      set {
        composeId_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_lids_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> lids_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 吃掉的卡片
    /// </summary>
    public pbc::RepeatedField<long> lids {
      get { return lids_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (composeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(composeId);
      }
      lids_.WriteTo(output, _repeated_lids_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (composeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(composeId);
      }
      size += lids_.CalculateSize(_repeated_lids_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            composeId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            lids_.AddEntriesFrom(input, _repeated_lids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SignFragment : pb::IMessage {
    private static readonly pb::MessageParser<SignFragment> _parser = new pb::MessageParser<SignFragment>(() => new SignFragment());
    public static pb::MessageParser<SignFragment> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<long> _repeated_lids_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> lids_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 吃掉的卡片
    /// </summary>
    public pbc::RepeatedField<long> lids {
      get { return lids_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      lids_.WriteTo(output, _repeated_lids_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += lids_.CalculateSize(_repeated_lids_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            lids_.AddEntriesFrom(input, _repeated_lids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class FragmentChange : pb::IMessage {
    private static readonly pb::MessageParser<FragmentChange> _parser = new pb::MessageParser<FragmentChange>(() => new FragmentChange());
    public static pb::MessageParser<FragmentChange> Parser { get { return _parser; } }

    private int fragment_;
    /// <summary>
    /// 碎片
    /// </summary>
    public int fragment {
      get { return fragment_; }
      set {
        fragment_ = value;
      }
    }

    private int todayExchangeCount_;
    /// <summary>
    /// 今日兑换次数
    /// </summary>
    public int todayExchangeCount {
      get { return todayExchangeCount_; }
      set {
        todayExchangeCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (fragment != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(fragment);
      }
      if (todayExchangeCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(todayExchangeCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (fragment != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(fragment);
      }
      if (todayExchangeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(todayExchangeCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            fragment = input.ReadInt32();
            break;
          }
          case 16: {
            todayExchangeCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class LockCard : pb::IMessage {
    private static readonly pb::MessageParser<LockCard> _parser = new pb::MessageParser<LockCard>(() => new LockCard());
    public static pb::MessageParser<LockCard> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_cardGroups_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cardGroups_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 锁定
    /// </summary>
    public pbc::RepeatedField<int> cardGroups {
      get { return cardGroups_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      cardGroups_.WriteTo(output, _repeated_cardGroups_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += cardGroups_.CalculateSize(_repeated_cardGroups_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            cardGroups_.AddEntriesFrom(input, _repeated_cardGroups_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SignAchievement : pb::IMessage {
    private static readonly pb::MessageParser<SignAchievement> _parser = new pb::MessageParser<SignAchievement>(() => new SignAchievement());
    public static pb::MessageParser<SignAchievement> Parser { get { return _parser; } }

    private int honorId_;
    /// <summary>
    /// 成就ID
    /// </summary>
    public int honorId {
      get { return honorId_; }
      set {
        honorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (honorId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(honorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (honorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(honorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            honorId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ResFinalSignReward : pb::IMessage {
    private static readonly pb::MessageParser<ResFinalSignReward> _parser = new pb::MessageParser<ResFinalSignReward>(() => new ResFinalSignReward());
    public static pb::MessageParser<ResFinalSignReward> Parser { get { return _parser; } }

    private int day_;
    /// <summary>
    /// 天数
    /// </summary>
    public int day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    private int count_;
    /// <summary>
    /// 达成次数
    /// </summary>
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private int fragmentCount_;
    /// <summary>
    /// 碎片兑换次数
    /// </summary>
    public int fragmentCount {
      get { return fragmentCount_; }
      set {
        fragmentCount_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(34, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> rewards_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    /// <summary>
    /// 奖励
    /// </summary>
    public pbc::RepeatedField<global::bag.BagItemInfo> rewards {
      get { return rewards_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (day != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(day);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
      if (fragmentCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(fragmentCount);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(day);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (fragmentCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(fragmentCount);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            day = input.ReadInt32();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
          case 24: {
            fragmentCount = input.ReadInt32();
            break;
          }
          case 34: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CollectionChange : pb::IMessage {
    private static readonly pb::MessageParser<CollectionChange> _parser = new pb::MessageParser<CollectionChange>(() => new CollectionChange());
    public static pb::MessageParser<CollectionChange> Parser { get { return _parser; } }

    private int collection_;
    /// <summary>
    /// 已达成的组合
    /// </summary>
    public int collection {
      get { return collection_; }
      set {
        collection_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (collection != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(collection);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (collection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(collection);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            collection = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class HonorChange : pb::IMessage {
    private static readonly pb::MessageParser<HonorChange> _parser = new pb::MessageParser<HonorChange>(() => new HonorChange());
    public static pb::MessageParser<HonorChange> Parser { get { return _parser; } }

    private global::sign.SignHonor honor_;
    /// <summary>
    /// 成就数据变化
    /// </summary>
    public global::sign.SignHonor honor {
      get { return honor_; }
      set {
        honor_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (honor_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(honor);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (honor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(honor);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (honor_ == null) {
              honor_ = new global::sign.SignHonor();
            }
            input.ReadMessage(honor_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
