// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tip.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace tip {

  #region Messages
  public sealed class TipResponse : pb::IMessage {
    private static readonly pb::MessageParser<TipResponse> _parser = new pb::MessageParser<TipResponse>(() => new TipResponse());
    public static pb::MessageParser<TipResponse> Parser { get { return _parser; } }

    private string msg_ = "";
    /// <summary>
    ///提示信息
    /// </summary>
    public string msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int type_;
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(msg);
      }
      if (type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(msg);
      }
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            msg = input.ReadString();
            break;
          }
          case 16: {
            type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BulletinResponse : pb::IMessage {
    private static readonly pb::MessageParser<BulletinResponse> _parser = new pb::MessageParser<BulletinResponse>(() => new BulletinResponse());
    public static pb::MessageParser<BulletinResponse> Parser { get { return _parser; } }

    private string msg_ = "";
    /// <summary>
    ///公告信息
    /// </summary>
    public string msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int display_;
    /// <summary>
    ///展示位置
    /// </summary>
    public int display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    private int count_;
    /// <summary>
    ///播放次数
    /// </summary>
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private int bulletinId_;
    /// <summary>
    ///公告ID
    /// </summary>
    public int bulletinId {
      get { return bulletinId_; }
      set {
        bulletinId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(msg);
      }
      if (display != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(display);
      }
      if (count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(count);
      }
      if (bulletinId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(bulletinId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(msg);
      }
      if (display != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(display);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (bulletinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bulletinId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            msg = input.ReadString();
            break;
          }
          case 16: {
            display = input.ReadInt32();
            break;
          }
          case 24: {
            count = input.ReadInt32();
            break;
          }
          case 32: {
            bulletinId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TipNtf : pb::IMessage {
    private static readonly pb::MessageParser<TipNtf> _parser = new pb::MessageParser<TipNtf>(() => new TipNtf());
    public static pb::MessageParser<TipNtf> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///提示id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private string msg_ = "";
    /// <summary>
    ///提示信息
    /// </summary>
    public string msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int type_;
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_parameters_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> parameters_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///参数
    /// </summary>
    public pbc::RepeatedField<string> parameters {
      get { return parameters_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(msg);
      }
      if (type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(type);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(msg);
      }
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 18: {
            msg = input.ReadString();
            break;
          }
          case 24: {
            type = input.ReadInt32();
            break;
          }
          case 34: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端信息栏展示信息;
  /// </summary>
  public sealed class NotifyNoteInfo : pb::IMessage {
    private static readonly pb::MessageParser<NotifyNoteInfo> _parser = new pb::MessageParser<NotifyNoteInfo>(() => new NotifyNoteInfo());
    public static pb::MessageParser<NotifyNoteInfo> Parser { get { return _parser; } }

    private int type_;
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_parameters_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> parameters_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///参数
    /// </summary>
    public pbc::RepeatedField<string> parameters {
      get { return parameters_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(type);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type = input.ReadInt32();
            break;
          }
          case 18: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
