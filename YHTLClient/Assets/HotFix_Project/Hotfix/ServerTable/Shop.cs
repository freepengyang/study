// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Shop.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace shop {

  #region Messages
  /// <summary>
  ///商城
  /// </summary>
  public sealed class ShopBuyInfo : pb::IMessage {
    private static readonly pb::MessageParser<ShopBuyInfo> _parser = new pb::MessageParser<ShopBuyInfo>(() => new ShopBuyInfo());
    public static pb::MessageParser<ShopBuyInfo> Parser { get { return _parser; } }

    private int shopType_;
    /// <summary>
    ///商城类型（1为热销,2为变强,3为限购,4为常用,5为背包）
    /// </summary>
    public int shopType {
      get { return shopType_; }
      set {
        shopType_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::shop.ShopItemBuyInfo> _repeated_shopItemBuyInfos_codec
        = pb::FieldCodec.ForMessage(18, global::shop.ShopItemBuyInfo.Parser);
    private readonly pbc::RepeatedField<global::shop.ShopItemBuyInfo> shopItemBuyInfos_ = new pbc::RepeatedField<global::shop.ShopItemBuyInfo>();
    /// <summary>
    ///商品购买信息
    /// </summary>
    public pbc::RepeatedField<global::shop.ShopItemBuyInfo> shopItemBuyInfos {
      get { return shopItemBuyInfos_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (shopType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(shopType);
      }
      shopItemBuyInfos_.WriteTo(output, _repeated_shopItemBuyInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (shopType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(shopType);
      }
      size += shopItemBuyInfos_.CalculateSize(_repeated_shopItemBuyInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            shopType = input.ReadInt32();
            break;
          }
          case 18: {
            shopItemBuyInfos_.AddEntriesFrom(input, _repeated_shopItemBuyInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///商品购买信息
  /// </summary>
  public sealed class ShopItemBuyInfo : pb::IMessage {
    private static readonly pb::MessageParser<ShopItemBuyInfo> _parser = new pb::MessageParser<ShopItemBuyInfo>(() => new ShopItemBuyInfo());
    public static pb::MessageParser<ShopItemBuyInfo> Parser { get { return _parser; } }

    private int shopId_;
    /// <summary>
    ///商品id
    /// </summary>
    public int shopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    private int buyTimes_;
    /// <summary>
    ///购买次数
    /// </summary>
    public int buyTimes {
      get { return buyTimes_; }
      set {
        buyTimes_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (shopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(shopId);
      }
      if (buyTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(buyTimes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (shopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(shopId);
      }
      if (buyTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(buyTimes);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            shopId = input.ReadInt32();
            break;
          }
          case 16: {
            buyTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///商城购买信息列表
  /// </summary>
  public sealed class ShopBuyInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<ShopBuyInfoResponse> _parser = new pb::MessageParser<ShopBuyInfoResponse>(() => new ShopBuyInfoResponse());
    public static pb::MessageParser<ShopBuyInfoResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::shop.ShopBuyInfo> _repeated_shopBuyInfos_codec
        = pb::FieldCodec.ForMessage(10, global::shop.ShopBuyInfo.Parser);
    private readonly pbc::RepeatedField<global::shop.ShopBuyInfo> shopBuyInfos_ = new pbc::RepeatedField<global::shop.ShopBuyInfo>();
    /// <summary>
    ///商品购买信息
    /// </summary>
    public pbc::RepeatedField<global::shop.ShopBuyInfo> shopBuyInfos {
      get { return shopBuyInfos_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      shopBuyInfos_.WriteTo(output, _repeated_shopBuyInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += shopBuyInfos_.CalculateSize(_repeated_shopBuyInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            shopBuyInfos_.AddEntriesFrom(input, _repeated_shopBuyInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///商店购买请求
  /// </summary>
  public sealed class ShopBuyItemRequest : pb::IMessage {
    private static readonly pb::MessageParser<ShopBuyItemRequest> _parser = new pb::MessageParser<ShopBuyItemRequest>(() => new ShopBuyItemRequest());
    public static pb::MessageParser<ShopBuyItemRequest> Parser { get { return _parser; } }

    private int id_;
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private bool auto_;
    /// <summary>
    ///是否自动购买
    /// </summary>
    public bool auto {
      get { return auto_; }
      set {
        auto_ = value;
      }
    }

    private int count_;
    /// <summary>
    ///购买数量
    /// </summary>
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private bool autoUse_;
    /// <summary>
    ///是否自动使用
    /// </summary>
    public bool autoUse {
      get { return autoUse_; }
      set {
        autoUse_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (auto != false) {
        output.WriteRawTag(16);
        output.WriteBool(auto);
      }
      if (count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(count);
      }
      if (autoUse != false) {
        output.WriteRawTag(32);
        output.WriteBool(autoUse);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (auto != false) {
        size += 1 + 1;
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (autoUse != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            auto = input.ReadBool();
            break;
          }
          case 24: {
            count = input.ReadInt32();
            break;
          }
          case 32: {
            autoUse = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买物品响应
  /// </summary>
  public sealed class ShopBuyResponse : pb::IMessage {
    private static readonly pb::MessageParser<ShopBuyResponse> _parser = new pb::MessageParser<ShopBuyResponse>(() => new ShopBuyResponse());
    public static pb::MessageParser<ShopBuyResponse> Parser { get { return _parser; } }

    private int itemId_;
    public int itemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int count_;
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private int shopType_;
    /// <summary>
    ///商店类型
    /// </summary>
    public int shopType {
      get { return shopType_; }
      set {
        shopType_ = value;
      }
    }

    private int shopId_;
    /// <summary>
    ///shopId
    /// </summary>
    public int shopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    private bool autoUse_;
    /// <summary>
    ///是否自动使用
    /// </summary>
    public bool autoUse {
      get { return autoUse_; }
      set {
        autoUse_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (itemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(itemId);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
      if (shopType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(shopType);
      }
      if (shopId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(shopId);
      }
      if (autoUse != false) {
        output.WriteRawTag(40);
        output.WriteBool(autoUse);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (itemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(itemId);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (shopType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(shopType);
      }
      if (shopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(shopId);
      }
      if (autoUse != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemId = input.ReadInt32();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
          case 24: {
            shopType = input.ReadInt32();
            break;
          }
          case 32: {
            shopId = input.ReadInt32();
            break;
          }
          case 40: {
            autoUse = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class ShopInfo : pb::IMessage {
    private static readonly pb::MessageParser<ShopInfo> _parser = new pb::MessageParser<ShopInfo>(() => new ShopInfo());
    public static pb::MessageParser<ShopInfo> Parser { get { return _parser; } }

    private int shopId_;
    /// <summary>
    ///商品id
    /// </summary>
    public int shopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (shopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(shopId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (shopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(shopId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            shopId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///商城数据
  /// </summary>
  public sealed class ShopInfoRequest : pb::IMessage {
    private static readonly pb::MessageParser<ShopInfoRequest> _parser = new pb::MessageParser<ShopInfoRequest>(() => new ShopInfoRequest());
    public static pb::MessageParser<ShopInfoRequest> Parser { get { return _parser; } }

    private int type_;
    /// <summary>
    ///商城类型
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private int subType_;
    /// <summary>
    ///商城子类型
    /// </summary>
    public int subType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(type);
      }
      if (subType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(subType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      if (subType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(subType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type = input.ReadInt32();
            break;
          }
          case 16: {
            subType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///商城数据
  /// </summary>
  public sealed class ShopInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<ShopInfoResponse> _parser = new pb::MessageParser<ShopInfoResponse>(() => new ShopInfoResponse());
    public static pb::MessageParser<ShopInfoResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_shopIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> shopIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///商品id
    /// </summary>
    public pbc::RepeatedField<int> shopIds {
      get { return shopIds_; }
    }

    private static readonly pb::FieldCodec<global::shop.ShopItemBuyInfo> _repeated_shopItemBuyInfos_codec
        = pb::FieldCodec.ForMessage(18, global::shop.ShopItemBuyInfo.Parser);
    private readonly pbc::RepeatedField<global::shop.ShopItemBuyInfo> shopItemBuyInfos_ = new pbc::RepeatedField<global::shop.ShopItemBuyInfo>();
    /// <summary>
    ///商品购买信息
    /// </summary>
    public pbc::RepeatedField<global::shop.ShopItemBuyInfo> shopItemBuyInfos {
      get { return shopItemBuyInfos_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      shopIds_.WriteTo(output, _repeated_shopIds_codec);
      shopItemBuyInfos_.WriteTo(output, _repeated_shopItemBuyInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += shopIds_.CalculateSize(_repeated_shopIds_codec);
      size += shopItemBuyInfos_.CalculateSize(_repeated_shopItemBuyInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            shopIds_.AddEntriesFrom(input, _repeated_shopIds_codec);
            break;
          }
          case 18: {
            shopItemBuyInfos_.AddEntriesFrom(input, _repeated_shopItemBuyInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 比奇商城 今日充值金额，响应
  /// </summary>
  public sealed class ResDailyRmbInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResDailyRmbInfo> _parser = new pb::MessageParser<ResDailyRmbInfo>(() => new ResDailyRmbInfo());
    public static pb::MessageParser<ResDailyRmbInfo> Parser { get { return _parser; } }

    private int rmb_;
    /// <summary>
    ///充值金额
    /// </summary>
    public int rmb {
      get { return rmb_; }
      set {
        rmb_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (rmb != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(rmb);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (rmb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(rmb);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            rmb = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 兑换商城信息，响应
  /// </summary>
  public sealed class ResDuiHuanShopInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResDuiHuanShopInfo> _parser = new pb::MessageParser<ResDuiHuanShopInfo>(() => new ResDuiHuanShopInfo());
    public static pb::MessageParser<ResDuiHuanShopInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::shop.DuiHuanShopInfo> _repeated_duiHuanShopInfo_codec
        = pb::FieldCodec.ForMessage(10, global::shop.DuiHuanShopInfo.Parser);
    private readonly pbc::RepeatedField<global::shop.DuiHuanShopInfo> duiHuanShopInfo_ = new pbc::RepeatedField<global::shop.DuiHuanShopInfo>();
    public pbc::RepeatedField<global::shop.DuiHuanShopInfo> duiHuanShopInfo {
      get { return duiHuanShopInfo_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      duiHuanShopInfo_.WriteTo(output, _repeated_duiHuanShopInfo_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += duiHuanShopInfo_.CalculateSize(_repeated_duiHuanShopInfo_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            duiHuanShopInfo_.AddEntriesFrom(input, _repeated_duiHuanShopInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 兑换商城，兑换物品，单个，响应
  /// </summary>
  public sealed class DuiHuanShopInfo : pb::IMessage {
    private static readonly pb::MessageParser<DuiHuanShopInfo> _parser = new pb::MessageParser<DuiHuanShopInfo>(() => new DuiHuanShopInfo());
    public static pb::MessageParser<DuiHuanShopInfo> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    /// BiQiShop表的表头id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int dailyDuiHuanNum_;
    /// <summary>
    /// 已兑换次数
    /// </summary>
    public int dailyDuiHuanNum {
      get { return dailyDuiHuanNum_; }
      set {
        dailyDuiHuanNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (dailyDuiHuanNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(dailyDuiHuanNum);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (dailyDuiHuanNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(dailyDuiHuanNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            dailyDuiHuanNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///兑换商城，兑换物品，请求
  /// </summary>
  public sealed class ReqDuiHuanItem : pb::IMessage {
    private static readonly pb::MessageParser<ReqDuiHuanItem> _parser = new pb::MessageParser<ReqDuiHuanItem>(() => new ReqDuiHuanItem());
    public static pb::MessageParser<ReqDuiHuanItem> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    /// BiQiShop表的表头id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///万能券兑换，请求
  /// </summary>
  public sealed class ReqDuiHuanQuan : pb::IMessage {
    private static readonly pb::MessageParser<ReqDuiHuanQuan> _parser = new pb::MessageParser<ReqDuiHuanQuan>(() => new ReqDuiHuanQuan());
    public static pb::MessageParser<ReqDuiHuanQuan> Parser { get { return _parser; } }

    private int quanId_;
    /// <summary>
    ///相应兑换券的id
    /// </summary>
    public int quanId {
      get { return quanId_; }
      set {
        quanId_ = value;
      }
    }

    private int quanNum_;
    /// <summary>
    ///兑换的万能券数量
    /// </summary>
    public int quanNum {
      get { return quanNum_; }
      set {
        quanNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (quanId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(quanId);
      }
      if (quanNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(quanNum);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (quanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(quanId);
      }
      if (quanNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(quanNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            quanId = input.ReadInt32();
            break;
          }
          case 16: {
            quanNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
