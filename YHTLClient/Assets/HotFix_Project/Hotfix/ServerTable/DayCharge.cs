// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DayCharge.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace daycharge {

  #region Messages
  /// <summary>
  ///每日充值数据
  /// </summary>
  public sealed class DayChargeResponse : pb::IMessage {
    private static readonly pb::MessageParser<DayChargeResponse> _parser = new pb::MessageParser<DayChargeResponse>(() => new DayChargeResponse());
    public static pb::MessageParser<DayChargeResponse> Parser { get { return _parser; } }

    private int dayCharge_;
    public int dayCharge {
      get { return dayCharge_; }
      set {
        dayCharge_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_cans_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> cans_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///能领取id列表
    /// </summary>
    public pbc::RepeatedField<int> cans {
      get { return cans_; }
    }

    private static readonly pb::FieldCodec<int> _repeated_dones_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> dones_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已经领取过的id列表
    /// </summary>
    public pbc::RepeatedField<int> dones {
      get { return dones_; }
    }

    private int todayEnterDayChargeMapTimes_;
    /// <summary>
    ///今日进入每日充值地图次数;
    /// </summary>
    public int todayEnterDayChargeMapTimes {
      get { return todayEnterDayChargeMapTimes_; }
      set {
        todayEnterDayChargeMapTimes_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (dayCharge != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(dayCharge);
      }
      cans_.WriteTo(output, _repeated_cans_codec);
      dones_.WriteTo(output, _repeated_dones_codec);
      if (todayEnterDayChargeMapTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(todayEnterDayChargeMapTimes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (dayCharge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(dayCharge);
      }
      size += cans_.CalculateSize(_repeated_cans_codec);
      size += dones_.CalculateSize(_repeated_dones_codec);
      if (todayEnterDayChargeMapTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(todayEnterDayChargeMapTimes);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            dayCharge = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cans_.AddEntriesFrom(input, _repeated_cans_codec);
            break;
          }
          case 26:
          case 24: {
            dones_.AddEntriesFrom(input, _repeated_dones_codec);
            break;
          }
          case 32: {
            todayEnterDayChargeMapTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ConfigId : pb::IMessage {
    private static readonly pb::MessageParser<ConfigId> _parser = new pb::MessageParser<ConfigId>(() => new ConfigId());
    public static pb::MessageParser<ConfigId> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///配置id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GetRewardResponse : pb::IMessage {
    private static readonly pb::MessageParser<GetRewardResponse> _parser = new pb::MessageParser<GetRewardResponse>(() => new GetRewardResponse());
    public static pb::MessageParser<GetRewardResponse> Parser { get { return _parser; } }

    private int state_;
    /// <summary>
    ///领取状态;0:条件不满足；1：领取成功;2:已经领取过
    /// </summary>
    public int state {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (state != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(state);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(state);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
