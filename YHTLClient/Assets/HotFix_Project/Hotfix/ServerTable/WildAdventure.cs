// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WildAdventure.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace wildadventure {

  #region Messages
  /// <summary>
  ///野外探险数据
  /// </summary>
  public sealed class WildAdventureInfo : pb::IMessage {
    private static readonly pb::MessageParser<WildAdventureInfo> _parser = new pb::MessageParser<WildAdventureInfo>(() => new WildAdventureInfo());
    public static pb::MessageParser<WildAdventureInfo> Parser { get { return _parser; } }

    private long time_;
    /// <summary>
    ///本次已探险时间
    /// </summary>
    public long time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private long huangExp_;
    /// <summary>
    ///挂机经验
    /// </summary>
    public long huangExp {
      get { return huangExp_; }
      set {
        huangExp_ = value;
      }
    }

    private long huangUpSilver_;
    /// <summary>
    ///挂机银子
    /// </summary>
    public long huangUpSilver {
      get { return huangUpSilver_; }
      set {
        huangUpSilver_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(34, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> itemList_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    /// <summary>
    ///物品列表
    /// </summary>
    public pbc::RepeatedField<global::bag.BagItemInfo> itemList {
      get { return itemList_; }
    }

    private long timeLimit_;
    /// <summary>
    ///野外探险时间上限
    /// </summary>
    public long timeLimit {
      get { return timeLimit_; }
      set {
        timeLimit_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(time);
      }
      if (huangExp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(huangExp);
      }
      if (huangUpSilver != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(huangUpSilver);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (timeLimit != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(timeLimit);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(time);
      }
      if (huangExp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(huangExp);
      }
      if (huangUpSilver != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(huangUpSilver);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (timeLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(timeLimit);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            time = input.ReadInt64();
            break;
          }
          case 16: {
            huangExp = input.ReadInt64();
            break;
          }
          case 24: {
            huangUpSilver = input.ReadInt64();
            break;
          }
          case 34: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 40: {
            timeLimit = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///取出野外探险道具
  /// </summary>
  public sealed class TakeOutItemRequest : pb::IMessage {
    private static readonly pb::MessageParser<TakeOutItemRequest> _parser = new pb::MessageParser<TakeOutItemRequest>(() => new TakeOutItemRequest());
    public static pb::MessageParser<TakeOutItemRequest> Parser { get { return _parser; } }

    private int bagIndex_;
    /// <summary>
    ///位置 -1为全部取出
    /// </summary>
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bagIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(bagIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bagIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TakeOutItemResponse : pb::IMessage {
    private static readonly pb::MessageParser<TakeOutItemResponse> _parser = new pb::MessageParser<TakeOutItemResponse>(() => new TakeOutItemResponse());
    public static pb::MessageParser<TakeOutItemResponse> Parser { get { return _parser; } }

    private global::wildadventure.WildAdventureInfo wildAdventureInfo_;
    public global::wildadventure.WildAdventureInfo wildAdventureInfo {
      get { return wildAdventureInfo_; }
      set {
        wildAdventureInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (wildAdventureInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(wildAdventureInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (wildAdventureInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(wildAdventureInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (wildAdventureInfo_ == null) {
              wildAdventureInfo_ = new global::wildadventure.WildAdventureInfo();
            }
            input.ReadMessage(wildAdventureInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///boss奖励
  /// </summary>
  public sealed class BossItemNotify : pb::IMessage {
    private static readonly pb::MessageParser<BossItemNotify> _parser = new pb::MessageParser<BossItemNotify>(() => new BossItemNotify());
    public static pb::MessageParser<BossItemNotify> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(34, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> itemList_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    /// <summary>
    ///物品列表
    /// </summary>
    public pbc::RepeatedField<global::bag.BagItemInfo> itemList {
      get { return itemList_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      itemList_.WriteTo(output, _repeated_itemList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 34: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
