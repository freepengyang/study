// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnionBattle.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace unionbattle {

  #region Messages
  public sealed class UnionActivityInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnionActivityInfo> _parser = new pb::MessageParser<UnionActivityInfo>(() => new UnionActivityInfo());
    public static pb::MessageParser<UnionActivityInfo> Parser { get { return _parser; } }

    private int state_;
    /// <summary>
    ///状态 0未开启 1已开启
    /// </summary>
    public int state {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    private long startTime_;
    /// <summary>
    ///开始时间
    /// </summary>
    public long startTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    private int activityId_;
    /// <summary>
    ///活动id 1公会战  2公会boss
    /// </summary>
    public int activityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (state != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(state);
      }
      if (startTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(startTime);
      }
      if (activityId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(activityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(state);
      }
      if (startTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(startTime);
      }
      if (activityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(activityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state = input.ReadInt32();
            break;
          }
          case 16: {
            startTime = input.ReadInt64();
            break;
          }
          case 24: {
            activityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会活动
  /// </summary>
  public sealed class UnionActivityInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<UnionActivityInfoResponse> _parser = new pb::MessageParser<UnionActivityInfoResponse>(() => new UnionActivityInfoResponse());
    public static pb::MessageParser<UnionActivityInfoResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::unionbattle.UnionActivityInfo> _repeated_unionActivityInfos_codec
        = pb::FieldCodec.ForMessage(10, global::unionbattle.UnionActivityInfo.Parser);
    private readonly pbc::RepeatedField<global::unionbattle.UnionActivityInfo> unionActivityInfos_ = new pbc::RepeatedField<global::unionbattle.UnionActivityInfo>();
    /// <summary>
    ///公会活动
    /// </summary>
    public pbc::RepeatedField<global::unionbattle.UnionActivityInfo> unionActivityInfos {
      get { return unionActivityInfos_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      unionActivityInfos_.WriteTo(output, _repeated_unionActivityInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += unionActivityInfos_.CalculateSize(_repeated_unionActivityInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            unionActivityInfos_.AddEntriesFrom(input, _repeated_unionActivityInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会战奖励弹框数据
  /// </summary>
  public sealed class UnionActivityReward : pb::IMessage {
    private static readonly pb::MessageParser<UnionActivityReward> _parser = new pb::MessageParser<UnionActivityReward>(() => new UnionActivityReward());
    public static pb::MessageParser<UnionActivityReward> Parser { get { return _parser; } }

    private int rank_;
    /// <summary>
    ///排名
    /// </summary>
    public int rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    private int score_;
    /// <summary>
    ///积分
    /// </summary>
    public int score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(rank);
      }
      if (score != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(score);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(rank);
      }
      if (score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(score);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            rank = input.ReadInt32();
            break;
          }
          case 16: {
            score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
