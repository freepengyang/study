// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaoZhu.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace baozhu {

  #region Messages
  public sealed class LevelUpBaoZhu : pb::IMessage {
    private static readonly pb::MessageParser<LevelUpBaoZhu> _parser = new pb::MessageParser<LevelUpBaoZhu>(() => new LevelUpBaoZhu());
    public static pb::MessageParser<LevelUpBaoZhu> Parser { get { return _parser; } }

    private int bagIndex_;
    /// <summary>
    ///装备索引ID
    /// </summary>
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_eatIndex_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> eatIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///吃的装备
    /// </summary>
    public pbc::RepeatedField<int> eatIndex {
      get { return eatIndex_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bagIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(bagIndex);
      }
      eatIndex_.WriteTo(output, _repeated_eatIndex_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      size += eatIndex_.CalculateSize(_repeated_eatIndex_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bagIndex = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            eatIndex_.AddEntriesFrom(input, _repeated_eatIndex_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ResLevelUpBaoZhu : pb::IMessage {
    private static readonly pb::MessageParser<ResLevelUpBaoZhu> _parser = new pb::MessageParser<ResLevelUpBaoZhu>(() => new ResLevelUpBaoZhu());
    public static pb::MessageParser<ResLevelUpBaoZhu> Parser { get { return _parser; } }

    private global::bag.EquipInfo equip_;
    public global::bag.EquipInfo equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (equip_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(equip);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(equip);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (equip_ == null) {
              equip_ = new global::bag.EquipInfo();
            }
            input.ReadMessage(equip_);
            break;
          }
        }
      }
    }

  }

  public sealed class GradeUpBaoZhu : pb::IMessage {
    private static readonly pb::MessageParser<GradeUpBaoZhu> _parser = new pb::MessageParser<GradeUpBaoZhu>(() => new GradeUpBaoZhu());
    public static pb::MessageParser<GradeUpBaoZhu> Parser { get { return _parser; } }

    private int bagIndex_;
    /// <summary>
    ///装备索引ID
    /// </summary>
    public int bagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bagIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(bagIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bagIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bagIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ResGradeUpBaoZhu : pb::IMessage {
    private static readonly pb::MessageParser<ResGradeUpBaoZhu> _parser = new pb::MessageParser<ResGradeUpBaoZhu>(() => new ResGradeUpBaoZhu());
    public static pb::MessageParser<ResGradeUpBaoZhu> Parser { get { return _parser; } }

    private global::bag.EquipInfo equip_;
    public global::bag.EquipInfo equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (equip_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(equip);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(equip);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (equip_ == null) {
              equip_ = new global::bag.EquipInfo();
            }
            input.ReadMessage(equip_);
            break;
          }
        }
      }
    }

  }

  public sealed class RandBaoZhuSkill : pb::IMessage {
    private static readonly pb::MessageParser<RandBaoZhuSkill> _parser = new pb::MessageParser<RandBaoZhuSkill>(() => new RandBaoZhuSkill());
    public static pb::MessageParser<RandBaoZhuSkill> Parser { get { return _parser; } }

    private int slot_;
    /// <summary>
    ///技能槽
    /// </summary>
    public int slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (slot != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(slot);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(slot);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            slot = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BaoZhuSkills : pb::IMessage {
    private static readonly pb::MessageParser<BaoZhuSkills> _parser = new pb::MessageParser<BaoZhuSkills>(() => new BaoZhuSkills());
    public static pb::MessageParser<BaoZhuSkills> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::baozhu.BaoZhuSkill> _repeated_baoZhuSkills_codec
        = pb::FieldCodec.ForMessage(10, global::baozhu.BaoZhuSkill.Parser);
    private readonly pbc::RepeatedField<global::baozhu.BaoZhuSkill> baoZhuSkills_ = new pbc::RepeatedField<global::baozhu.BaoZhuSkill>();
    /// <summary>
    ///宝珠技能槽与技能
    /// </summary>
    public pbc::RepeatedField<global::baozhu.BaoZhuSkill> baoZhuSkills {
      get { return baoZhuSkills_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      baoZhuSkills_.WriteTo(output, _repeated_baoZhuSkills_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += baoZhuSkills_.CalculateSize(_repeated_baoZhuSkills_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            baoZhuSkills_.AddEntriesFrom(input, _repeated_baoZhuSkills_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class BaoZhuSkill : pb::IMessage {
    private static readonly pb::MessageParser<BaoZhuSkill> _parser = new pb::MessageParser<BaoZhuSkill>(() => new BaoZhuSkill());
    public static pb::MessageParser<BaoZhuSkill> Parser { get { return _parser; } }

    private int slot_;
    /// <summary>
    ///技能槽
    /// </summary>
    public int slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    private int skill_;
    /// <summary>
    ///技能
    /// </summary>
    public int skill {
      get { return skill_; }
      set {
        skill_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (slot != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(slot);
      }
      if (skill != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(skill);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(slot);
      }
      if (skill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(skill);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            slot = input.ReadInt32();
            break;
          }
          case 16: {
            skill = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
