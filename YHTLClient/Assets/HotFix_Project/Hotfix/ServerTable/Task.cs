// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace task {

  #region Messages
  /// <summary>
  ///任务目标
  /// </summary>
  public sealed class GoalInfo : pb::IMessage {
    private static readonly pb::MessageParser<GoalInfo> _parser = new pb::MessageParser<GoalInfo>(() => new GoalInfo());
    public static pb::MessageParser<GoalInfo> Parser { get { return _parser; } }

    private int goalId_;
    /// <summary>
    ///目标id
    /// </summary>
    public int goalId {
      get { return goalId_; }
      set {
        goalId_ = value;
      }
    }

    private int currentCount_;
    /// <summary>
    ///当前进度
    /// </summary>
    public int currentCount {
      get { return currentCount_; }
      set {
        currentCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (goalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(goalId);
      }
      if (currentCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(currentCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (goalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(goalId);
      }
      if (currentCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(currentCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            goalId = input.ReadInt32();
            break;
          }
          case 16: {
            currentCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///任务
  /// </summary>
  public sealed class TaskInfo : pb::IMessage {
    private static readonly pb::MessageParser<TaskInfo> _parser = new pb::MessageParser<TaskInfo>(() => new TaskInfo());
    public static pb::MessageParser<TaskInfo> Parser { get { return _parser; } }

    private int taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    private int state_;
    /// <summary>
    ///任务状态1不可接 2可接 3已接,进行中 4已完成,未交 5已交 6已失败 7放弃 8需要消耗的状态
    /// </summary>
    public int state {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::task.GoalInfo> _repeated_goals_codec
        = pb::FieldCodec.ForMessage(26, global::task.GoalInfo.Parser);
    private readonly pbc::RepeatedField<global::task.GoalInfo> goals_ = new pbc::RepeatedField<global::task.GoalInfo>();
    /// <summary>
    ///任务目标
    /// </summary>
    public pbc::RepeatedField<global::task.GoalInfo> goals {
      get { return goals_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (taskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(taskId);
      }
      if (state != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(state);
      }
      goals_.WriteTo(output, _repeated_goals_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      if (state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(state);
      }
      size += goals_.CalculateSize(_repeated_goals_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            taskId = input.ReadInt32();
            break;
          }
          case 16: {
            state = input.ReadInt32();
            break;
          }
          case 26: {
            goals_.AddEntriesFrom(input, _repeated_goals_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新任务列表
  /// </summary>
  public sealed class TaskList : pb::IMessage {
    private static readonly pb::MessageParser<TaskList> _parser = new pb::MessageParser<TaskList>(() => new TaskList());
    public static pb::MessageParser<TaskList> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::task.TaskInfo> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(10, global::task.TaskInfo.Parser);
    private readonly pbc::RepeatedField<global::task.TaskInfo> tasks_ = new pbc::RepeatedField<global::task.TaskInfo>();
    public pbc::RepeatedField<global::task.TaskInfo> tasks {
      get { return tasks_; }
    }

    private int cycleNum_;
    /// <summary>
    ///日常任务循环次数
    /// </summary>
    public int cycleNum {
      get { return cycleNum_; }
      set {
        cycleNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      tasks_.WriteTo(output, _repeated_tasks_codec);
      if (cycleNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(cycleNum);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      if (cycleNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(cycleNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
          case 16: {
            cycleNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///任务进度更新
  /// </summary>
  public sealed class TaskGoalUpdateResponse : pb::IMessage {
    private static readonly pb::MessageParser<TaskGoalUpdateResponse> _parser = new pb::MessageParser<TaskGoalUpdateResponse>(() => new TaskGoalUpdateResponse());
    public static pb::MessageParser<TaskGoalUpdateResponse> Parser { get { return _parser; } }

    private int taskId_;
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    private global::task.GoalInfo goal_;
    public global::task.GoalInfo goal {
      get { return goal_; }
      set {
        goal_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (taskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(taskId);
      }
      if (goal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(goal);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      if (goal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(goal);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            taskId = input.ReadInt32();
            break;
          }
          case 18: {
            if (goal_ == null) {
              goal_ = new global::task.GoalInfo();
            }
            input.ReadMessage(goal_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///花钱购买任务
  /// </summary>
  public sealed class BuyTaskRequest : pb::IMessage {
    private static readonly pb::MessageParser<BuyTaskRequest> _parser = new pb::MessageParser<BuyTaskRequest>(() => new BuyTaskRequest());
    public static pb::MessageParser<BuyTaskRequest> Parser { get { return _parser; } }

    private int taskId_;
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (taskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(taskId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            taskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///接任务请求
  /// </summary>
  public sealed class AcceptTaskRequest : pb::IMessage {
    private static readonly pb::MessageParser<AcceptTaskRequest> _parser = new pb::MessageParser<AcceptTaskRequest>(() => new AcceptTaskRequest());
    public static pb::MessageParser<AcceptTaskRequest> Parser { get { return _parser; } }

    private int taskId_;
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (taskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(taskId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            taskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///交任务请求
  /// </summary>
  public sealed class SubmitTaskRequest : pb::IMessage {
    private static readonly pb::MessageParser<SubmitTaskRequest> _parser = new pb::MessageParser<SubmitTaskRequest>(() => new SubmitTaskRequest());
    public static pb::MessageParser<SubmitTaskRequest> Parser { get { return _parser; } }

    private int taskId_;
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (taskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(taskId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            taskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///交任务响应
  /// </summary>
  public sealed class SubmitTaskResponse : pb::IMessage {
    private static readonly pb::MessageParser<SubmitTaskResponse> _parser = new pb::MessageParser<SubmitTaskResponse>(() => new SubmitTaskResponse());
    public static pb::MessageParser<SubmitTaskResponse> Parser { get { return _parser; } }

    private int taskId_;
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_changedItems_codec
        = pb::FieldCodec.ForMessage(18, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> changedItems_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    public pbc::RepeatedField<global::bag.BagItemInfo> changedItems {
      get { return changedItems_; }
    }

    private static readonly pb::FieldCodec<global::task.TaskInfo> _repeated_newTasks_codec
        = pb::FieldCodec.ForMessage(26, global::task.TaskInfo.Parser);
    private readonly pbc::RepeatedField<global::task.TaskInfo> newTasks_ = new pbc::RepeatedField<global::task.TaskInfo>();
    public pbc::RepeatedField<global::task.TaskInfo> newTasks {
      get { return newTasks_; }
    }

    private int cycleNum_;
    /// <summary>
    ///日常任务循环次数
    /// </summary>
    public int cycleNum {
      get { return cycleNum_; }
      set {
        cycleNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (taskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(taskId);
      }
      changedItems_.WriteTo(output, _repeated_changedItems_codec);
      newTasks_.WriteTo(output, _repeated_newTasks_codec);
      if (cycleNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(cycleNum);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      size += changedItems_.CalculateSize(_repeated_changedItems_codec);
      size += newTasks_.CalculateSize(_repeated_newTasks_codec);
      if (cycleNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(cycleNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            taskId = input.ReadInt32();
            break;
          }
          case 18: {
            changedItems_.AddEntriesFrom(input, _repeated_changedItems_codec);
            break;
          }
          case 26: {
            newTasks_.AddEntriesFrom(input, _repeated_newTasks_codec);
            break;
          }
          case 32: {
            cycleNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///npc对话任务
  /// </summary>
  public sealed class TalkToNPCRequest : pb::IMessage {
    private static readonly pb::MessageParser<TalkToNPCRequest> _parser = new pb::MessageParser<TalkToNPCRequest>(() => new TalkToNPCRequest());
    public static pb::MessageParser<TalkToNPCRequest> Parser { get { return _parser; } }

    private int npcId_;
    public int npcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (npcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(npcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (npcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(npcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            npcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///直接传送请求
  /// </summary>
  public sealed class FlyToGoalRequest : pb::IMessage {
    private static readonly pb::MessageParser<FlyToGoalRequest> _parser = new pb::MessageParser<FlyToGoalRequest>(() => new FlyToGoalRequest());
    public static pb::MessageParser<FlyToGoalRequest> Parser { get { return _parser; } }

    private int taskId_;
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    private int goalId_;
    public int goalId {
      get { return goalId_; }
      set {
        goalId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (taskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(taskId);
      }
      if (goalId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(goalId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      if (goalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(goalId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            taskId = input.ReadInt32();
            break;
          }
          case 16: {
            goalId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///新增的任务
  /// </summary>
  public sealed class NewTaskResponse : pb::IMessage {
    private static readonly pb::MessageParser<NewTaskResponse> _parser = new pb::MessageParser<NewTaskResponse>(() => new NewTaskResponse());
    public static pb::MessageParser<NewTaskResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::task.TaskInfo> _repeated_newTasks_codec
        = pb::FieldCodec.ForMessage(10, global::task.TaskInfo.Parser);
    private readonly pbc::RepeatedField<global::task.TaskInfo> newTasks_ = new pbc::RepeatedField<global::task.TaskInfo>();
    public pbc::RepeatedField<global::task.TaskInfo> newTasks {
      get { return newTasks_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      newTasks_.WriteTo(output, _repeated_newTasks_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += newTasks_.CalculateSize(_repeated_newTasks_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            newTasks_.AddEntriesFrom(input, _repeated_newTasks_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
