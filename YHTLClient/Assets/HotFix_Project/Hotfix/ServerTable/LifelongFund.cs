// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LifelongFund.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace lifelongfund {

  #region Messages
  /// <summary>
  ///终身基金信息
  /// </summary>
  public sealed class LifelongFundInfo : pb::IMessage {
    private static readonly pb::MessageParser<LifelongFundInfo> _parser = new pb::MessageParser<LifelongFundInfo>(() => new LifelongFundInfo());
    public static pb::MessageParser<LifelongFundInfo> Parser { get { return _parser; } }

    private bool isBuy_;
    /// <summary>
    ///是否购买
    /// </summary>
    public bool isBuy {
      get { return isBuy_; }
      set {
        isBuy_ = value;
      }
    }

    private int curPoint_;
    /// <summary>
    ///当前积分
    /// </summary>
    public int curPoint {
      get { return curPoint_; }
      set {
        curPoint_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::lifelongfund.FundTaskInfo> _repeated_fundTaskInfos_codec
        = pb::FieldCodec.ForMessage(26, global::lifelongfund.FundTaskInfo.Parser);
    private readonly pbc::RepeatedField<global::lifelongfund.FundTaskInfo> fundTaskInfos_ = new pbc::RepeatedField<global::lifelongfund.FundTaskInfo>();
    public pbc::RepeatedField<global::lifelongfund.FundTaskInfo> fundTaskInfos {
      get { return fundTaskInfos_; }
    }

    private static readonly pb::FieldCodec<int> _repeated_unreceivedRewards_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> unreceivedRewards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///当前积分可以领取的奖励  却未领取的列表
    /// </summary>
    public pbc::RepeatedField<int> unreceivedRewards {
      get { return unreceivedRewards_; }
    }

    private int pointRewardId_;
    /// <summary>
    ///当前积分对应的奖励id
    /// </summary>
    public int pointRewardId {
      get { return pointRewardId_; }
      set {
        pointRewardId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (isBuy != false) {
        output.WriteRawTag(8);
        output.WriteBool(isBuy);
      }
      if (curPoint != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(curPoint);
      }
      fundTaskInfos_.WriteTo(output, _repeated_fundTaskInfos_codec);
      unreceivedRewards_.WriteTo(output, _repeated_unreceivedRewards_codec);
      if (pointRewardId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(pointRewardId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (isBuy != false) {
        size += 1 + 1;
      }
      if (curPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(curPoint);
      }
      size += fundTaskInfos_.CalculateSize(_repeated_fundTaskInfos_codec);
      size += unreceivedRewards_.CalculateSize(_repeated_unreceivedRewards_codec);
      if (pointRewardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(pointRewardId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            isBuy = input.ReadBool();
            break;
          }
          case 16: {
            curPoint = input.ReadInt32();
            break;
          }
          case 26: {
            fundTaskInfos_.AddEntriesFrom(input, _repeated_fundTaskInfos_codec);
            break;
          }
          case 34:
          case 32: {
            unreceivedRewards_.AddEntriesFrom(input, _repeated_unreceivedRewards_codec);
            break;
          }
          case 40: {
            pointRewardId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///基金任务
  /// </summary>
  public sealed class FundTaskInfo : pb::IMessage {
    private static readonly pb::MessageParser<FundTaskInfo> _parser = new pb::MessageParser<FundTaskInfo>(() => new FundTaskInfo());
    public static pb::MessageParser<FundTaskInfo> Parser { get { return _parser; } }

    private int taskId_;
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    private int taskState_;
    /// <summary>
    ///任务状态0进行中 1可领取 2已完成
    /// </summary>
    public int taskState {
      get { return taskState_; }
      set {
        taskState_ = value;
      }
    }

    private int curProgress_;
    /// <summary>
    ///当前进度
    /// </summary>
    public int curProgress {
      get { return curProgress_; }
      set {
        curProgress_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (taskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(taskId);
      }
      if (taskState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(taskState);
      }
      if (curProgress != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(curProgress);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      if (taskState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskState);
      }
      if (curProgress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(curProgress);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            taskId = input.ReadInt32();
            break;
          }
          case 16: {
            taskState = input.ReadInt32();
            break;
          }
          case 24: {
            curProgress = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取基金奖励
  /// </summary>
  public sealed class ReceiveFundRewardRequest : pb::IMessage {
    private static readonly pb::MessageParser<ReceiveFundRewardRequest> _parser = new pb::MessageParser<ReceiveFundRewardRequest>(() => new ReceiveFundRewardRequest());
    public static pb::MessageParser<ReceiveFundRewardRequest> Parser { get { return _parser; } }

    private int point_;
    public int point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (point != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(point);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(point);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            point = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取基金奖励响应
  /// </summary>
  public sealed class ReceiveFundRewardResponse : pb::IMessage {
    private static readonly pb::MessageParser<ReceiveFundRewardResponse> _parser = new pb::MessageParser<ReceiveFundRewardResponse>(() => new ReceiveFundRewardResponse());
    public static pb::MessageParser<ReceiveFundRewardResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_unreceivedRewards_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> unreceivedRewards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///当前积分可以领取的奖励  却未领取的列表
    /// </summary>
    public pbc::RepeatedField<int> unreceivedRewards {
      get { return unreceivedRewards_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      unreceivedRewards_.WriteTo(output, _repeated_unreceivedRewards_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += unreceivedRewards_.CalculateSize(_repeated_unreceivedRewards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            unreceivedRewards_.AddEntriesFrom(input, _repeated_unreceivedRewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取基金任务奖励
  /// </summary>
  public sealed class ReceiveFundTaskRewardRequest : pb::IMessage {
    private static readonly pb::MessageParser<ReceiveFundTaskRewardRequest> _parser = new pb::MessageParser<ReceiveFundTaskRewardRequest>(() => new ReceiveFundTaskRewardRequest());
    public static pb::MessageParser<ReceiveFundTaskRewardRequest> Parser { get { return _parser; } }

    private int taskId_;
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (taskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(taskId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            taskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class FundTaskInfoChange : pb::IMessage {
    private static readonly pb::MessageParser<FundTaskInfoChange> _parser = new pb::MessageParser<FundTaskInfoChange>(() => new FundTaskInfoChange());
    public static pb::MessageParser<FundTaskInfoChange> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::lifelongfund.FundTaskInfo> _repeated_fundTaskInfos_codec
        = pb::FieldCodec.ForMessage(10, global::lifelongfund.FundTaskInfo.Parser);
    private readonly pbc::RepeatedField<global::lifelongfund.FundTaskInfo> fundTaskInfos_ = new pbc::RepeatedField<global::lifelongfund.FundTaskInfo>();
    public pbc::RepeatedField<global::lifelongfund.FundTaskInfo> fundTaskInfos {
      get { return fundTaskInfos_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      fundTaskInfos_.WriteTo(output, _repeated_fundTaskInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += fundTaskInfos_.CalculateSize(_repeated_fundTaskInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fundTaskInfos_.AddEntriesFrom(input, _repeated_fundTaskInfos_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
