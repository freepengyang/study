// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Team.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace team {

  #region Messages
  public sealed class TeamMember : pb::IMessage {
    private static readonly pb::MessageParser<TeamMember> _parser = new pb::MessageParser<TeamMember>(() => new TeamMember());
    public static pb::MessageParser<TeamMember> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private string name_ = "";
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int career_;
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    private int level_;
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private bool isOnline_;
    public bool isOnline {
      get { return isOnline_; }
      set {
        isOnline_ = value;
      }
    }

    private int sex_;
    public int sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private string unionName_ = "";
    public string unionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long inviteTeamId_;
    /// <summary>
    ///是邀请还是申请
    /// </summary>
    public long inviteTeamId {
      get { return inviteTeamId_; }
      set {
        inviteTeamId_ = value;
      }
    }

    private int nbValue_;
    public int nbValue {
      get { return nbValue_; }
      set {
        nbValue_ = value;
      }
    }

    private long teamId_;
    public long teamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    private int fashionClothesId_;
    /// <summary>
    ///时装ID
    /// </summary>
    public int fashionClothesId {
      get { return fashionClothesId_; }
      set {
        fashionClothesId_ = value;
      }
    }

    private int fashionWeaponId_;
    /// <summary>
    ///时装武器ID
    /// </summary>
    public int fashionWeaponId {
      get { return fashionWeaponId_; }
      set {
        fashionWeaponId_ = value;
      }
    }

    private int clothes_;
    /// <summary>
    ///衣服
    /// </summary>
    public int clothes {
      get { return clothes_; }
      set {
        clothes_ = value;
      }
    }

    private int weapon_;
    /// <summary>
    ///武器
    /// </summary>
    public int weapon {
      get { return weapon_; }
      set {
        weapon_ = value;
      }
    }

    private long addTime_;
    /// <summary>
    ///时间;
    /// </summary>
    public long addTime {
      get { return addTime_; }
      set {
        addTime_ = value;
      }
    }

    private int hp_;
    public int hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int mp_;
    public int mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    private int maxHp_;
    public int maxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    private int maxMp_;
    public int maxMp {
      get { return maxMp_; }
      set {
        maxMp_ = value;
      }
    }

    private int suitId_;
    /// <summary>
    ///套装ID（时装）
    /// </summary>
    public int suitId {
      get { return suitId_; }
      set {
        suitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (career != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(career);
      }
      if (level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(level);
      }
      if (isOnline != false) {
        output.WriteRawTag(40);
        output.WriteBool(isOnline);
      }
      if (sex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(sex);
      }
      if (unionName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(unionName);
      }
      if (inviteTeamId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(inviteTeamId);
      }
      if (nbValue != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(nbValue);
      }
      if (teamId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(teamId);
      }
      if (fashionClothesId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(fashionClothesId);
      }
      if (fashionWeaponId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(fashionWeaponId);
      }
      if (clothes != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(clothes);
      }
      if (weapon != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(weapon);
      }
      if (addTime != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(addTime);
      }
      if (hp != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(hp);
      }
      if (mp != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(mp);
      }
      if (maxHp != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(maxHp);
      }
      if (maxMp != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(maxMp);
      }
      if (suitId != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(suitId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (isOnline != false) {
        size += 1 + 1;
      }
      if (sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sex);
      }
      if (unionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(unionName);
      }
      if (inviteTeamId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(inviteTeamId);
      }
      if (nbValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nbValue);
      }
      if (teamId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(teamId);
      }
      if (fashionClothesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(fashionClothesId);
      }
      if (fashionWeaponId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(fashionWeaponId);
      }
      if (clothes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(clothes);
      }
      if (weapon != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(weapon);
      }
      if (addTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(addTime);
      }
      if (hp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(hp);
      }
      if (mp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(mp);
      }
      if (maxHp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(maxHp);
      }
      if (maxMp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(maxMp);
      }
      if (suitId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(suitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 24: {
            career = input.ReadInt32();
            break;
          }
          case 32: {
            level = input.ReadInt32();
            break;
          }
          case 40: {
            isOnline = input.ReadBool();
            break;
          }
          case 48: {
            sex = input.ReadInt32();
            break;
          }
          case 58: {
            unionName = input.ReadString();
            break;
          }
          case 64: {
            inviteTeamId = input.ReadInt64();
            break;
          }
          case 72: {
            nbValue = input.ReadInt32();
            break;
          }
          case 80: {
            teamId = input.ReadInt64();
            break;
          }
          case 104: {
            fashionClothesId = input.ReadInt32();
            break;
          }
          case 112: {
            fashionWeaponId = input.ReadInt32();
            break;
          }
          case 120: {
            clothes = input.ReadInt32();
            break;
          }
          case 128: {
            weapon = input.ReadInt32();
            break;
          }
          case 136: {
            addTime = input.ReadInt64();
            break;
          }
          case 144: {
            hp = input.ReadInt32();
            break;
          }
          case 152: {
            mp = input.ReadInt32();
            break;
          }
          case 160: {
            maxHp = input.ReadInt32();
            break;
          }
          case 168: {
            maxMp = input.ReadInt32();
            break;
          }
          case 384: {
            suitId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TeamInfo : pb::IMessage {
    private static readonly pb::MessageParser<TeamInfo> _parser = new pb::MessageParser<TeamInfo>(() => new TeamInfo());
    public static pb::MessageParser<TeamInfo> Parser { get { return _parser; } }

    private long id_;
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long leaderId_;
    public long leaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::team.TeamMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(26, global::team.TeamMember.Parser);
    private readonly pbc::RepeatedField<global::team.TeamMember> members_ = new pbc::RepeatedField<global::team.TeamMember>();
    public pbc::RepeatedField<global::team.TeamMember> members {
      get { return members_; }
    }

    private int taskId_;
    /// <summary>
    ///任务目标ID
    /// </summary>
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
      if (leaderId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(leaderId);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (taskId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(taskId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      if (leaderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(leaderId);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
          case 16: {
            leaderId = input.ReadInt64();
            break;
          }
          case 26: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 32: {
            taskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TeamBrief : pb::IMessage {
    private static readonly pb::MessageParser<TeamBrief> _parser = new pb::MessageParser<TeamBrief>(() => new TeamBrief());
    public static pb::MessageParser<TeamBrief> Parser { get { return _parser; } }

    private long id_;
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private global::team.TeamMember leader_;
    public global::team.TeamMember leader {
      get { return leader_; }
      set {
        leader_ = value;
      }
    }

    private int size_;
    public int size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    private int mapId_;
    /// <summary>
    ///地图ID
    /// </summary>
    public int mapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    private int taskId_;
    /// <summary>
    ///任务目标ID
    /// </summary>
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
      if (leader_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(leader);
      }
      if (size != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(size);
      }
      if (mapId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(mapId);
      }
      if (taskId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(taskId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      if (leader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(leader);
      }
      if (size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(size);
      }
      if (mapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mapId);
      }
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
          case 18: {
            if (leader_ == null) {
              leader_ = new global::team.TeamMember();
            }
            input.ReadMessage(leader_);
            break;
          }
          case 24: {
            size = input.ReadInt32();
            break;
          }
          case 32: {
            mapId = input.ReadInt32();
            break;
          }
          case 40: {
            taskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取组队面板tab请求
  /// </summary>
  public sealed class GetTeamTabRequest : pb::IMessage {
    private static readonly pb::MessageParser<GetTeamTabRequest> _parser = new pb::MessageParser<GetTeamTabRequest>(() => new GetTeamTabRequest());
    public static pb::MessageParser<GetTeamTabRequest> Parser { get { return _parser; } }

    private int tab_;
    /// <summary>
    ///TeamTab
    /// </summary>
    public int tab {
      get { return tab_; }
      set {
        tab_ = value;
      }
    }

    private int taskId_;
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (tab != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(tab);
      }
      if (taskId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(taskId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (tab != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(tab);
      }
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            tab = input.ReadInt32();
            break;
          }
          case 16: {
            taskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///组队面板tab信息
  /// </summary>
  public sealed class TeamTabInfo : pb::IMessage {
    private static readonly pb::MessageParser<TeamTabInfo> _parser = new pb::MessageParser<TeamTabInfo>(() => new TeamTabInfo());
    public static pb::MessageParser<TeamTabInfo> Parser { get { return _parser; } }

    private int tab_;
    /// <summary>
    ///TeamTab
    /// </summary>
    public int tab {
      get { return tab_; }
      set {
        tab_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::team.TeamMember> _repeated_players_codec
        = pb::FieldCodec.ForMessage(18, global::team.TeamMember.Parser);
    private readonly pbc::RepeatedField<global::team.TeamMember> players_ = new pbc::RepeatedField<global::team.TeamMember>();
    public pbc::RepeatedField<global::team.TeamMember> players {
      get { return players_; }
    }

    private static readonly pb::FieldCodec<global::team.TeamBrief> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(26, global::team.TeamBrief.Parser);
    private readonly pbc::RepeatedField<global::team.TeamBrief> teams_ = new pbc::RepeatedField<global::team.TeamBrief>();
    public pbc::RepeatedField<global::team.TeamBrief> teams {
      get { return teams_; }
    }

    private int taskId_;
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (tab != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(tab);
      }
      players_.WriteTo(output, _repeated_players_codec);
      teams_.WriteTo(output, _repeated_teams_codec);
      if (taskId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(taskId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (tab != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(tab);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      size += teams_.CalculateSize(_repeated_teams_codec);
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            tab = input.ReadInt32();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 26: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
          case 32: {
            taskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TeamList : pb::IMessage {
    private static readonly pb::MessageParser<TeamList> _parser = new pb::MessageParser<TeamList>(() => new TeamList());
    public static pb::MessageParser<TeamList> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::team.TeamBrief> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(10, global::team.TeamBrief.Parser);
    private readonly pbc::RepeatedField<global::team.TeamBrief> teams_ = new pbc::RepeatedField<global::team.TeamBrief>();
    public pbc::RepeatedField<global::team.TeamBrief> teams {
      get { return teams_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      teams_.WriteTo(output, _repeated_teams_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += teams_.CalculateSize(_repeated_teams_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///打开组队面板响应
  /// </summary>
  public sealed class GetTeamInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<GetTeamInfoResponse> _parser = new pb::MessageParser<GetTeamInfoResponse>(() => new GetTeamInfoResponse());
    public static pb::MessageParser<GetTeamInfoResponse> Parser { get { return _parser; } }

    private global::team.TeamInfo myTeam_;
    public global::team.TeamInfo myTeam {
      get { return myTeam_; }
      set {
        myTeam_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (myTeam_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(myTeam);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (myTeam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(myTeam);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (myTeam_ == null) {
              myTeam_ = new global::team.TeamInfo();
            }
            input.ReadMessage(myTeam_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加入队伍响应
  /// </summary>
  public sealed class JoinTeamResponse : pb::IMessage {
    private static readonly pb::MessageParser<JoinTeamResponse> _parser = new pb::MessageParser<JoinTeamResponse>(() => new JoinTeamResponse());
    public static pb::MessageParser<JoinTeamResponse> Parser { get { return _parser; } }

    private long teamId_;
    public long teamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    private global::team.TeamMember joiner_;
    /// <summary>
    ///加入者
    /// </summary>
    public global::team.TeamMember joiner {
      get { return joiner_; }
      set {
        joiner_ = value;
      }
    }

    private long leaderId_;
    /// <summary>
    ///队长id
    /// </summary>
    public long leaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(teamId);
      }
      if (joiner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(joiner);
      }
      if (leaderId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(leaderId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (teamId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(teamId);
      }
      if (joiner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(joiner);
      }
      if (leaderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(leaderId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            teamId = input.ReadInt64();
            break;
          }
          case 18: {
            if (joiner_ == null) {
              joiner_ = new global::team.TeamMember();
            }
            input.ReadMessage(joiner_);
            break;
          }
          case 24: {
            leaderId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///离开队伍响应
  /// </summary>
  public sealed class LeaveTeamResponse : pb::IMessage {
    private static readonly pb::MessageParser<LeaveTeamResponse> _parser = new pb::MessageParser<LeaveTeamResponse>(() => new LeaveTeamResponse());
    public static pb::MessageParser<LeaveTeamResponse> Parser { get { return _parser; } }

    private long roleId_;
    /// <summary>
    ///离开队伍的id
    /// </summary>
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private long leaderId_;
    /// <summary>
    ///变更后的队长id
    /// </summary>
    public long leaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (leaderId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(leaderId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (leaderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(leaderId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 16: {
            leaderId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///申请加入队伍
  /// </summary>
  public sealed class ApplyTeamRequest : pb::IMessage {
    private static readonly pb::MessageParser<ApplyTeamRequest> _parser = new pb::MessageParser<ApplyTeamRequest>(() => new ApplyTeamRequest());
    public static pb::MessageParser<ApplyTeamRequest> Parser { get { return _parser; } }

    private long teamId_;
    public long teamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(teamId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (teamId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(teamId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            teamId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///队长审核
  /// </summary>
  public sealed class ConfirmTeamApplyRequest : pb::IMessage {
    private static readonly pb::MessageParser<ConfirmTeamApplyRequest> _parser = new pb::MessageParser<ConfirmTeamApplyRequest>(() => new ConfirmTeamApplyRequest());
    public static pb::MessageParser<ConfirmTeamApplyRequest> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private int confirm_;
    /// <summary>
    ///ConfirmTeamApplyType是否同意
    /// </summary>
    public int confirm {
      get { return confirm_; }
      set {
        confirm_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (confirm != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(confirm);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (confirm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(confirm);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 16: {
            confirm = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///邀请组队请求
  /// </summary>
  public sealed class InviteTeamRequest : pb::IMessage {
    private static readonly pb::MessageParser<InviteTeamRequest> _parser = new pb::MessageParser<InviteTeamRequest>(() => new InviteTeamRequest());
    public static pb::MessageParser<InviteTeamRequest> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private int tab_;
    /// <summary>
    ///TeamTab
    /// </summary>
    public int tab {
      get { return tab_; }
      set {
        tab_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (tab != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(tab);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (tab != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(tab);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 16: {
            tab = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///被邀请方收到的消息
  /// </summary>
  public sealed class InviteTeamMsg : pb::IMessage {
    private static readonly pb::MessageParser<InviteTeamMsg> _parser = new pb::MessageParser<InviteTeamMsg>(() => new InviteTeamMsg());
    public static pb::MessageParser<InviteTeamMsg> Parser { get { return _parser; } }

    private long teamId_;
    public long teamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    ///邀请者的名字
    /// </summary>
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long inviter_;
    /// <summary>
    ///邀请者的id
    /// </summary>
    public long inviter {
      get { return inviter_; }
      set {
        inviter_ = value;
      }
    }

    private int career_;
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    private int sex_;
    /// <summary>
    ///性别
    /// </summary>
    public int sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(teamId);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (inviter != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(inviter);
      }
      if (career != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(career);
      }
      if (sex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(sex);
      }
      if (level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(level);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (teamId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(teamId);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (inviter != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(inviter);
      }
      if (career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sex);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            teamId = input.ReadInt64();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 24: {
            inviter = input.ReadInt64();
            break;
          }
          case 32: {
            career = input.ReadInt32();
            break;
          }
          case 40: {
            sex = input.ReadInt32();
            break;
          }
          case 48: {
            level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///确认组队邀请
  /// </summary>
  public sealed class ConfirmTeamInviteRequest : pb::IMessage {
    private static readonly pb::MessageParser<ConfirmTeamInviteRequest> _parser = new pb::MessageParser<ConfirmTeamInviteRequest>(() => new ConfirmTeamInviteRequest());
    public static pb::MessageParser<ConfirmTeamInviteRequest> Parser { get { return _parser; } }

    private long teamId_;
    public long teamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    private int confirm_;
    /// <summary>
    ///ConfirmTeamApplyType
    /// </summary>
    public int confirm {
      get { return confirm_; }
      set {
        confirm_ = value;
      }
    }

    private long inviter_;
    public long inviter {
      get { return inviter_; }
      set {
        inviter_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(teamId);
      }
      if (confirm != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(confirm);
      }
      if (inviter != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(inviter);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (teamId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(teamId);
      }
      if (confirm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(confirm);
      }
      if (inviter != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(inviter);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            teamId = input.ReadInt64();
            break;
          }
          case 16: {
            confirm = input.ReadInt32();
            break;
          }
          case 24: {
            inviter = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///转让队长请求
  /// </summary>
  public sealed class ChangeTeamLeaderRequest : pb::IMessage {
    private static readonly pb::MessageParser<ChangeTeamLeaderRequest> _parser = new pb::MessageParser<ChangeTeamLeaderRequest>(() => new ChangeTeamLeaderRequest());
    public static pb::MessageParser<ChangeTeamLeaderRequest> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///队长变更响应
  /// </summary>
  public sealed class TeamLeaderChanged : pb::IMessage {
    private static readonly pb::MessageParser<TeamLeaderChanged> _parser = new pb::MessageParser<TeamLeaderChanged>(() => new TeamLeaderChanged());
    public static pb::MessageParser<TeamLeaderChanged> Parser { get { return _parser; } }

    private long newLeaderId_;
    public long newLeaderId {
      get { return newLeaderId_; }
      set {
        newLeaderId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (newLeaderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(newLeaderId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (newLeaderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(newLeaderId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            newLeaderId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///退队或踢人,自己退填自己的id
  /// </summary>
  public sealed class LeaveTeamRequest : pb::IMessage {
    private static readonly pb::MessageParser<LeaveTeamRequest> _parser = new pb::MessageParser<LeaveTeamRequest>(() => new LeaveTeamRequest());
    public static pb::MessageParser<LeaveTeamRequest> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置组队模式
  /// </summary>
  public sealed class SetTeamModeRequest : pb::IMessage {
    private static readonly pb::MessageParser<SetTeamModeRequest> _parser = new pb::MessageParser<SetTeamModeRequest>(() => new SetTeamModeRequest());
    public static pb::MessageParser<SetTeamModeRequest> Parser { get { return _parser; } }

    private int teamMode_;
    /// <summary>
    ///0自动 1手动 2拒绝
    /// </summary>
    public int teamMode {
      get { return teamMode_; }
      set {
        teamMode_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (teamMode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(teamMode);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (teamMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(teamMode);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            teamMode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///召唤
  /// </summary>
  public sealed class CallBack : pb::IMessage {
    private static readonly pb::MessageParser<CallBack> _parser = new pb::MessageParser<CallBack>(() => new CallBack());
    public static pb::MessageParser<CallBack> Parser { get { return _parser; } }

    private long caller_;
    /// <summary>
    ///发起者ID
    /// </summary>
    public long caller {
      get { return caller_; }
      set {
        caller_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    ///发起者名字
    /// </summary>
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string mapName_ = "";
    /// <summary>
    ///地图名字
    /// </summary>
    public string mapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long time_;
    /// <summary>
    ///发起的时间
    /// </summary>
    public long time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private long callBackId_;
    /// <summary>
    ///传送唯一id号
    /// </summary>
    public long callBackId {
      get { return callBackId_; }
      set {
        callBackId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (caller != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(caller);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (mapName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(mapName);
      }
      if (time != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(time);
      }
      if (callBackId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(callBackId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (caller != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(caller);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (mapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(mapName);
      }
      if (time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(time);
      }
      if (callBackId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(callBackId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            caller = input.ReadInt64();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 26: {
            mapName = input.ReadString();
            break;
          }
          case 32: {
            time = input.ReadInt64();
            break;
          }
          case 40: {
            callBackId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///召唤响应
  /// </summary>
  public sealed class CallBackInfo : pb::IMessage {
    private static readonly pb::MessageParser<CallBackInfo> _parser = new pb::MessageParser<CallBackInfo>(() => new CallBackInfo());
    public static pb::MessageParser<CallBackInfo> Parser { get { return _parser; } }

    private long callBackId_;
    /// <summary>
    ///召唤令唯一id
    /// </summary>
    public long callBackId {
      get { return callBackId_; }
      set {
        callBackId_ = value;
      }
    }

    private bool agree_;
    /// <summary>
    ///是否同意
    /// </summary>
    public bool agree {
      get { return agree_; }
      set {
        agree_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (callBackId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(callBackId);
      }
      if (agree != false) {
        output.WriteRawTag(16);
        output.WriteBool(agree);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (callBackId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(callBackId);
      }
      if (agree != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            callBackId = input.ReadInt64();
            break;
          }
          case 16: {
            agree = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///队伍目标请求
  /// </summary>
  public sealed class TeamTargetReq : pb::IMessage {
    private static readonly pb::MessageParser<TeamTargetReq> _parser = new pb::MessageParser<TeamTargetReq>(() => new TeamTargetReq());
    public static pb::MessageParser<TeamTargetReq> Parser { get { return _parser; } }

    private int taskId_;
    /// <summary>
    ///目标任务ID
    /// </summary>
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (taskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(taskId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            taskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///队伍目标响应
  /// </summary>
  public sealed class TeamTargetAck : pb::IMessage {
    private static readonly pb::MessageParser<TeamTargetAck> _parser = new pb::MessageParser<TeamTargetAck>(() => new TeamTargetAck());
    public static pb::MessageParser<TeamTargetAck> Parser { get { return _parser; } }

    private int taskId_;
    /// <summary>
    ///目标任务ID
    /// </summary>
    public int taskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (taskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(taskId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (taskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(taskId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            taskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///在家族频道拉取玩家加入队伍
  /// </summary>
  public sealed class UnionJoinTeamReq : pb::IMessage {
    private static readonly pb::MessageParser<UnionJoinTeamReq> _parser = new pb::MessageParser<UnionJoinTeamReq>(() => new UnionJoinTeamReq());
    public static pb::MessageParser<UnionJoinTeamReq> Parser { get { return _parser; } }

    private int type_;
    /// <summary>
    ///0-家族 1-国家
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///队伍令传送响应
  /// </summary>
  public sealed class TeamCallBackAck : pb::IMessage {
    private static readonly pb::MessageParser<TeamCallBackAck> _parser = new pb::MessageParser<TeamCallBackAck>(() => new TeamCallBackAck());
    public static pb::MessageParser<TeamCallBackAck> Parser { get { return _parser; } }

    private long callBackId_;
    /// <summary>
    ///队伍回包id
    /// </summary>
    public long callBackId {
      get { return callBackId_; }
      set {
        callBackId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (callBackId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(callBackId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (callBackId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(callBackId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            callBackId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家血量信息;
  /// </summary>
  public sealed class PlayerHpMpInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerHpMpInfo> _parser = new pb::MessageParser<PlayerHpMpInfo>(() => new PlayerHpMpInfo());
    public static pb::MessageParser<PlayerHpMpInfo> Parser { get { return _parser; } }

    private long id_;
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int hp_;
    public int hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int mp_;
    public int mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    private int maxHp_;
    public int maxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    private int maxMp_;
    public int maxMp {
      get { return maxMp_; }
      set {
        maxMp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
      if (hp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(hp);
      }
      if (mp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(mp);
      }
      if (maxHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(maxHp);
      }
      if (maxMp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(maxMp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      if (hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hp);
      }
      if (mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mp);
      }
      if (maxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxHp);
      }
      if (maxMp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxMp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
          case 16: {
            hp = input.ReadInt32();
            break;
          }
          case 24: {
            mp = input.ReadInt32();
            break;
          }
          case 32: {
            maxHp = input.ReadInt32();
            break;
          }
          case 40: {
            maxMp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PlayerLevelInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerLevelInfo> _parser = new pb::MessageParser<PlayerLevelInfo>(() => new PlayerLevelInfo());
    public static pb::MessageParser<PlayerLevelInfo> Parser { get { return _parser; } }

    private long id_;
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int level_;
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
      if (level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(level);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
          case 16: {
            level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
