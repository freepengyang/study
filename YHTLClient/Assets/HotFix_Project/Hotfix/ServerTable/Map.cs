// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace map {

  #region Messages
  public sealed class RoundPlayer : pb::IMessage {
    private static readonly pb::MessageParser<RoundPlayer> _parser = new pb::MessageParser<RoundPlayer>(() => new RoundPlayer());
    public static pb::MessageParser<RoundPlayer> Parser { get { return _parser; } }

    private global::user.RoleBrief player_;
    public global::user.RoleBrief player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    private long roleCopyDieTime_;
    /// <summary>
    ///分身到期时间,如果没分身为0
    /// </summary>
    public long roleCopyDieTime {
      get { return roleCopyDieTime_; }
      set {
        roleCopyDieTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(player);
      }
      if (roleCopyDieTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(roleCopyDieTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(player);
      }
      if (roleCopyDieTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleCopyDieTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (player_ == null) {
              player_ = new global::user.RoleBrief();
            }
            input.ReadMessage(player_);
            break;
          }
          case 16: {
            roleCopyDieTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class RoundMonster : pb::IMessage {
    private static readonly pb::MessageParser<RoundMonster> _parser = new pb::MessageParser<RoundMonster>(() => new RoundMonster());
    public static pb::MessageParser<RoundMonster> Parser { get { return _parser; } }

    private long monsterId_;
    /// <summary>
    ///怪物ID
    /// </summary>
    public long monsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    private int monsterConfigId_;
    /// <summary>
    ///怪物模版ID
    /// </summary>
    public int monsterConfigId {
      get { return monsterConfigId_; }
      set {
        monsterConfigId_ = value;
      }
    }

    private string monsterName_ = "";
    /// <summary>
    ///怪物名称
    /// </summary>
    public string monsterName {
      get { return monsterName_; }
      set {
        monsterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int hp_;
    /// <summary>
    ///血量
    /// </summary>
    public int hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int maxHp_;
    /// <summary>
    ///最大血量
    /// </summary>
    public int maxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::fight.BufferInfo> _repeated_buffers_codec
        = pb::FieldCodec.ForMessage(74, global::fight.BufferInfo.Parser);
    private readonly pbc::RepeatedField<global::fight.BufferInfo> buffers_ = new pbc::RepeatedField<global::fight.BufferInfo>();
    /// <summary>
    ///buffer
    /// </summary>
    public pbc::RepeatedField<global::fight.BufferInfo> buffers {
      get { return buffers_; }
    }

    private long masterId_;
    /// <summary>
    ///镖车主人id, 婚车主人ID
    /// </summary>
    public long masterId {
      get { return masterId_; }
      set {
        masterId_ = value;
      }
    }

    private string owner_ = "";
    /// <summary>
    ///boss所属
    /// </summary>
    public string owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int dig_;
    /// <summary>
    ///剩余可挖次数
    /// </summary>
    public int dig {
      get { return dig_; }
      set {
        dig_ = value;
      }
    }

    private int dir_;
    /// <summary>
    ///方向
    /// </summary>
    public int dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    private long camp_;
    /// <summary>
    ///阵营
    /// </summary>
    public long camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    private int midIndex_;
    public int midIndex {
      get { return midIndex_; }
      set {
        midIndex_ = value;
      }
    }

    private long masterId2_;
    /// <summary>
    ///婚车主人ID2
    /// </summary>
    public long masterId2 {
      get { return masterId2_; }
      set {
        masterId2_ = value;
      }
    }

    private int ruMo_;
    /// <summary>
    ///入魔bossID
    /// </summary>
    public int ruMo {
      get { return ruMo_; }
      set {
        ruMo_ = value;
      }
    }

    private int speed_;
    /// <summary>
    ///怪物移动速度
    /// </summary>
    public int speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (monsterId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(monsterId);
      }
      if (monsterConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(monsterConfigId);
      }
      if (monsterName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(monsterName);
      }
      if (level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(level);
      }
      if (hp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(hp);
      }
      if (maxHp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(maxHp);
      }
      if (x != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(y);
      }
      buffers_.WriteTo(output, _repeated_buffers_codec);
      if (masterId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(masterId);
      }
      if (owner.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(owner);
      }
      if (dig != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(dig);
      }
      if (dir != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(dir);
      }
      if (camp != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(camp);
      }
      if (midIndex != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(midIndex);
      }
      if (masterId2 != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(masterId2);
      }
      if (ruMo != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ruMo);
      }
      if (speed != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(speed);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (monsterId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(monsterId);
      }
      if (monsterConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(monsterConfigId);
      }
      if (monsterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(monsterName);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hp);
      }
      if (maxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxHp);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      size += buffers_.CalculateSize(_repeated_buffers_codec);
      if (masterId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(masterId);
      }
      if (owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(owner);
      }
      if (dig != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(dig);
      }
      if (dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(dir);
      }
      if (camp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(camp);
      }
      if (midIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(midIndex);
      }
      if (masterId2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(masterId2);
      }
      if (ruMo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ruMo);
      }
      if (speed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(speed);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            monsterId = input.ReadInt64();
            break;
          }
          case 16: {
            monsterConfigId = input.ReadInt32();
            break;
          }
          case 26: {
            monsterName = input.ReadString();
            break;
          }
          case 32: {
            level = input.ReadInt32();
            break;
          }
          case 40: {
            hp = input.ReadInt32();
            break;
          }
          case 48: {
            maxHp = input.ReadInt32();
            break;
          }
          case 56: {
            x = input.ReadInt32();
            break;
          }
          case 64: {
            y = input.ReadInt32();
            break;
          }
          case 74: {
            buffers_.AddEntriesFrom(input, _repeated_buffers_codec);
            break;
          }
          case 80: {
            masterId = input.ReadInt64();
            break;
          }
          case 90: {
            owner = input.ReadString();
            break;
          }
          case 96: {
            dig = input.ReadInt32();
            break;
          }
          case 104: {
            dir = input.ReadInt32();
            break;
          }
          case 112: {
            camp = input.ReadInt64();
            break;
          }
          case 120: {
            midIndex = input.ReadInt32();
            break;
          }
          case 128: {
            masterId2 = input.ReadInt64();
            break;
          }
          case 136: {
            ruMo = input.ReadInt32();
            break;
          }
          case 144: {
            speed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoundPet : pb::IMessage {
    private static readonly pb::MessageParser<RoundPet> _parser = new pb::MessageParser<RoundPet>(() => new RoundPet());
    public static pb::MessageParser<RoundPet> Parser { get { return _parser; } }

    private long petId_;
    /// <summary>
    ///宠物,法神ID
    /// </summary>
    public long petId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    private int monsterConfigId_;
    /// <summary>
    ///怪物模版ID
    /// </summary>
    public int monsterConfigId {
      get { return monsterConfigId_; }
      set {
        monsterConfigId_ = value;
      }
    }

    private string petName_ = "";
    /// <summary>
    ///怪物名称
    /// </summary>
    public string petName {
      get { return petName_; }
      set {
        petName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int hp_;
    /// <summary>
    ///血量
    /// </summary>
    public int hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int maxHp_;
    /// <summary>
    ///最大血量
    /// </summary>
    public int maxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private long masterId_;
    /// <summary>
    ///主人id
    /// </summary>
    public long masterId {
      get { return masterId_; }
      set {
        masterId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::fight.BufferInfo> _repeated_buffers_codec
        = pb::FieldCodec.ForMessage(82, global::fight.BufferInfo.Parser);
    private readonly pbc::RepeatedField<global::fight.BufferInfo> buffers_ = new pbc::RepeatedField<global::fight.BufferInfo>();
    /// <summary>
    ///buffer
    /// </summary>
    public pbc::RepeatedField<global::fight.BufferInfo> buffers {
      get { return buffers_; }
    }

    private int state_;
    /// <summary>
    ///神兽状态2跟随,3战斗
    /// </summary>
    public int state {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    private int skillLevel_;
    /// <summary>
    ///召唤宠物的技能等级
    /// </summary>
    public int skillLevel {
      get { return skillLevel_; }
      set {
        skillLevel_ = value;
      }
    }

    private int speed_;
    /// <summary>
    ///宠物速度
    /// </summary>
    public int speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_skills_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> skills_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///技能列表;
    /// </summary>
    public pbc::RepeatedField<int> skills {
      get { return skills_; }
    }

    private long camp_;
    /// <summary>
    ///阵营，在跨服场景中有用
    /// </summary>
    public long camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    private int zhanhuiId_;
    /// <summary>
    ///Zhanhun suit id;
    /// </summary>
    public int zhanhuiId {
      get { return zhanhuiId_; }
      set {
        zhanhuiId_ = value;
      }
    }

    private bool hasShield_;
    /// <summary>
    ///是否拥有护体;
    /// </summary>
    public bool hasShield {
      get { return hasShield_; }
      set {
        hasShield_ = value;
      }
    }

    private int shieldAttr_;
    /// <summary>
    ///护盾值;
    /// </summary>
    public int shieldAttr {
      get { return shieldAttr_; }
      set {
        shieldAttr_ = value;
      }
    }

    private int maxShield_;
    public int maxShield {
      get { return maxShield_; }
      set {
        maxShield_ = value;
      }
    }

    private bool activePvp_;
    /// <summary>
    ///是否能激活pvp;
    /// </summary>
    public bool activePvp {
      get { return activePvp_; }
      set {
        activePvp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (petId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(petId);
      }
      if (monsterConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(monsterConfigId);
      }
      if (petName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(petName);
      }
      if (level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(level);
      }
      if (hp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(hp);
      }
      if (maxHp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(maxHp);
      }
      if (x != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(y);
      }
      if (masterId != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(masterId);
      }
      buffers_.WriteTo(output, _repeated_buffers_codec);
      if (state != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(state);
      }
      if (skillLevel != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(skillLevel);
      }
      if (speed != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(speed);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      if (camp != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(camp);
      }
      if (zhanhuiId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(zhanhuiId);
      }
      if (hasShield != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(hasShield);
      }
      if (shieldAttr != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(shieldAttr);
      }
      if (maxShield != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(maxShield);
      }
      if (activePvp != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(activePvp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (petId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(petId);
      }
      if (monsterConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(monsterConfigId);
      }
      if (petName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(petName);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hp);
      }
      if (maxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxHp);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      if (masterId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(masterId);
      }
      size += buffers_.CalculateSize(_repeated_buffers_codec);
      if (state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(state);
      }
      if (skillLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(skillLevel);
      }
      if (speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(speed);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (camp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(camp);
      }
      if (zhanhuiId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(zhanhuiId);
      }
      if (hasShield != false) {
        size += 2 + 1;
      }
      if (shieldAttr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(shieldAttr);
      }
      if (maxShield != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(maxShield);
      }
      if (activePvp != false) {
        size += 2 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            petId = input.ReadInt64();
            break;
          }
          case 16: {
            monsterConfigId = input.ReadInt32();
            break;
          }
          case 26: {
            petName = input.ReadString();
            break;
          }
          case 32: {
            level = input.ReadInt32();
            break;
          }
          case 40: {
            hp = input.ReadInt32();
            break;
          }
          case 48: {
            maxHp = input.ReadInt32();
            break;
          }
          case 56: {
            x = input.ReadInt32();
            break;
          }
          case 64: {
            y = input.ReadInt32();
            break;
          }
          case 72: {
            masterId = input.ReadInt64();
            break;
          }
          case 82: {
            buffers_.AddEntriesFrom(input, _repeated_buffers_codec);
            break;
          }
          case 88: {
            state = input.ReadInt32();
            break;
          }
          case 96: {
            skillLevel = input.ReadInt32();
            break;
          }
          case 104: {
            speed = input.ReadInt32();
            break;
          }
          case 114:
          case 112: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 120: {
            camp = input.ReadInt64();
            break;
          }
          case 128: {
            zhanhuiId = input.ReadInt32();
            break;
          }
          case 144: {
            hasShield = input.ReadBool();
            break;
          }
          case 152: {
            shieldAttr = input.ReadInt32();
            break;
          }
          case 160: {
            maxShield = input.ReadInt32();
            break;
          }
          case 168: {
            activePvp = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///npc守卫
  /// </summary>
  public sealed class RoundGuard : pb::IMessage {
    private static readonly pb::MessageParser<RoundGuard> _parser = new pb::MessageParser<RoundGuard>(() => new RoundGuard());
    public static pb::MessageParser<RoundGuard> Parser { get { return _parser; } }

    private long guardId_;
    public long guardId {
      get { return guardId_; }
      set {
        guardId_ = value;
      }
    }

    private int monsterConfigId_;
    public int monsterConfigId {
      get { return monsterConfigId_; }
      set {
        monsterConfigId_ = value;
      }
    }

    private string guardName_ = "";
    public string guardName {
      get { return guardName_; }
      set {
        guardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int level_;
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int hp_;
    public int hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int maxHp_;
    public int maxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::fight.BufferInfo> _repeated_buffers_codec
        = pb::FieldCodec.ForMessage(74, global::fight.BufferInfo.Parser);
    private readonly pbc::RepeatedField<global::fight.BufferInfo> buffers_ = new pbc::RepeatedField<global::fight.BufferInfo>();
    public pbc::RepeatedField<global::fight.BufferInfo> buffers {
      get { return buffers_; }
    }

    private int energy_;
    /// <summary>
    ///鼓舞能量
    /// </summary>
    public int energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (guardId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(guardId);
      }
      if (monsterConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(monsterConfigId);
      }
      if (guardName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(guardName);
      }
      if (level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(level);
      }
      if (hp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(hp);
      }
      if (maxHp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(maxHp);
      }
      if (x != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(y);
      }
      buffers_.WriteTo(output, _repeated_buffers_codec);
      if (energy != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(energy);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (guardId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(guardId);
      }
      if (monsterConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(monsterConfigId);
      }
      if (guardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(guardName);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hp);
      }
      if (maxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxHp);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      size += buffers_.CalculateSize(_repeated_buffers_codec);
      if (energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(energy);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            guardId = input.ReadInt64();
            break;
          }
          case 16: {
            monsterConfigId = input.ReadInt32();
            break;
          }
          case 26: {
            guardName = input.ReadString();
            break;
          }
          case 32: {
            level = input.ReadInt32();
            break;
          }
          case 40: {
            hp = input.ReadInt32();
            break;
          }
          case 48: {
            maxHp = input.ReadInt32();
            break;
          }
          case 56: {
            x = input.ReadInt32();
            break;
          }
          case 64: {
            y = input.ReadInt32();
            break;
          }
          case 74: {
            buffers_.AddEntriesFrom(input, _repeated_buffers_codec);
            break;
          }
          case 80: {
            energy = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoundItem : pb::IMessage {
    private static readonly pb::MessageParser<RoundItem> _parser = new pb::MessageParser<RoundItem>(() => new RoundItem());
    public static pb::MessageParser<RoundItem> Parser { get { return _parser; } }

    private long itemId_;
    public long itemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int itemConfigId_;
    public int itemConfigId {
      get { return itemConfigId_; }
      set {
        itemConfigId_ = value;
      }
    }

    private int count_;
    /// <summary>
    ///物品数量
    /// </summary>
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private long endTime_;
    /// <summary>
    ///到期时间
    /// </summary>
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    private long owner_;
    public long owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    private long ownerTeamId_;
    /// <summary>
    ///组队id
    /// </summary>
    public long ownerTeamId {
      get { return ownerTeamId_; }
      set {
        ownerTeamId_ = value;
      }
    }

    private long unionId_;
    /// <summary>
    ///家族id
    /// </summary>
    public long unionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    private long protectTime_;
    /// <summary>
    ///保护时间
    /// </summary>
    public long protectTime {
      get { return protectTime_; }
      set {
        protectTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (itemId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(itemId);
      }
      if (itemConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(itemConfigId);
      }
      if (count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(count);
      }
      if (x != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(y);
      }
      if (endTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(endTime);
      }
      if (owner != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(owner);
      }
      if (ownerTeamId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(ownerTeamId);
      }
      if (unionId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(unionId);
      }
      if (protectTime != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(protectTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (itemId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(itemId);
      }
      if (itemConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(itemConfigId);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      if (owner != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(owner);
      }
      if (ownerTeamId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ownerTeamId);
      }
      if (unionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(unionId);
      }
      if (protectTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(protectTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemId = input.ReadInt64();
            break;
          }
          case 16: {
            itemConfigId = input.ReadInt32();
            break;
          }
          case 24: {
            count = input.ReadInt32();
            break;
          }
          case 32: {
            x = input.ReadInt32();
            break;
          }
          case 40: {
            y = input.ReadInt32();
            break;
          }
          case 48: {
            endTime = input.ReadInt64();
            break;
          }
          case 56: {
            owner = input.ReadInt64();
            break;
          }
          case 64: {
            ownerTeamId = input.ReadInt64();
            break;
          }
          case 80: {
            unionId = input.ReadInt64();
            break;
          }
          case 88: {
            protectTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class RoundNPC : pb::IMessage {
    private static readonly pb::MessageParser<RoundNPC> _parser = new pb::MessageParser<RoundNPC>(() => new RoundNPC());
    public static pb::MessageParser<RoundNPC> Parser { get { return _parser; } }

    private long npcId_;
    public long npcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    private int npcConfigId_;
    public int npcConfigId {
      get { return npcConfigId_; }
      set {
        npcConfigId_ = value;
      }
    }

    private string name_ = "";
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int hp_;
    public int hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int maxHp_;
    public int maxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private int olderFlag_;
    public int olderFlag {
      get { return olderFlag_; }
      set {
        olderFlag_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (npcId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(npcId);
      }
      if (npcConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(npcConfigId);
      }
      if (name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(name);
      }
      if (hp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(hp);
      }
      if (maxHp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(maxHp);
      }
      if (x != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(y);
      }
      if (olderFlag != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(olderFlag);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (npcId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(npcId);
      }
      if (npcConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(npcConfigId);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hp);
      }
      if (maxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxHp);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      if (olderFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(olderFlag);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            npcId = input.ReadInt64();
            break;
          }
          case 16: {
            npcConfigId = input.ReadInt32();
            break;
          }
          case 26: {
            name = input.ReadString();
            break;
          }
          case 32: {
            hp = input.ReadInt32();
            break;
          }
          case 40: {
            maxHp = input.ReadInt32();
            break;
          }
          case 48: {
            x = input.ReadInt32();
            break;
          }
          case 56: {
            y = input.ReadInt32();
            break;
          }
          case 64: {
            olderFlag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoundBuffer : pb::IMessage {
    private static readonly pb::MessageParser<RoundBuffer> _parser = new pb::MessageParser<RoundBuffer>(() => new RoundBuffer());
    public static pb::MessageParser<RoundBuffer> Parser { get { return _parser; } }

    private long bufferId_;
    public long bufferId {
      get { return bufferId_; }
      set {
        bufferId_ = value;
      }
    }

    private int bufferConfigId_;
    public int bufferConfigId {
      get { return bufferConfigId_; }
      set {
        bufferConfigId_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private int leftTime_;
    /// <summary>
    ///剩余时间毫秒
    /// </summary>
    public int leftTime {
      get { return leftTime_; }
      set {
        leftTime_ = value;
      }
    }

    private long serverTime_;
    /// <summary>
    ///服务器时间
    /// </summary>
    public long serverTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    private long masterId_;
    /// <summary>
    ///释放者ID
    /// </summary>
    public long masterId {
      get { return masterId_; }
      set {
        masterId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bufferId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(bufferId);
      }
      if (bufferConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(bufferConfigId);
      }
      if (x != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(y);
      }
      if (leftTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(leftTime);
      }
      if (serverTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(serverTime);
      }
      if (masterId != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(masterId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bufferId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(bufferId);
      }
      if (bufferConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bufferConfigId);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      if (leftTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(leftTime);
      }
      if (serverTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(serverTime);
      }
      if (masterId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(masterId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bufferId = input.ReadInt64();
            break;
          }
          case 16: {
            bufferConfigId = input.ReadInt32();
            break;
          }
          case 24: {
            x = input.ReadInt32();
            break;
          }
          case 32: {
            y = input.ReadInt32();
            break;
          }
          case 40: {
            leftTime = input.ReadInt32();
            break;
          }
          case 48: {
            serverTime = input.ReadInt64();
            break;
          }
          case 56: {
            masterId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class RoundTrigger : pb::IMessage {
    private static readonly pb::MessageParser<RoundTrigger> _parser = new pb::MessageParser<RoundTrigger>(() => new RoundTrigger());
    public static pb::MessageParser<RoundTrigger> Parser { get { return _parser; } }

    private long triggerId_;
    public long triggerId {
      get { return triggerId_; }
      set {
        triggerId_ = value;
      }
    }

    private int triggerConfigId_;
    public int triggerConfigId {
      get { return triggerConfigId_; }
      set {
        triggerConfigId_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private int direction_;
    public int direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    private long camp_;
    /// <summary>
    ///阵营
    /// </summary>
    public long camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    private bool isSabacDoor_;
    /// <summary>
    ///是否是sabac传送门;
    /// </summary>
    public bool isSabacDoor {
      get { return isSabacDoor_; }
      set {
        isSabacDoor_ = value;
      }
    }

    private bool isDoorOpen_;
    /// <summary>
    ///城门是否打开的;
    /// </summary>
    public bool isDoorOpen {
      get { return isDoorOpen_; }
      set {
        isDoorOpen_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (triggerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(triggerId);
      }
      if (triggerConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(triggerConfigId);
      }
      if (x != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(y);
      }
      if (direction != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(direction);
      }
      if (camp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(camp);
      }
      if (isSabacDoor != false) {
        output.WriteRawTag(56);
        output.WriteBool(isSabacDoor);
      }
      if (isDoorOpen != false) {
        output.WriteRawTag(64);
        output.WriteBool(isDoorOpen);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (triggerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(triggerId);
      }
      if (triggerConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(triggerConfigId);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      if (direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(direction);
      }
      if (camp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(camp);
      }
      if (isSabacDoor != false) {
        size += 1 + 1;
      }
      if (isDoorOpen != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            triggerId = input.ReadInt64();
            break;
          }
          case 16: {
            triggerConfigId = input.ReadInt32();
            break;
          }
          case 24: {
            x = input.ReadInt32();
            break;
          }
          case 32: {
            y = input.ReadInt32();
            break;
          }
          case 40: {
            direction = input.ReadInt32();
            break;
          }
          case 48: {
            camp = input.ReadInt64();
            break;
          }
          case 56: {
            isSabacDoor = input.ReadBool();
            break;
          }
          case 64: {
            isDoorOpen = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///SafeAreaCoord
  /// </summary>
  public sealed class RoundSafeAreaCoord : pb::IMessage {
    private static readonly pb::MessageParser<RoundSafeAreaCoord> _parser = new pb::MessageParser<RoundSafeAreaCoord>(() => new RoundSafeAreaCoord());
    public static pb::MessageParser<RoundSafeAreaCoord> Parser { get { return _parser; } }

    private int effectConfigId_;
    /// <summary>
    ///SafeAreaCoord 配置id;
    /// </summary>
    public int effectConfigId {
      get { return effectConfigId_; }
      set {
        effectConfigId_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private long id_;
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (effectConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(effectConfigId);
      }
      if (x != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(y);
      }
      if (id != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (effectConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(effectConfigId);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            effectConfigId = input.ReadInt32();
            break;
          }
          case 24: {
            x = input.ReadInt32();
            break;
          }
          case 32: {
            y = input.ReadInt32();
            break;
          }
          case 40: {
            id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class RoundBox : pb::IMessage {
    private static readonly pb::MessageParser<RoundBox> _parser = new pb::MessageParser<RoundBox>(() => new RoundBox());
    public static pb::MessageParser<RoundBox> Parser { get { return _parser; } }

    private long boxId_;
    public long boxId {
      get { return boxId_; }
      set {
        boxId_ = value;
      }
    }

    private int boxConfigId_;
    public int boxConfigId {
      get { return boxConfigId_; }
      set {
        boxConfigId_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private int type_;
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private bool open_;
    /// <summary>
    ///是否开启
    /// </summary>
    public bool open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    private bool close_;
    /// <summary>
    ///是否关闭
    /// </summary>
    public bool close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    private bool res_;
    /// <summary>
    ///服务器应答
    /// </summary>
    public bool res {
      get { return res_; }
      set {
        res_ = value;
      }
    }

    private int awardCount_;
    /// <summary>
    ///领取奖励次数
    /// </summary>
    public int awardCount {
      get { return awardCount_; }
      set {
        awardCount_ = value;
      }
    }

    private int maxAwardCount_;
    /// <summary>
    ///最大的可以领取奖励的次数
    /// </summary>
    public int maxAwardCount {
      get { return maxAwardCount_; }
      set {
        maxAwardCount_ = value;
      }
    }

    private int awardConfigId_;
    /// <summary>
    ///奖励的配置ID,MysteryShop
    /// </summary>
    public int awardConfigId {
      get { return awardConfigId_; }
      set {
        awardConfigId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (boxId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(boxId);
      }
      if (boxConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(boxConfigId);
      }
      if (x != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(y);
      }
      if (type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(type);
      }
      if (open != false) {
        output.WriteRawTag(48);
        output.WriteBool(open);
      }
      if (close != false) {
        output.WriteRawTag(56);
        output.WriteBool(close);
      }
      if (res != false) {
        output.WriteRawTag(64);
        output.WriteBool(res);
      }
      if (awardCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(awardCount);
      }
      if (maxAwardCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(maxAwardCount);
      }
      if (awardConfigId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(awardConfigId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (boxId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(boxId);
      }
      if (boxConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(boxConfigId);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      if (open != false) {
        size += 1 + 1;
      }
      if (close != false) {
        size += 1 + 1;
      }
      if (res != false) {
        size += 1 + 1;
      }
      if (awardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(awardCount);
      }
      if (maxAwardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxAwardCount);
      }
      if (awardConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(awardConfigId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            boxId = input.ReadInt64();
            break;
          }
          case 16: {
            boxConfigId = input.ReadInt32();
            break;
          }
          case 24: {
            x = input.ReadInt32();
            break;
          }
          case 32: {
            y = input.ReadInt32();
            break;
          }
          case 40: {
            type = input.ReadInt32();
            break;
          }
          case 48: {
            open = input.ReadBool();
            break;
          }
          case 56: {
            close = input.ReadBool();
            break;
          }
          case 64: {
            res = input.ReadBool();
            break;
          }
          case 72: {
            awardCount = input.ReadInt32();
            break;
          }
          case 80: {
            maxAwardCount = input.ReadInt32();
            break;
          }
          case 88: {
            awardConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BoxReq : pb::IMessage {
    private static readonly pb::MessageParser<BoxReq> _parser = new pb::MessageParser<BoxReq>(() => new BoxReq());
    public static pb::MessageParser<BoxReq> Parser { get { return _parser; } }

    private long boxId_;
    public long boxId {
      get { return boxId_; }
      set {
        boxId_ = value;
      }
    }

    private int type_;
    /// <summary>
    /// 1:开启 2:领奖
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private int data_;
    /// <summary>
    /// 1：如果开启，则表示客户端随机的序号 2：如果领奖,（1：免费 2：双倍 3：立刻)
    /// </summary>
    public int data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (boxId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(boxId);
      }
      if (type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(type);
      }
      if (data != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(data);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (boxId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(boxId);
      }
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      if (data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(data);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            boxId = input.ReadInt64();
            break;
          }
          case 16: {
            type = input.ReadInt32();
            break;
          }
          case 24: {
            data = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入地图后的返回消息
  /// </summary>
  public sealed class EnterMapResponse : pb::IMessage {
    private static readonly pb::MessageParser<EnterMapResponse> _parser = new pb::MessageParser<EnterMapResponse>(() => new EnterMapResponse());
    public static pb::MessageParser<EnterMapResponse> Parser { get { return _parser; } }

    private int mapId_;
    /// <summary>
    ///场景ID
    /// </summary>
    public int mapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    private int line_;
    /// <summary>
    ///场景分线
    /// </summary>
    public int line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    private int x_;
    /// <summary>
    ///x
    /// </summary>
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    /// <summary>
    ///y
    /// </summary>
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private int reason_;
    /// <summary>
    ///PositionChangeReason切换地图原因
    /// </summary>
    public int reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    private long serverTime_;
    public long serverTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_weather_codec
        = pb::FieldCodec.ForInt64(58);
    private readonly pbc::RepeatedField<long> weather_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 高32位为ID, 低32位为特效索引
    /// </summary>
    public pbc::RepeatedField<long> weather {
      get { return weather_; }
    }

    private int inPlaceReliveTimes_;
    /// <summary>
    ///今天已经原地复活的次数;
    /// </summary>
    public int inPlaceReliveTimes {
      get { return inPlaceReliveTimes_; }
      set {
        inPlaceReliveTimes_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(mapId);
      }
      if (line != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(line);
      }
      if (x != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(y);
      }
      if (reason != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(reason);
      }
      if (serverTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(serverTime);
      }
      weather_.WriteTo(output, _repeated_weather_codec);
      if (inPlaceReliveTimes != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(inPlaceReliveTimes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mapId);
      }
      if (line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(line);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      if (reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(reason);
      }
      if (serverTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(serverTime);
      }
      size += weather_.CalculateSize(_repeated_weather_codec);
      if (inPlaceReliveTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(inPlaceReliveTimes);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mapId = input.ReadInt32();
            break;
          }
          case 16: {
            line = input.ReadInt32();
            break;
          }
          case 24: {
            x = input.ReadInt32();
            break;
          }
          case 32: {
            y = input.ReadInt32();
            break;
          }
          case 40: {
            reason = input.ReadInt32();
            break;
          }
          case 48: {
            serverTime = input.ReadInt64();
            break;
          }
          case 58:
          case 56: {
            weather_.AddEntriesFrom(input, _repeated_weather_codec);
            break;
          }
          case 64: {
            inPlaceReliveTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新自己的视野
  /// </summary>
  public sealed class UpdateViewResponse : pb::IMessage {
    private static readonly pb::MessageParser<UpdateViewResponse> _parser = new pb::MessageParser<UpdateViewResponse>(() => new UpdateViewResponse());
    public static pb::MessageParser<UpdateViewResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::map.RoundPlayer> _repeated_enterPlayers_codec
        = pb::FieldCodec.ForMessage(10, global::map.RoundPlayer.Parser);
    private readonly pbc::RepeatedField<global::map.RoundPlayer> enterPlayers_ = new pbc::RepeatedField<global::map.RoundPlayer>();
    /// <summary>
    ///进入视野的玩家
    /// </summary>
    public pbc::RepeatedField<global::map.RoundPlayer> enterPlayers {
      get { return enterPlayers_; }
    }

    private static readonly pb::FieldCodec<global::map.RoundMonster> _repeated_enterMonsters_codec
        = pb::FieldCodec.ForMessage(18, global::map.RoundMonster.Parser);
    private readonly pbc::RepeatedField<global::map.RoundMonster> enterMonsters_ = new pbc::RepeatedField<global::map.RoundMonster>();
    /// <summary>
    ///进入视野的怪物
    /// </summary>
    public pbc::RepeatedField<global::map.RoundMonster> enterMonsters {
      get { return enterMonsters_; }
    }

    private static readonly pb::FieldCodec<long> _repeated_exitObjects_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> exitObjects_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///离开视野的对象ID
    /// </summary>
    public pbc::RepeatedField<long> exitObjects {
      get { return exitObjects_; }
    }

    private static readonly pb::FieldCodec<global::map.RoundItem> _repeated_enterItems_codec
        = pb::FieldCodec.ForMessage(34, global::map.RoundItem.Parser);
    private readonly pbc::RepeatedField<global::map.RoundItem> enterItems_ = new pbc::RepeatedField<global::map.RoundItem>();
    /// <summary>
    ///进入视野的物品
    /// </summary>
    public pbc::RepeatedField<global::map.RoundItem> enterItems {
      get { return enterItems_; }
    }

    private static readonly pb::FieldCodec<global::map.RoundNPC> _repeated_enterNPC_codec
        = pb::FieldCodec.ForMessage(42, global::map.RoundNPC.Parser);
    private readonly pbc::RepeatedField<global::map.RoundNPC> enterNPC_ = new pbc::RepeatedField<global::map.RoundNPC>();
    /// <summary>
    ///进入视野的npc
    /// </summary>
    public pbc::RepeatedField<global::map.RoundNPC> enterNPC {
      get { return enterNPC_; }
    }

    private static readonly pb::FieldCodec<global::map.RoundBuffer> _repeated_enterBuffers_codec
        = pb::FieldCodec.ForMessage(50, global::map.RoundBuffer.Parser);
    private readonly pbc::RepeatedField<global::map.RoundBuffer> enterBuffers_ = new pbc::RepeatedField<global::map.RoundBuffer>();
    /// <summary>
    ///进入视野的buffer
    /// </summary>
    public pbc::RepeatedField<global::map.RoundBuffer> enterBuffers {
      get { return enterBuffers_; }
    }

    private static readonly pb::FieldCodec<global::map.RoundPet> _repeated_enterPets_codec
        = pb::FieldCodec.ForMessage(58, global::map.RoundPet.Parser);
    private readonly pbc::RepeatedField<global::map.RoundPet> enterPets_ = new pbc::RepeatedField<global::map.RoundPet>();
    /// <summary>
    ///进入视野的宠物法神
    /// </summary>
    public pbc::RepeatedField<global::map.RoundPet> enterPets {
      get { return enterPets_; }
    }

    private static readonly pb::FieldCodec<global::map.RoundGuard> _repeated_enterGuards_codec
        = pb::FieldCodec.ForMessage(66, global::map.RoundGuard.Parser);
    private readonly pbc::RepeatedField<global::map.RoundGuard> enterGuards_ = new pbc::RepeatedField<global::map.RoundGuard>();
    /// <summary>
    ///进入视野的守卫
    /// </summary>
    public pbc::RepeatedField<global::map.RoundGuard> enterGuards {
      get { return enterGuards_; }
    }

    private static readonly pb::FieldCodec<global::map.RoundTrigger> _repeated_enterTriggers_codec
        = pb::FieldCodec.ForMessage(74, global::map.RoundTrigger.Parser);
    private readonly pbc::RepeatedField<global::map.RoundTrigger> enterTriggers_ = new pbc::RepeatedField<global::map.RoundTrigger>();
    /// <summary>
    ///进入视野的触发器
    /// </summary>
    public pbc::RepeatedField<global::map.RoundTrigger> enterTriggers {
      get { return enterTriggers_; }
    }

    private static readonly pb::FieldCodec<global::map.RoundBox> _repeated_enterBoxs_codec
        = pb::FieldCodec.ForMessage(90, global::map.RoundBox.Parser);
    private readonly pbc::RepeatedField<global::map.RoundBox> enterBoxs_ = new pbc::RepeatedField<global::map.RoundBox>();
    /// <summary>
    ///进入视野的宝箱
    /// </summary>
    public pbc::RepeatedField<global::map.RoundBox> enterBoxs {
      get { return enterBoxs_; }
    }

    private static readonly pb::FieldCodec<global::map.RoundSafeAreaCoord> _repeated_safeAreaeffects_codec
        = pb::FieldCodec.ForMessage(98, global::map.RoundSafeAreaCoord.Parser);
    private readonly pbc::RepeatedField<global::map.RoundSafeAreaCoord> safeAreaeffects_ = new pbc::RepeatedField<global::map.RoundSafeAreaCoord>();
    /// <summary>
    ///进入视野的特效
    /// </summary>
    public pbc::RepeatedField<global::map.RoundSafeAreaCoord> safeAreaeffects {
      get { return safeAreaeffects_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      enterPlayers_.WriteTo(output, _repeated_enterPlayers_codec);
      enterMonsters_.WriteTo(output, _repeated_enterMonsters_codec);
      exitObjects_.WriteTo(output, _repeated_exitObjects_codec);
      enterItems_.WriteTo(output, _repeated_enterItems_codec);
      enterNPC_.WriteTo(output, _repeated_enterNPC_codec);
      enterBuffers_.WriteTo(output, _repeated_enterBuffers_codec);
      enterPets_.WriteTo(output, _repeated_enterPets_codec);
      enterGuards_.WriteTo(output, _repeated_enterGuards_codec);
      enterTriggers_.WriteTo(output, _repeated_enterTriggers_codec);
      enterBoxs_.WriteTo(output, _repeated_enterBoxs_codec);
      safeAreaeffects_.WriteTo(output, _repeated_safeAreaeffects_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += enterPlayers_.CalculateSize(_repeated_enterPlayers_codec);
      size += enterMonsters_.CalculateSize(_repeated_enterMonsters_codec);
      size += exitObjects_.CalculateSize(_repeated_exitObjects_codec);
      size += enterItems_.CalculateSize(_repeated_enterItems_codec);
      size += enterNPC_.CalculateSize(_repeated_enterNPC_codec);
      size += enterBuffers_.CalculateSize(_repeated_enterBuffers_codec);
      size += enterPets_.CalculateSize(_repeated_enterPets_codec);
      size += enterGuards_.CalculateSize(_repeated_enterGuards_codec);
      size += enterTriggers_.CalculateSize(_repeated_enterTriggers_codec);
      size += enterBoxs_.CalculateSize(_repeated_enterBoxs_codec);
      size += safeAreaeffects_.CalculateSize(_repeated_safeAreaeffects_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            enterPlayers_.AddEntriesFrom(input, _repeated_enterPlayers_codec);
            break;
          }
          case 18: {
            enterMonsters_.AddEntriesFrom(input, _repeated_enterMonsters_codec);
            break;
          }
          case 26:
          case 24: {
            exitObjects_.AddEntriesFrom(input, _repeated_exitObjects_codec);
            break;
          }
          case 34: {
            enterItems_.AddEntriesFrom(input, _repeated_enterItems_codec);
            break;
          }
          case 42: {
            enterNPC_.AddEntriesFrom(input, _repeated_enterNPC_codec);
            break;
          }
          case 50: {
            enterBuffers_.AddEntriesFrom(input, _repeated_enterBuffers_codec);
            break;
          }
          case 58: {
            enterPets_.AddEntriesFrom(input, _repeated_enterPets_codec);
            break;
          }
          case 66: {
            enterGuards_.AddEntriesFrom(input, _repeated_enterGuards_codec);
            break;
          }
          case 74: {
            enterTriggers_.AddEntriesFrom(input, _repeated_enterTriggers_codec);
            break;
          }
          case 90: {
            enterBoxs_.AddEntriesFrom(input, _repeated_enterBoxs_codec);
            break;
          }
          case 98: {
            safeAreaeffects_.AddEntriesFrom(input, _repeated_safeAreaeffects_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 游戏对象离开视野
  /// </summary>
  public sealed class ObjectExitViewResponse : pb::IMessage {
    private static readonly pb::MessageParser<ObjectExitViewResponse> _parser = new pb::MessageParser<ObjectExitViewResponse>(() => new ObjectExitViewResponse());
    public static pb::MessageParser<ObjectExitViewResponse> Parser { get { return _parser; } }

    private long id_;
    /// <summary>
    ///对象id
    /// </summary>
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家移动
  /// </summary>
  public sealed class PlayerMoveRequest : pb::IMessage {
    private static readonly pb::MessageParser<PlayerMoveRequest> _parser = new pb::MessageParser<PlayerMoveRequest>(() => new PlayerMoveRequest());
    public static pb::MessageParser<PlayerMoveRequest> Parser { get { return _parser; } }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private long startTime_;
    public long startTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    private int currentX_;
    public int currentX {
      get { return currentX_; }
      set {
        currentX_ = value;
      }
    }

    private int currentY_;
    public int currentY {
      get { return currentY_; }
      set {
        currentY_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (x != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(y);
      }
      if (startTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(startTime);
      }
      if (currentX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(currentX);
      }
      if (currentY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(currentY);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      if (startTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(startTime);
      }
      if (currentX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(currentX);
      }
      if (currentY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(currentY);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            x = input.ReadInt32();
            break;
          }
          case 16: {
            y = input.ReadInt32();
            break;
          }
          case 24: {
            startTime = input.ReadInt64();
            break;
          }
          case 32: {
            currentX = input.ReadInt32();
            break;
          }
          case 40: {
            currentY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///视野范围内物体移动
  /// </summary>
  public sealed class ObjectMoveResponse : pb::IMessage {
    private static readonly pb::MessageParser<ObjectMoveResponse> _parser = new pb::MessageParser<ObjectMoveResponse>(() => new ObjectMoveResponse());
    public static pb::MessageParser<ObjectMoveResponse> Parser { get { return _parser; } }

    private long id_;
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int newX_;
    public int newX {
      get { return newX_; }
      set {
        newX_ = value;
      }
    }

    private int newY_;
    public int newY {
      get { return newY_; }
      set {
        newY_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
      if (newX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(newX);
      }
      if (newY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(newY);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      if (newX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(newX);
      }
      if (newY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(newY);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
          case 16: {
            newX = input.ReadInt32();
            break;
          }
          case 24: {
            newY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同地图传送
  /// </summary>
  public sealed class PositionChangeResponse : pb::IMessage {
    private static readonly pb::MessageParser<PositionChangeResponse> _parser = new pb::MessageParser<PositionChangeResponse>(() => new PositionChangeResponse());
    public static pb::MessageParser<PositionChangeResponse> Parser { get { return _parser; } }

    private int newX_;
    public int newX {
      get { return newX_; }
      set {
        newX_ = value;
      }
    }

    private int newY_;
    public int newY {
      get { return newY_; }
      set {
        newY_ = value;
      }
    }

    private long time_;
    public long time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private int reason_;
    /// <summary>
    ///PositionChangeReason
    /// </summary>
    public int reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    private long waiGuaCanMoveTime_;
    /// <summary>
    ///外挂封停后可以移动的时间
    /// </summary>
    public long waiGuaCanMoveTime {
      get { return waiGuaCanMoveTime_; }
      set {
        waiGuaCanMoveTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (newX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(newX);
      }
      if (newY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(newY);
      }
      if (time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(time);
      }
      if (reason != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(reason);
      }
      if (waiGuaCanMoveTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(waiGuaCanMoveTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (newX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(newX);
      }
      if (newY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(newY);
      }
      if (time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(time);
      }
      if (reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(reason);
      }
      if (waiGuaCanMoveTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(waiGuaCanMoveTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            newX = input.ReadInt32();
            break;
          }
          case 16: {
            newY = input.ReadInt32();
            break;
          }
          case 24: {
            time = input.ReadInt64();
            break;
          }
          case 32: {
            reason = input.ReadInt32();
            break;
          }
          case 40: {
            waiGuaCanMoveTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///复活请求type[default = BornPoint]
  /// </summary>
  public sealed class ReliveRequest : pb::IMessage {
    private static readonly pb::MessageParser<ReliveRequest> _parser = new pb::MessageParser<ReliveRequest>(() => new ReliveRequest());
    public static pb::MessageParser<ReliveRequest> Parser { get { return _parser; } }

    private int type_;
    /// <summary>
    ///ReliveType 
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private bool useYuanbao_;
    /// <summary>
    ///原地复活次数不足时，是否使用元宝
    /// </summary>
    public bool useYuanbao {
      get { return useYuanbao_; }
      set {
        useYuanbao_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(type);
      }
      if (useYuanbao != false) {
        output.WriteRawTag(16);
        output.WriteBool(useYuanbao);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      if (useYuanbao != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type = input.ReadInt32();
            break;
          }
          case 16: {
            useYuanbao = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class ReliveResponse : pb::IMessage {
    private static readonly pb::MessageParser<ReliveResponse> _parser = new pb::MessageParser<ReliveResponse>(() => new ReliveResponse());
    public static pb::MessageParser<ReliveResponse> Parser { get { return _parser; } }

    private long id_;
    /// <summary>
    ///复活者的id
    /// </summary>
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int type_;
    /// <summary>
    ///ReliveType 
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private int hp_;
    /// <summary>
    ///复活后的hp
    /// </summary>
    public int hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int newX_;
    /// <summary>
    ///复活后的位置
    /// </summary>
    public int newX {
      get { return newX_; }
      set {
        newX_ = value;
      }
    }

    private int newY_;
    public int newY {
      get { return newY_; }
      set {
        newY_ = value;
      }
    }

    private int innerPower_;
    /// <summary>
    ///内力
    /// </summary>
    public int innerPower {
      get { return innerPower_; }
      set {
        innerPower_ = value;
      }
    }

    private int mapId_;
    /// <summary>
    ///复活场景ID
    /// </summary>
    public int mapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    private int mp_;
    /// <summary>
    ///复活后的mp
    /// </summary>
    public int mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    private int line_;
    /// <summary>
    ///场景分线
    /// </summary>
    public int line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
      if (type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(type);
      }
      if (hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(hp);
      }
      if (newX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(newX);
      }
      if (newY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(newY);
      }
      if (innerPower != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(innerPower);
      }
      if (mapId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(mapId);
      }
      if (mp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(mp);
      }
      if (line != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(line);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      if (hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hp);
      }
      if (newX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(newX);
      }
      if (newY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(newY);
      }
      if (innerPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(innerPower);
      }
      if (mapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mapId);
      }
      if (mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mp);
      }
      if (line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(line);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
          case 16: {
            type = input.ReadInt32();
            break;
          }
          case 24: {
            hp = input.ReadInt32();
            break;
          }
          case 32: {
            newX = input.ReadInt32();
            break;
          }
          case 40: {
            newY = input.ReadInt32();
            break;
          }
          case 48: {
            innerPower = input.ReadInt32();
            break;
          }
          case 56: {
            mapId = input.ReadInt32();
            break;
          }
          case 64: {
            mp = input.ReadInt32();
            break;
          }
          case 72: {
            line = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///地图对象，包括怪物 Hp mp改变
  /// </summary>
  public sealed class PlayerHPChanged : pb::IMessage {
    private static readonly pb::MessageParser<PlayerHPChanged> _parser = new pb::MessageParser<PlayerHPChanged>(() => new PlayerHPChanged());
    public static pb::MessageParser<PlayerHPChanged> Parser { get { return _parser; } }

    private long id_;
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int hp_;
    public int hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int mp_;
    public int mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    private int innerPower_;
    /// <summary>
    ///内力
    /// </summary>
    public int innerPower {
      get { return innerPower_; }
      set {
        innerPower_ = value;
      }
    }

    private int reason_;
    /// <summary>
    ///HPChangeReson
    /// </summary>
    public int reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    private long adder_;
    public long adder {
      get { return adder_; }
      set {
        adder_ = value;
      }
    }

    private int deltaHP_;
    /// <summary>
    ///正为恢复血， 负为失血（目前原因只有反伤使用）
    /// </summary>
    public int deltaHP {
      get { return deltaHP_; }
      set {
        deltaHP_ = value;
      }
    }

    private int defenceDamage_;
    /// <summary>
    ///用护盾抵消的伤害
    /// </summary>
    public int defenceDamage {
      get { return defenceDamage_; }
      set {
        defenceDamage_ = value;
      }
    }

    private int maxHp_;
    /// <summary>
    ///最大血量，为0 ，不用判断;
    /// </summary>
    public int maxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
      if (hp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(hp);
      }
      if (mp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(mp);
      }
      if (innerPower != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(innerPower);
      }
      if (reason != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(reason);
      }
      if (adder != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(adder);
      }
      if (deltaHP != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(deltaHP);
      }
      if (defenceDamage != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(defenceDamage);
      }
      if (maxHp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(maxHp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      if (hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hp);
      }
      if (mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mp);
      }
      if (innerPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(innerPower);
      }
      if (reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(reason);
      }
      if (adder != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(adder);
      }
      if (deltaHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(deltaHP);
      }
      if (defenceDamage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(defenceDamage);
      }
      if (maxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxHp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
          case 16: {
            hp = input.ReadInt32();
            break;
          }
          case 24: {
            mp = input.ReadInt32();
            break;
          }
          case 32: {
            innerPower = input.ReadInt32();
            break;
          }
          case 40: {
            reason = input.ReadInt32();
            break;
          }
          case 48: {
            adder = input.ReadInt64();
            break;
          }
          case 56: {
            deltaHP = input.ReadInt32();
            break;
          }
          case 64: {
            defenceDamage = input.ReadInt32();
            break;
          }
          case 72: {
            maxHp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///传送请求
  /// </summary>
  public sealed class TransferRequest : pb::IMessage {
    private static readonly pb::MessageParser<TransferRequest> _parser = new pb::MessageParser<TransferRequest>(() => new TransferRequest());
    public static pb::MessageParser<TransferRequest> Parser { get { return _parser; } }

    private int mapId_;
    public int mapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    private int line_;
    public int line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(mapId);
      }
      if (line != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(line);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mapId);
      }
      if (line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(line);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mapId = input.ReadInt32();
            break;
          }
          case 16: {
            line = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///物品掉落
  /// </summary>
  public sealed class ItemsDropResponse : pb::IMessage {
    private static readonly pb::MessageParser<ItemsDropResponse> _parser = new pb::MessageParser<ItemsDropResponse>(() => new ItemsDropResponse());
    public static pb::MessageParser<ItemsDropResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::map.RoundItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::map.RoundItem.Parser);
    private readonly pbc::RepeatedField<global::map.RoundItem> items_ = new pbc::RepeatedField<global::map.RoundItem>();
    public pbc::RepeatedField<global::map.RoundItem> items {
      get { return items_; }
    }

    private long dropFrom_;
    /// <summary>
    ///怪物id
    /// </summary>
    public long dropFrom {
      get { return dropFrom_; }
      set {
        dropFrom_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (dropFrom != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(dropFrom);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (dropFrom != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(dropFrom);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 16: {
            dropFrom = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///根据配置传送
  /// </summary>
  public sealed class TransferByDeliverConfigRequest : pb::IMessage {
    private static readonly pb::MessageParser<TransferByDeliverConfigRequest> _parser = new pb::MessageParser<TransferByDeliverConfigRequest>(() => new TransferByDeliverConfigRequest());
    public static pb::MessageParser<TransferByDeliverConfigRequest> Parser { get { return _parser; } }

    private int deliverId_;
    public int deliverId {
      get { return deliverId_; }
      set {
        deliverId_ = value;
      }
    }

    private bool useStone_;
    /// <summary>
    ///是否使用传送石
    /// </summary>
    public bool useStone {
      get { return useStone_; }
      set {
        useStone_ = value;
      }
    }

    private int reason_;
    /// <summary>
    ///PositionChangeReason传送原因
    /// </summary>
    public int reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    private bool useZhuQingTing_;
    /// <summary>
    ///是否使用竹蜻蜓
    /// </summary>
    public bool useZhuQingTing {
      get { return useZhuQingTing_; }
      set {
        useZhuQingTing_ = value;
      }
    }

    private int transferType_;
    /// <summary>
    ///传送类型，0为本国传送本国，1为盟国传送盟国
    /// </summary>
    public int transferType {
      get { return transferType_; }
      set {
        transferType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (deliverId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(deliverId);
      }
      if (useStone != false) {
        output.WriteRawTag(16);
        output.WriteBool(useStone);
      }
      if (reason != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(reason);
      }
      if (useZhuQingTing != false) {
        output.WriteRawTag(32);
        output.WriteBool(useZhuQingTing);
      }
      if (transferType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(transferType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (deliverId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(deliverId);
      }
      if (useStone != false) {
        size += 1 + 1;
      }
      if (reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(reason);
      }
      if (useZhuQingTing != false) {
        size += 1 + 1;
      }
      if (transferType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(transferType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            deliverId = input.ReadInt32();
            break;
          }
          case 16: {
            useStone = input.ReadBool();
            break;
          }
          case 24: {
            reason = input.ReadInt32();
            break;
          }
          case 32: {
            useZhuQingTing = input.ReadBool();
            break;
          }
          case 40: {
            transferType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///神兽状态改变
  /// </summary>
  public sealed class PetStateChanged : pb::IMessage {
    private static readonly pb::MessageParser<PetStateChanged> _parser = new pb::MessageParser<PetStateChanged>(() => new PetStateChanged());
    public static pb::MessageParser<PetStateChanged> Parser { get { return _parser; } }

    private long id_;
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int configId_;
    public int configId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    private int state_;
    /// <summary>
    ///跟随2, 战斗3
    /// </summary>
    public int state {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
      if (configId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(configId);
      }
      if (state != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(state);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      if (configId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(configId);
      }
      if (state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(state);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
          case 16: {
            configId = input.ReadInt32();
            break;
          }
          case 24: {
            state = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BossInfo : pb::IMessage {
    private static readonly pb::MessageParser<BossInfo> _parser = new pb::MessageParser<BossInfo>(() => new BossInfo());
    public static pb::MessageParser<BossInfo> Parser { get { return _parser; } }

    private int bossId_;
    public int bossId {
      get { return bossId_; }
      set {
        bossId_ = value;
      }
    }

    private int bossHP_;
    public int bossHP {
      get { return bossHP_; }
      set {
        bossHP_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bossId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(bossId);
      }
      if (bossHP != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(bossHP);
      }
      if (x != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(y);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bossId);
      }
      if (bossHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bossHP);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bossId = input.ReadInt32();
            break;
          }
          case 16: {
            bossHP = input.ReadInt32();
            break;
          }
          case 24: {
            x = input.ReadInt32();
            break;
          }
          case 32: {
            y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class MapBossInfo : pb::IMessage {
    private static readonly pb::MessageParser<MapBossInfo> _parser = new pb::MessageParser<MapBossInfo>(() => new MapBossInfo());
    public static pb::MessageParser<MapBossInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::map.BossInfo> _repeated_bosses_codec
        = pb::FieldCodec.ForMessage(10, global::map.BossInfo.Parser);
    private readonly pbc::RepeatedField<global::map.BossInfo> bosses_ = new pbc::RepeatedField<global::map.BossInfo>();
    public pbc::RepeatedField<global::map.BossInfo> bosses {
      get { return bosses_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bosses_.WriteTo(output, _repeated_bosses_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += bosses_.CalculateSize(_repeated_bosses_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bosses_.AddEntriesFrom(input, _repeated_bosses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class WeatherChangeResponse : pb::IMessage {
    private static readonly pb::MessageParser<WeatherChangeResponse> _parser = new pb::MessageParser<WeatherChangeResponse>(() => new WeatherChangeResponse());
    public static pb::MessageParser<WeatherChangeResponse> Parser { get { return _parser; } }

    private int mapId_;
    public int mapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_weather_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> weather_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///高32位为ID, 低32位为特效索引
    /// </summary>
    public pbc::RepeatedField<long> weather {
      get { return weather_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(mapId);
      }
      weather_.WriteTo(output, _repeated_weather_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (mapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(mapId);
      }
      size += weather_.CalculateSize(_repeated_weather_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mapId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            weather_.AddEntriesFrom(input, _repeated_weather_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///队友关系
  /// </summary>
  public sealed class SmallViewTeammateNtf : pb::IMessage {
    private static readonly pb::MessageParser<SmallViewTeammateNtf> _parser = new pb::MessageParser<SmallViewTeammateNtf>(() => new SmallViewTeammateNtf());
    public static pb::MessageParser<SmallViewTeammateNtf> Parser { get { return _parser; } }

    private long roleId_;
    /// <summary>
    ///玩家id
    /// </summary>
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    ///玩家名称
    /// </summary>
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    /// <summary>
    ///x,y = 0代表此层关系消失
    /// </summary>
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (x != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(y);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 24: {
            x = input.ReadInt32();
            break;
          }
          case 32: {
            y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///npc状态
  /// </summary>
  public sealed class NpcStatItem : pb::IMessage {
    private static readonly pb::MessageParser<NpcStatItem> _parser = new pb::MessageParser<NpcStatItem>(() => new NpcStatItem());
    public static pb::MessageParser<NpcStatItem> Parser { get { return _parser; } }

    private int npcId_;
    public int npcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    private bool isAlive_;
    /// <summary>
    ///是否存活
    /// </summary>
    public bool isAlive {
      get { return isAlive_; }
      set {
        isAlive_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (npcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(npcId);
      }
      if (isAlive != false) {
        output.WriteRawTag(16);
        output.WriteBool(isAlive);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (npcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(npcId);
      }
      if (isAlive != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            npcId = input.ReadInt32();
            break;
          }
          case 16: {
            isAlive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///npc存活状态
  /// </summary>
  public sealed class NpcsStatNtf : pb::IMessage {
    private static readonly pb::MessageParser<NpcsStatNtf> _parser = new pb::MessageParser<NpcsStatNtf>(() => new NpcsStatNtf());
    public static pb::MessageParser<NpcsStatNtf> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::map.NpcStatItem> _repeated_npcsStat_codec
        = pb::FieldCodec.ForMessage(10, global::map.NpcStatItem.Parser);
    private readonly pbc::RepeatedField<global::map.NpcStatItem> npcsStat_ = new pbc::RepeatedField<global::map.NpcStatItem>();
    public pbc::RepeatedField<global::map.NpcStatItem> npcsStat {
      get { return npcsStat_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      npcsStat_.WriteTo(output, _repeated_npcsStat_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += npcsStat_.CalculateSize(_repeated_npcsStat_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            npcsStat_.AddEntriesFrom(input, _repeated_npcsStat_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///npc玩家状态信息
  /// </summary>
  public sealed class PlayerStateNtf : pb::IMessage {
    private static readonly pb::MessageParser<PlayerStateNtf> _parser = new pb::MessageParser<PlayerStateNtf>(() => new PlayerStateNtf());
    public static pb::MessageParser<PlayerStateNtf> Parser { get { return _parser; } }

    private int state_;
    /// <summary>
    ///1为睡眠状态(玩家无用)， 2为活动状态（非战斗）, 3战斗状态， 4死亡状态
    /// </summary>
    public int state {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (state != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(state);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(state);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步器人物数据
  /// </summary>
  public sealed class TongBuQiRoleData : pb::IMessage {
    private static readonly pb::MessageParser<TongBuQiRoleData> _parser = new pb::MessageParser<TongBuQiRoleData>(() => new TongBuQiRoleData());
    public static pb::MessageParser<TongBuQiRoleData> Parser { get { return _parser; } }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private int importance_;
    public int importance {
      get { return importance_; }
      set {
        importance_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
      if (x != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(y);
      }
      if (importance != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(importance);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      if (importance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(importance);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
          case 16: {
            x = input.ReadInt32();
            break;
          }
          case 24: {
            y = input.ReadInt32();
            break;
          }
          case 32: {
            importance = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步器数据请求
  /// </summary>
  public sealed class TongBuQiDataReq : pb::IMessage {
    private static readonly pb::MessageParser<TongBuQiDataReq> _parser = new pb::MessageParser<TongBuQiDataReq>(() => new TongBuQiDataReq());
    public static pb::MessageParser<TongBuQiDataReq> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::map.TongBuQiRoleData> _repeated_roleDataList_codec
        = pb::FieldCodec.ForMessage(10, global::map.TongBuQiRoleData.Parser);
    private readonly pbc::RepeatedField<global::map.TongBuQiRoleData> roleDataList_ = new pbc::RepeatedField<global::map.TongBuQiRoleData>();
    public pbc::RepeatedField<global::map.TongBuQiRoleData> roleDataList {
      get { return roleDataList_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      roleDataList_.WriteTo(output, _repeated_roleDataList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += roleDataList_.CalculateSize(_repeated_roleDataList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roleDataList_.AddEntriesFrom(input, _repeated_roleDataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class MapDetails : pb::IMessage {
    private static readonly pb::MessageParser<MapDetails> _parser = new pb::MessageParser<MapDetails>(() => new MapDetails());
    public static pb::MessageParser<MapDetails> Parser { get { return _parser; } }

    private int curPlayerNum_;
    /// <summary>
    ///当前人数
    /// </summary>
    public int curPlayerNum {
      get { return curPlayerNum_; }
      set {
        curPlayerNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (curPlayerNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(curPlayerNum);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (curPlayerNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(curPlayerNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            curPlayerNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GoldKeyPickUpItems : pb::IMessage {
    private static readonly pb::MessageParser<GoldKeyPickUpItems> _parser = new pb::MessageParser<GoldKeyPickUpItems>(() => new GoldKeyPickUpItems());
    public static pb::MessageParser<GoldKeyPickUpItems> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::map.PickUpItem> _repeated_pickUpItems_codec
        = pb::FieldCodec.ForMessage(10, global::map.PickUpItem.Parser);
    private readonly pbc::RepeatedField<global::map.PickUpItem> pickUpItems_ = new pbc::RepeatedField<global::map.PickUpItem>();
    public pbc::RepeatedField<global::map.PickUpItem> pickUpItems {
      get { return pickUpItems_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      pickUpItems_.WriteTo(output, _repeated_pickUpItems_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += pickUpItems_.CalculateSize(_repeated_pickUpItems_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pickUpItems_.AddEntriesFrom(input, _repeated_pickUpItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class PickUpItem : pb::IMessage {
    private static readonly pb::MessageParser<PickUpItem> _parser = new pb::MessageParser<PickUpItem>(() => new PickUpItem());
    public static pb::MessageParser<PickUpItem> Parser { get { return _parser; } }

    private int itemConfigId_;
    public int itemConfigId {
      get { return itemConfigId_; }
      set {
        itemConfigId_ = value;
      }
    }

    private int itemNum_;
    public int itemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (itemConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(itemConfigId);
      }
      if (itemNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(itemNum);
      }
      if (x != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(y);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (itemConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(itemConfigId);
      }
      if (itemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(itemNum);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(y);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            itemNum = input.ReadInt32();
            break;
          }
          case 24: {
            x = input.ReadInt32();
            break;
          }
          case 32: {
            y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class MainTaskTransmitEvent : pb::IMessage {
    private static readonly pb::MessageParser<MainTaskTransmitEvent> _parser = new pb::MessageParser<MainTaskTransmitEvent>(() => new MainTaskTransmitEvent());
    public static pb::MessageParser<MainTaskTransmitEvent> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_evevtIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> evevtIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///可以显示的主线任务传送点
    /// </summary>
    public pbc::RepeatedField<int> evevtIds {
      get { return evevtIds_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      evevtIds_.WriteTo(output, _repeated_evevtIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += evevtIds_.CalculateSize(_repeated_evevtIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            evevtIds_.AddEntriesFrom(input, _repeated_evevtIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class AddMainTaskTransmitEvent : pb::IMessage {
    private static readonly pb::MessageParser<AddMainTaskTransmitEvent> _parser = new pb::MessageParser<AddMainTaskTransmitEvent>(() => new AddMainTaskTransmitEvent());
    public static pb::MessageParser<AddMainTaskTransmitEvent> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_evevtIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> evevtIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///添加可以显示的主线任务传送点
    /// </summary>
    public pbc::RepeatedField<int> evevtIds {
      get { return evevtIds_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      evevtIds_.WriteTo(output, _repeated_evevtIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += evevtIds_.CalculateSize(_repeated_evevtIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            evevtIds_.AddEntriesFrom(input, _repeated_evevtIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RemoveMainTaskTransmitEvent : pb::IMessage {
    private static readonly pb::MessageParser<RemoveMainTaskTransmitEvent> _parser = new pb::MessageParser<RemoveMainTaskTransmitEvent>(() => new RemoveMainTaskTransmitEvent());
    public static pb::MessageParser<RemoveMainTaskTransmitEvent> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_evevtIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> evevtIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///移除可以显示的主线任务传送点
    /// </summary>
    public pbc::RepeatedField<int> evevtIds {
      get { return evevtIds_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      evevtIds_.WriteTo(output, _repeated_evevtIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += evevtIds_.CalculateSize(_repeated_evevtIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            evevtIds_.AddEntriesFrom(input, _repeated_evevtIds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
