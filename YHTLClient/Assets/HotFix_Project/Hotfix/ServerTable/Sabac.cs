// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sabac.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace sabac {

  #region Messages
  public sealed class OneSabacInfo : pb::IMessage {
    private static readonly pb::MessageParser<OneSabacInfo> _parser = new pb::MessageParser<OneSabacInfo>(() => new OneSabacInfo());
    public static pb::MessageParser<OneSabacInfo> Parser { get { return _parser; } }

    private int pkId_;
    /// <summary>
    ///第几次sabac 活动id;
    /// </summary>
    public int pkId {
      get { return pkId_; }
      set {
        pkId_ = value;
      }
    }

    private long startTime_;
    /// <summary>
    ///开始时间
    /// </summary>
    public long startTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    private long endTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    private long mayorId_;
    /// <summary>
    ///城主id
    /// </summary>
    public long mayorId {
      get { return mayorId_; }
      set {
        mayorId_ = value;
      }
    }

    private long unionId_;
    /// <summary>
    ///占领公会id
    /// </summary>
    public long unionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    private string unionName_ = "";
    /// <summary>
    ///占领公会名字
    /// </summary>
    public string unionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int totalConsume_;
    /// <summary>
    ///消费总元宝
    /// </summary>
    public int totalConsume {
      get { return totalConsume_; }
      set {
        totalConsume_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (pkId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(pkId);
      }
      if (startTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(startTime);
      }
      if (endTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(endTime);
      }
      if (mayorId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(mayorId);
      }
      if (unionId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(unionId);
      }
      if (unionName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(unionName);
      }
      if (totalConsume != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(totalConsume);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (pkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(pkId);
      }
      if (startTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(startTime);
      }
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      if (mayorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(mayorId);
      }
      if (unionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(unionId);
      }
      if (unionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(unionName);
      }
      if (totalConsume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(totalConsume);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pkId = input.ReadInt32();
            break;
          }
          case 16: {
            startTime = input.ReadInt64();
            break;
          }
          case 24: {
            endTime = input.ReadInt64();
            break;
          }
          case 32: {
            mayorId = input.ReadInt64();
            break;
          }
          case 40: {
            unionId = input.ReadInt64();
            break;
          }
          case 50: {
            unionName = input.ReadString();
            break;
          }
          case 56: {
            totalConsume = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SabacId : pb::IMessage {
    private static readonly pb::MessageParser<SabacId> _parser = new pb::MessageParser<SabacId>(() => new SabacId());
    public static pb::MessageParser<SabacId> Parser { get { return _parser; } }

    private int pkId_;
    public int pkId {
      get { return pkId_; }
      set {
        pkId_ = value;
      }
    }

    private int usage_;
    public int usage {
      get { return usage_; }
      set {
        usage_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (pkId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(pkId);
      }
      if (usage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(usage);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (pkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(pkId);
      }
      if (usage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(usage);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pkId = input.ReadInt32();
            break;
          }
          case 16: {
            usage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SabacDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<SabacDataResponse> _parser = new pb::MessageParser<SabacDataResponse>(() => new SabacDataResponse());
    public static pb::MessageParser<SabacDataResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::sabac.OneSabacInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::sabac.OneSabacInfo.Parser);
    private readonly pbc::RepeatedField<global::sabac.OneSabacInfo> infos_ = new pbc::RepeatedField<global::sabac.OneSabacInfo>();
    public pbc::RepeatedField<global::sabac.OneSabacInfo> infos {
      get { return infos_; }
    }

    private int curPkId_;
    public int curPkId {
      get { return curPkId_; }
      set {
        curPkId_ = value;
      }
    }

    private long takenUnionId_;
    /// <summary>
    ///最后一次占领皇宫公会id
    /// </summary>
    public long takenUnionId {
      get { return takenUnionId_; }
      set {
        takenUnionId_ = value;
      }
    }

    private string takenUnionName_ = "";
    /// <summary>
    ///占领皇宫公会名字;
    /// </summary>
    public string takenUnionName {
      get { return takenUnionName_; }
      set {
        takenUnionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
      if (curPkId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(curPkId);
      }
      if (takenUnionId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(takenUnionId);
      }
      if (takenUnionName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(takenUnionName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (curPkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(curPkId);
      }
      if (takenUnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(takenUnionId);
      }
      if (takenUnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(takenUnionName);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 16: {
            curPkId = input.ReadInt32();
            break;
          }
          case 24: {
            takenUnionId = input.ReadInt64();
            break;
          }
          case 58: {
            takenUnionName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class DoorInfo : pb::IMessage {
    private static readonly pb::MessageParser<DoorInfo> _parser = new pb::MessageParser<DoorInfo>(() => new DoorInfo());
    public static pb::MessageParser<DoorInfo> Parser { get { return _parser; } }

    private int hp_;
    public int hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int maxHp_;
    public int maxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (hp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(hp);
      }
      if (maxHp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(maxHp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hp);
      }
      if (maxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxHp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            hp = input.ReadInt32();
            break;
          }
          case 16: {
            maxHp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///活动状态;
  /// </summary>
  public sealed class SabacStateResponse : pb::IMessage {
    private static readonly pb::MessageParser<SabacStateResponse> _parser = new pb::MessageParser<SabacStateResponse>(() => new SabacStateResponse());
    public static pb::MessageParser<SabacStateResponse> Parser { get { return _parser; } }

    private int state_;
    /// <summary>
    ///当前活动是否开启;0,1,2 ;1:开启;2:结束;
    /// </summary>
    public int state {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    private int pkId_;
    /// <summary>
    ///当前开启的活动id;
    /// </summary>
    public int pkId {
      get { return pkId_; }
      set {
        pkId_ = value;
      }
    }

    private long protectUnionId_;
    /// <summary>
    ///守城方公会id;
    /// </summary>
    public long protectUnionId {
      get { return protectUnionId_; }
      set {
        protectUnionId_ = value;
      }
    }

    private string protectUnionName_ = "";
    /// <summary>
    ///守城方公会名字
    /// </summary>
    public string protectUnionName {
      get { return protectUnionName_; }
      set {
        protectUnionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool doorIsDie_;
    /// <summary>
    ///城门死否摧毁 
    /// </summary>
    public bool doorIsDie {
      get { return doorIsDie_; }
      set {
        doorIsDie_ = value;
      }
    }

    private long takenUnionId_;
    /// <summary>
    ///占领皇宫公会id
    /// </summary>
    public long takenUnionId {
      get { return takenUnionId_; }
      set {
        takenUnionId_ = value;
      }
    }

    private string takenUnionName_ = "";
    /// <summary>
    ///占领皇宫公会名字;
    /// </summary>
    public string takenUnionName {
      get { return takenUnionName_; }
      set {
        takenUnionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::sabac.DoorInfo doorInfo_;
    /// <summary>
    ///门信息
    /// </summary>
    public global::sabac.DoorInfo doorInfo {
      get { return doorInfo_; }
      set {
        doorInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (state != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(state);
      }
      if (pkId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(pkId);
      }
      if (protectUnionId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(protectUnionId);
      }
      if (protectUnionName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(protectUnionName);
      }
      if (doorIsDie != false) {
        output.WriteRawTag(40);
        output.WriteBool(doorIsDie);
      }
      if (takenUnionId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(takenUnionId);
      }
      if (takenUnionName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(takenUnionName);
      }
      if (doorInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(doorInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(state);
      }
      if (pkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(pkId);
      }
      if (protectUnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(protectUnionId);
      }
      if (protectUnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(protectUnionName);
      }
      if (doorIsDie != false) {
        size += 1 + 1;
      }
      if (takenUnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(takenUnionId);
      }
      if (takenUnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(takenUnionName);
      }
      if (doorInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(doorInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state = input.ReadInt32();
            break;
          }
          case 16: {
            pkId = input.ReadInt32();
            break;
          }
          case 24: {
            protectUnionId = input.ReadInt64();
            break;
          }
          case 34: {
            protectUnionName = input.ReadString();
            break;
          }
          case 40: {
            doorIsDie = input.ReadBool();
            break;
          }
          case 48: {
            takenUnionId = input.ReadInt64();
            break;
          }
          case 58: {
            takenUnionName = input.ReadString();
            break;
          }
          case 66: {
            if (doorInfo_ == null) {
              doorInfo_ = new global::sabac.DoorInfo();
            }
            input.ReadMessage(doorInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///活动结束信息 发送给个人
  /// </summary>
  public sealed class SabacResultResponse : pb::IMessage {
    private static readonly pb::MessageParser<SabacResultResponse> _parser = new pb::MessageParser<SabacResultResponse>(() => new SabacResultResponse());
    public static pb::MessageParser<SabacResultResponse> Parser { get { return _parser; } }

    private bool hasJoinReward_;
    /// <summary>
    ///是否有参与奖
    /// </summary>
    public bool hasJoinReward {
      get { return hasJoinReward_; }
      set {
        hasJoinReward_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (hasJoinReward != false) {
        output.WriteRawTag(8);
        output.WriteBool(hasJoinReward);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (hasJoinReward != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            hasJoinReward = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class PlayerModelInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerModelInfo> _parser = new pb::MessageParser<PlayerModelInfo>(() => new PlayerModelInfo());
    public static pb::MessageParser<PlayerModelInfo> Parser { get { return _parser; } }

    private global::user.RoleBrief roleBrief_;
    public global::user.RoleBrief roleBrief {
      get { return roleBrief_; }
      set {
        roleBrief_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleBrief_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(roleBrief);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleBrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(roleBrief);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roleBrief_ == null) {
              roleBrief_ = new global::user.RoleBrief();
            }
            input.ReadMessage(roleBrief_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///排行数据
  /// </summary>
  public sealed class RankInfo : pb::IMessage {
    private static readonly pb::MessageParser<RankInfo> _parser = new pb::MessageParser<RankInfo>(() => new RankInfo());
    public static pb::MessageParser<RankInfo> Parser { get { return _parser; } }

    private int rank_;
    public int rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    private string name_ = "";
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int data_;
    public int data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private long unionId_;
    public long unionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    private string unionName_ = "";
    public string unionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(rank);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (data != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(data);
      }
      if (roleId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(roleId);
      }
      if (unionId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(unionId);
      }
      if (unionName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(unionName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(rank);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(data);
      }
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (unionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(unionId);
      }
      if (unionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(unionName);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            rank = input.ReadInt32();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 24: {
            data = input.ReadInt32();
            break;
          }
          case 32: {
            roleId = input.ReadInt64();
            break;
          }
          case 40: {
            unionId = input.ReadInt64();
            break;
          }
          case 50: {
            unionName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回应的排行数据;
  /// </summary>
  public sealed class ResponseRankInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResponseRankInfo> _parser = new pb::MessageParser<ResponseRankInfo>(() => new ResponseRankInfo());
    public static pb::MessageParser<ResponseRankInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::sabac.RankInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::sabac.RankInfo.Parser);
    private readonly pbc::RepeatedField<global::sabac.RankInfo> info_ = new pbc::RepeatedField<global::sabac.RankInfo>();
    public pbc::RepeatedField<global::sabac.RankInfo> info {
      get { return info_; }
    }

    private int pkId_;
    public int pkId {
      get { return pkId_; }
      set {
        pkId_ = value;
      }
    }

    private int usage_;
    public int usage {
      get { return usage_; }
      set {
        usage_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::sabac.PlayerModelInfo> _repeated_models_codec
        = pb::FieldCodec.ForMessage(34, global::sabac.PlayerModelInfo.Parser);
    private readonly pbc::RepeatedField<global::sabac.PlayerModelInfo> models_ = new pbc::RepeatedField<global::sabac.PlayerModelInfo>();
    public pbc::RepeatedField<global::sabac.PlayerModelInfo> models {
      get { return models_; }
    }

    private int myRankData_;
    /// <summary>
    ///我的积分；
    /// </summary>
    public int myRankData {
      get { return myRankData_; }
      set {
        myRankData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
      if (pkId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(pkId);
      }
      if (usage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(usage);
      }
      models_.WriteTo(output, _repeated_models_codec);
      if (myRankData != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(myRankData);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      if (pkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(pkId);
      }
      if (usage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(usage);
      }
      size += models_.CalculateSize(_repeated_models_codec);
      if (myRankData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(myRankData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 16: {
            pkId = input.ReadInt32();
            break;
          }
          case 24: {
            usage = input.ReadInt32();
            break;
          }
          case 34: {
            models_.AddEntriesFrom(input, _repeated_models_codec);
            break;
          }
          case 40: {
            myRankData = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
