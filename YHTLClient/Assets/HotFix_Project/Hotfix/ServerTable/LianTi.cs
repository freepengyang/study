// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LianTi.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace lianti {

  #region Messages
  /// <summary>
  ///炼体
  /// </summary>
  public sealed class LianTiInfo : pb::IMessage {
    private static readonly pb::MessageParser<LianTiInfo> _parser = new pb::MessageParser<LianTiInfo>(() => new LianTiInfo());
    public static pb::MessageParser<LianTiInfo> Parser { get { return _parser; } }

    private int lianTiId_;
    /// <summary>
    ///炼体id
    /// </summary>
    public int lianTiId {
      get { return lianTiId_; }
      set {
        lianTiId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (lianTiId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(lianTiId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (lianTiId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(lianTiId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            lianTiId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///推送给客户端的炼体信息
  /// </summary>
  public sealed class LianTiInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<LianTiInfoResponse> _parser = new pb::MessageParser<LianTiInfoResponse>(() => new LianTiInfoResponse());
    public static pb::MessageParser<LianTiInfoResponse> Parser { get { return _parser; } }

    private global::lianti.LianTiInfo lianTiInfo_;
    /// <summary>
    ///炼体信息
    /// </summary>
    public global::lianti.LianTiInfo lianTiInfo {
      get { return lianTiInfo_; }
      set {
        lianTiInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (lianTiInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(lianTiInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (lianTiInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(lianTiInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (lianTiInfo_ == null) {
              lianTiInfo_ = new global::lianti.LianTiInfo();
            }
            input.ReadMessage(lianTiInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class LianTiField : pb::IMessage {
    private static readonly pb::MessageParser<LianTiField> _parser = new pb::MessageParser<LianTiField>(() => new LianTiField());
    public static pb::MessageParser<LianTiField> Parser { get { return _parser; } }

    private int instanceId_;
    /// <summary>
    ///副本id
    /// </summary>
    public int instanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    private int surviveBossNum_;
    /// <summary>
    ///存活boss数
    /// </summary>
    public int surviveBossNum {
      get { return surviveBossNum_; }
      set {
        surviveBossNum_ = value;
      }
    }

    private int bossNum_;
    /// <summary>
    ///boss数
    /// </summary>
    public int bossNum {
      get { return bossNum_; }
      set {
        bossNum_ = value;
      }
    }

    private bool hasFirstKillReward_;
    /// <summary>
    ///是否有首次击杀
    /// </summary>
    public bool hasFirstKillReward {
      get { return hasFirstKillReward_; }
      set {
        hasFirstKillReward_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (instanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(instanceId);
      }
      if (surviveBossNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(surviveBossNum);
      }
      if (bossNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(bossNum);
      }
      if (hasFirstKillReward != false) {
        output.WriteRawTag(32);
        output.WriteBool(hasFirstKillReward);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (instanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(instanceId);
      }
      if (surviveBossNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(surviveBossNum);
      }
      if (bossNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bossNum);
      }
      if (hasFirstKillReward != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            instanceId = input.ReadInt32();
            break;
          }
          case 16: {
            surviveBossNum = input.ReadInt32();
            break;
          }
          case 24: {
            bossNum = input.ReadInt32();
            break;
          }
          case 32: {
            hasFirstKillReward = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///炼体之地信息
  /// </summary>
  public sealed class LianTiFieldResponse : pb::IMessage {
    private static readonly pb::MessageParser<LianTiFieldResponse> _parser = new pb::MessageParser<LianTiFieldResponse>(() => new LianTiFieldResponse());
    public static pb::MessageParser<LianTiFieldResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::lianti.LianTiField> _repeated_lianTiFields_codec
        = pb::FieldCodec.ForMessage(10, global::lianti.LianTiField.Parser);
    private readonly pbc::RepeatedField<global::lianti.LianTiField> lianTiFields_ = new pbc::RepeatedField<global::lianti.LianTiField>();
    /// <summary>
    ///炼体之地
    /// </summary>
    public pbc::RepeatedField<global::lianti.LianTiField> lianTiFields {
      get { return lianTiFields_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      lianTiFields_.WriteTo(output, _repeated_lianTiFields_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += lianTiFields_.CalculateSize(_repeated_lianTiFields_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            lianTiFields_.AddEntriesFrom(input, _repeated_lianTiFields_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
