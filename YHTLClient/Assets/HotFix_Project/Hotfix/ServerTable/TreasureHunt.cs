// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TreasureHunt.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace treasurehunt {

  #region Messages
  /// <summary>
  ///寻宝仓库信息
  /// </summary>
  public sealed class TreasureHuntInfo : pb::IMessage {
    private static readonly pb::MessageParser<TreasureHuntInfo> _parser = new pb::MessageParser<TreasureHuntInfo>(() => new TreasureHuntInfo());
    public static pb::MessageParser<TreasureHuntInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_itemInfo_codec
        = pb::FieldCodec.ForMessage(10, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> itemInfo_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    /// <summary>
    ///寻宝仓库物品
    /// </summary>
    public pbc::RepeatedField<global::bag.BagItemInfo> itemInfo {
      get { return itemInfo_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      itemInfo_.WriteTo(output, _repeated_itemInfo_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += itemInfo_.CalculateSize(_repeated_itemInfo_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemInfo_.AddEntriesFrom(input, _repeated_itemInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///寻宝请求
  /// </summary>
  public sealed class TreasureRequest : pb::IMessage {
    private static readonly pb::MessageParser<TreasureRequest> _parser = new pb::MessageParser<TreasureRequest>(() => new TreasureRequest());
    public static pb::MessageParser<TreasureRequest> Parser { get { return _parser; } }

    private int type_;
    /// <summary>
    ///1为一次，2为10次，3为50次;
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///仓库物品变动
  /// </summary>
  public sealed class TreasureItemChangeList : pb::IMessage {
    private static readonly pb::MessageParser<TreasureItemChangeList> _parser = new pb::MessageParser<TreasureItemChangeList>(() => new TreasureItemChangeList());
    public static pb::MessageParser<TreasureItemChangeList> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_changeList_codec
        = pb::FieldCodec.ForMessage(10, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> changeList_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    /// <summary>
    ///物品列表
    /// </summary>
    public pbc::RepeatedField<global::bag.BagItemInfo> changeList {
      get { return changeList_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      changeList_.WriteTo(output, _repeated_changeList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += changeList_.CalculateSize(_repeated_changeList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            changeList_.AddEntriesFrom(input, _repeated_changeList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///拿去某个物品请求
  /// </summary>
  public sealed class GetTreasureItemRequest : pb::IMessage {
    private static readonly pb::MessageParser<GetTreasureItemRequest> _parser = new pb::MessageParser<GetTreasureItemRequest>(() => new GetTreasureItemRequest());
    public static pb::MessageParser<GetTreasureItemRequest> Parser { get { return _parser; } }

    private int index_;
    /// <summary>
    ///物品的位置
    /// </summary>
    public int index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(index);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(index);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器寻宝
  /// </summary>
  public sealed class ServerHistory : pb::IMessage {
    private static readonly pb::MessageParser<ServerHistory> _parser = new pb::MessageParser<ServerHistory>(() => new ServerHistory());
    public static pb::MessageParser<ServerHistory> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<string> _repeated_serverHistory_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> serverHistory_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///服务器信息记录
    /// </summary>
    public pbc::RepeatedField<string> serverHistory {
      get { return serverHistory_; }
    }

    private int type_;
    /// <summary>
    ///类型  1为寻宝记录，2为积分兑换
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_history_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> history_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///个人寻宝记录
    /// </summary>
    public pbc::RepeatedField<string> history {
      get { return history_; }
    }

    private int limitTreasure_;
    /// <summary>
    ///限制寻宝
    /// </summary>
    public int limitTreasure {
      get { return limitTreasure_; }
      set {
        limitTreasure_ = value;
      }
    }

    private long openLimitTime_;
    /// <summary>
    ///此次开启限时寻宝的时间
    /// </summary>
    public long openLimitTime {
      get { return openLimitTime_; }
      set {
        openLimitTime_ = value;
      }
    }

    private int highEquipNumber_;
    /// <summary>
    ///今日玩家在线出高级装备的次数
    /// </summary>
    public int highEquipNumber {
      get { return highEquipNumber_; }
      set {
        highEquipNumber_ = value;
      }
    }

    private int rewardNumber_;
    /// <summary>
    ///玩家今日领取的次数
    /// </summary>
    public int rewardNumber {
      get { return rewardNumber_; }
      set {
        rewardNumber_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      serverHistory_.WriteTo(output, _repeated_serverHistory_codec);
      if (type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(type);
      }
      history_.WriteTo(output, _repeated_history_codec);
      if (limitTreasure != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(limitTreasure);
      }
      if (openLimitTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(openLimitTime);
      }
      if (highEquipNumber != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(highEquipNumber);
      }
      if (rewardNumber != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(rewardNumber);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += serverHistory_.CalculateSize(_repeated_serverHistory_codec);
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      size += history_.CalculateSize(_repeated_history_codec);
      if (limitTreasure != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(limitTreasure);
      }
      if (openLimitTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(openLimitTime);
      }
      if (highEquipNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(highEquipNumber);
      }
      if (rewardNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(rewardNumber);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            serverHistory_.AddEntriesFrom(input, _repeated_serverHistory_codec);
            break;
          }
          case 16: {
            type = input.ReadInt32();
            break;
          }
          case 26: {
            history_.AddEntriesFrom(input, _repeated_history_codec);
            break;
          }
          case 32: {
            limitTreasure = input.ReadInt32();
            break;
          }
          case 40: {
            openLimitTime = input.ReadInt64();
            break;
          }
          case 48: {
            highEquipNumber = input.ReadInt32();
            break;
          }
          case 56: {
            rewardNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///积分兑换请求
  /// </summary>
  public sealed class ExchangePointRequest : pb::IMessage {
    private static readonly pb::MessageParser<ExchangePointRequest> _parser = new pb::MessageParser<ExchangePointRequest>(() => new ExchangePointRequest());
    public static pb::MessageParser<ExchangePointRequest> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///物品id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///经验丹使用请求
  /// </summary>
  public sealed class ExpUseRequest : pb::IMessage {
    private static readonly pb::MessageParser<ExpUseRequest> _parser = new pb::MessageParser<ExpUseRequest>(() => new ExpUseRequest());
    public static pb::MessageParser<ExpUseRequest> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_indexList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> indexList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///下标集合
    /// </summary>
    public pbc::RepeatedField<int> indexList {
      get { return indexList_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      indexList_.WriteTo(output, _repeated_indexList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += indexList_.CalculateSize(_repeated_indexList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            indexList_.AddEntriesFrom(input, _repeated_indexList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///响应寻宝界面id
  /// </summary>
  public sealed class TreasureIdResponse : pb::IMessage {
    private static readonly pb::MessageParser<TreasureIdResponse> _parser = new pb::MessageParser<TreasureIdResponse>(() => new TreasureIdResponse());
    public static pb::MessageParser<TreasureIdResponse> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///寻宝id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long startTime_;
    /// <summary>
    ///下次开始时间
    /// </summary>
    public long startTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    private long endTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (startTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(startTime);
      }
      if (endTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(endTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (startTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(startTime);
      }
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            startTime = input.ReadInt64();
            break;
          }
          case 24: {
            endTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///寻宝仓库中回收物品请求
  /// </summary>
  public sealed class HuntCallbackRequest : pb::IMessage {
    private static readonly pb::MessageParser<HuntCallbackRequest> _parser = new pb::MessageParser<HuntCallbackRequest>(() => new HuntCallbackRequest());
    public static pb::MessageParser<HuntCallbackRequest> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_indexList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> indexList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///物品的仓库列表
    /// </summary>
    public pbc::RepeatedField<int> indexList {
      get { return indexList_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      indexList_.WriteTo(output, _repeated_indexList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += indexList_.CalculateSize(_repeated_indexList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            indexList_.AddEntriesFrom(input, _repeated_indexList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///寻宝仓库中回收物品响应
  /// </summary>
  public sealed class HuntCallbackResponse : pb::IMessage {
    private static readonly pb::MessageParser<HuntCallbackResponse> _parser = new pb::MessageParser<HuntCallbackResponse>(() => new HuntCallbackResponse());
    public static pb::MessageParser<HuntCallbackResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_indexs_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> indexs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///被回收的物品下标
    /// </summary>
    public pbc::RepeatedField<int> indexs {
      get { return indexs_; }
    }

    private long diYuanExp_;
    /// <summary>
    ///增加的地元经验
    /// </summary>
    public long diYuanExp {
      get { return diYuanExp_; }
      set {
        diYuanExp_ = value;
      }
    }

    private long silver_;
    /// <summary>
    ///增加的银子
    /// </summary>
    public long silver {
      get { return silver_; }
      set {
        silver_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      indexs_.WriteTo(output, _repeated_indexs_codec);
      if (diYuanExp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(diYuanExp);
      }
      if (silver != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(silver);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += indexs_.CalculateSize(_repeated_indexs_codec);
      if (diYuanExp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(diYuanExp);
      }
      if (silver != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(silver);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            indexs_.AddEntriesFrom(input, _repeated_indexs_codec);
            break;
          }
          case 16: {
            diYuanExp = input.ReadInt64();
            break;
          }
          case 24: {
            silver = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class TreasureEndResponse : pb::IMessage {
    private static readonly pb::MessageParser<TreasureEndResponse> _parser = new pb::MessageParser<TreasureEndResponse>(() => new TreasureEndResponse());
    public static pb::MessageParser<TreasureEndResponse> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
