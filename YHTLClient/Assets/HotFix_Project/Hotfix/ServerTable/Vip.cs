// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vip.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace vip {

  #region Messages
  /// <summary>
  ///vip信息
  /// </summary>
  public sealed class VipInfo : pb::IMessage {
    private static readonly pb::MessageParser<VipInfo> _parser = new pb::MessageParser<VipInfo>(() => new VipInfo());
    public static pb::MessageParser<VipInfo> Parser { get { return _parser; } }

    private int exp_;
    /// <summary>
    ///vip经验
    /// </summary>
    public int exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_reward_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> reward_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///礼包  高32位为vipLv，低为是否领取，0为未领取，1为领取;
    /// </summary>
    public pbc::RepeatedField<long> reward {
      get { return reward_; }
    }

    private int vipLevel_;
    /// <summary>
    ///VIP等级
    /// </summary>
    public int vipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (exp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(exp);
      }
      reward_.WriteTo(output, _repeated_reward_codec);
      if (vipLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(vipLevel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(exp);
      }
      size += reward_.CalculateSize(_repeated_reward_codec);
      if (vipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(vipLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            exp = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            reward_.AddEntriesFrom(input, _repeated_reward_codec);
            break;
          }
          case 24: {
            vipLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取vip礼包请求
  /// </summary>
  public sealed class DrawVipSouvenirPackRequest : pb::IMessage {
    private static readonly pb::MessageParser<DrawVipSouvenirPackRequest> _parser = new pb::MessageParser<DrawVipSouvenirPackRequest>(() => new DrawVipSouvenirPackRequest());
    public static pb::MessageParser<DrawVipSouvenirPackRequest> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///礼包对应的vip等级
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///体验卡信息
  /// </summary>
  public sealed class ExperienceCardInfo : pb::IMessage {
    private static readonly pb::MessageParser<ExperienceCardInfo> _parser = new pb::MessageParser<ExperienceCardInfo>(() => new ExperienceCardInfo());
    public static pb::MessageParser<ExperienceCardInfo> Parser { get { return _parser; } }

    private int vipLevel_;
    /// <summary>
    ///VIP等级
    /// </summary>
    public int vipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    private long endTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (vipLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(vipLevel);
      }
      if (endTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(endTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (vipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(vipLevel);
      }
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            vipLevel = input.ReadInt32();
            break;
          }
          case 16: {
            endTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class ReceiveFirstRechargeRewardRequest : pb::IMessage {
    private static readonly pb::MessageParser<ReceiveFirstRechargeRewardRequest> _parser = new pb::MessageParser<ReceiveFirstRechargeRewardRequest>(() => new ReceiveFirstRechargeRewardRequest());
    public static pb::MessageParser<ReceiveFirstRechargeRewardRequest> Parser { get { return _parser; } }

    private int day_;
    /// <summary>
    ///第几天
    /// </summary>
    public int day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (day != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(day);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(day);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            day = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///首充数据
  /// </summary>
  public sealed class FirstRechargeInfo : pb::IMessage {
    private static readonly pb::MessageParser<FirstRechargeInfo> _parser = new pb::MessageParser<FirstRechargeInfo>(() => new FirstRechargeInfo());
    public static pb::MessageParser<FirstRechargeInfo> Parser { get { return _parser; } }

    private long firstRechargeTime_;
    /// <summary>
    ///首次充值时间
    /// </summary>
    public long firstRechargeTime {
      get { return firstRechargeTime_; }
      set {
        firstRechargeTime_ = value;
      }
    }

    private int receiveDay_;
    /// <summary>
    ///已领取的天数1&lt;&lt;day-1
    /// </summary>
    public int receiveDay {
      get { return receiveDay_; }
      set {
        receiveDay_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (firstRechargeTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(firstRechargeTime);
      }
      if (receiveDay != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(receiveDay);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (firstRechargeTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(firstRechargeTime);
      }
      if (receiveDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(receiveDay);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            firstRechargeTime = input.ReadInt64();
            break;
          }
          case 16: {
            receiveDay = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回首充数据
  /// </summary>
  public sealed class FirstRechargeInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<FirstRechargeInfoResponse> _parser = new pb::MessageParser<FirstRechargeInfoResponse>(() => new FirstRechargeInfoResponse());
    public static pb::MessageParser<FirstRechargeInfoResponse> Parser { get { return _parser; } }

    private global::vip.FirstRechargeInfo firstRechargeInfo_;
    public global::vip.FirstRechargeInfo firstRechargeInfo {
      get { return firstRechargeInfo_; }
      set {
        firstRechargeInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (firstRechargeInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(firstRechargeInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (firstRechargeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(firstRechargeInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (firstRechargeInfo_ == null) {
              firstRechargeInfo_ = new global::vip.FirstRechargeInfo();
            }
            input.ReadMessage(firstRechargeInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///首次充值通知
  /// </summary>
  public sealed class FirstRechargeNtf : pb::IMessage {
    private static readonly pb::MessageParser<FirstRechargeNtf> _parser = new pb::MessageParser<FirstRechargeNtf>(() => new FirstRechargeNtf());
    public static pb::MessageParser<FirstRechargeNtf> Parser { get { return _parser; } }

    private long firstRechargeTime_;
    /// <summary>
    ///首次充值时间
    /// </summary>
    public long firstRechargeTime {
      get { return firstRechargeTime_; }
      set {
        firstRechargeTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (firstRechargeTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(firstRechargeTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (firstRechargeTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(firstRechargeTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            firstRechargeTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///首充入口
  /// </summary>
  public sealed class FirstRechargeEntrance : pb::IMessage {
    private static readonly pb::MessageParser<FirstRechargeEntrance> _parser = new pb::MessageParser<FirstRechargeEntrance>(() => new FirstRechargeEntrance());
    public static pb::MessageParser<FirstRechargeEntrance> Parser { get { return _parser; } }

    private int entranceId_;
    public int entranceId {
      get { return entranceId_; }
      set {
        entranceId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (entranceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(entranceId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (entranceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(entranceId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            entranceId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AccumulatedRechargeInfo : pb::IMessage {
    private static readonly pb::MessageParser<AccumulatedRechargeInfo> _parser = new pb::MessageParser<AccumulatedRechargeInfo>(() => new AccumulatedRechargeInfo());
    public static pb::MessageParser<AccumulatedRechargeInfo> Parser { get { return _parser; } }

    private int accumulatedRechargeDay_;
    /// <summary>
    ///已经累充的天数
    /// </summary>
    public int accumulatedRechargeDay {
      get { return accumulatedRechargeDay_; }
      set {
        accumulatedRechargeDay_ = value;
      }
    }

    private int loop_;
    /// <summary>
    ///当前轮数
    /// </summary>
    public int loop {
      get { return loop_; }
      set {
        loop_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_receiveIds_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> receiveIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取的奖励id
    /// </summary>
    public pbc::RepeatedField<int> receiveIds {
      get { return receiveIds_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (accumulatedRechargeDay != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(accumulatedRechargeDay);
      }
      if (loop != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(loop);
      }
      receiveIds_.WriteTo(output, _repeated_receiveIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (accumulatedRechargeDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(accumulatedRechargeDay);
      }
      if (loop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(loop);
      }
      size += receiveIds_.CalculateSize(_repeated_receiveIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            accumulatedRechargeDay = input.ReadInt32();
            break;
          }
          case 16: {
            loop = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            receiveIds_.AddEntriesFrom(input, _repeated_receiveIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ReceiveAccumulatedRechargeRewardRequest : pb::IMessage {
    private static readonly pb::MessageParser<ReceiveAccumulatedRechargeRewardRequest> _parser = new pb::MessageParser<ReceiveAccumulatedRechargeRewardRequest>(() => new ReceiveAccumulatedRechargeRewardRequest());
    public static pb::MessageParser<ReceiveAccumulatedRechargeRewardRequest> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///RechargeReward配置id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 月度充值，响应
  /// </summary>
  public sealed class ResMonthRechargeInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResMonthRechargeInfo> _parser = new pb::MessageParser<ResMonthRechargeInfo>(() => new ResMonthRechargeInfo());
    public static pb::MessageParser<ResMonthRechargeInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::vip.MonthRechargeInfo> _repeated_monthRechagreInfo_codec
        = pb::FieldCodec.ForMessage(10, global::vip.MonthRechargeInfo.Parser);
    private readonly pbc::RepeatedField<global::vip.MonthRechargeInfo> monthRechagreInfo_ = new pbc::RepeatedField<global::vip.MonthRechargeInfo>();
    public pbc::RepeatedField<global::vip.MonthRechargeInfo> monthRechagreInfo {
      get { return monthRechagreInfo_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      monthRechagreInfo_.WriteTo(output, _repeated_monthRechagreInfo_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += monthRechagreInfo_.CalculateSize(_repeated_monthRechagreInfo_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            monthRechagreInfo_.AddEntriesFrom(input, _repeated_monthRechagreInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class MonthRechargeInfo : pb::IMessage {
    private static readonly pb::MessageParser<MonthRechargeInfo> _parser = new pb::MessageParser<MonthRechargeInfo>(() => new MonthRechargeInfo());
    public static pb::MessageParser<MonthRechargeInfo> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    /// recharge表的表头id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int rewardFlag_;
    /// <summary>
    /// 表示领取的次数，0未领取，1领取一次，类推
    /// </summary>
    public int rewardFlag {
      get { return rewardFlag_; }
      set {
        rewardFlag_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (rewardFlag != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(rewardFlag);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (rewardFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(rewardFlag);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            rewardFlag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买元宝，请求
  /// </summary>
  public sealed class ReqMonthRecharge : pb::IMessage {
    private static readonly pb::MessageParser<ReqMonthRecharge> _parser = new pb::MessageParser<ReqMonthRecharge>(() => new ReqMonthRecharge());
    public static pb::MessageParser<ReqMonthRecharge> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///recharge表的表头id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
