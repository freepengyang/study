// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace chat {

  #region Messages
  /// <summary>
  ///聊天请求
  /// </summary>
  public sealed class ChatRequest : pb::IMessage {
    private static readonly pb::MessageParser<ChatRequest> _parser = new pb::MessageParser<ChatRequest>(() => new ChatRequest());
    public static pb::MessageParser<ChatRequest> Parser { get { return _parser; } }

    private int channel_;
    /// <summary>
    ///频道 1世界 2私聊
    /// </summary>
    public int channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    private string message_ = "";
    public string message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string sendTo_ = "";
    public string sendTo {
      get { return sendTo_; }
      set {
        sendTo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int type_;
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private string sendToName_ = "";
    /// <summary>
    ///私聊目标玩家的名字
    /// </summary>
    public string sendToName {
      get { return sendToName_; }
      set {
        sendToName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int quickChatId_;
    /// <summary>
    ///快速语句Id
    /// </summary>
    public int quickChatId {
      get { return quickChatId_; }
      set {
        quickChatId_ = value;
      }
    }

    private int showVipLevel_;
    /// <summary>
    /// 前端用
    /// </summary>
    public int showVipLevel {
      get { return showVipLevel_; }
      set {
        showVipLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (channel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(channel);
      }
      if (message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(message);
      }
      if (sendTo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(sendTo);
      }
      if (type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(type);
      }
      if (sendToName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(sendToName);
      }
      if (quickChatId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(quickChatId);
      }
      if (showVipLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(showVipLevel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(channel);
      }
      if (message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(message);
      }
      if (sendTo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(sendTo);
      }
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      if (sendToName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(sendToName);
      }
      if (quickChatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(quickChatId);
      }
      if (showVipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(showVipLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            channel = input.ReadInt32();
            break;
          }
          case 18: {
            message = input.ReadString();
            break;
          }
          case 26: {
            sendTo = input.ReadString();
            break;
          }
          case 32: {
            type = input.ReadInt32();
            break;
          }
          case 42: {
            sendToName = input.ReadString();
            break;
          }
          case 48: {
            quickChatId = input.ReadInt32();
            break;
          }
          case 56: {
            showVipLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///聊天消息
  /// </summary>
  public sealed class ChatMessage : pb::IMessage {
    private static readonly pb::MessageParser<ChatMessage> _parser = new pb::MessageParser<ChatMessage>(() => new ChatMessage());
    public static pb::MessageParser<ChatMessage> Parser { get { return _parser; } }

    private long sender_;
    public long sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    private string name_ = "";
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int channel_;
    public int channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    private string message_ = "";
    public string message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string sendTo_ = "";
    public string sendTo {
      get { return sendTo_; }
      set {
        sendTo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int vip_;
    public int vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    private int type_;
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private int quickChatId_;
    /// <summary>
    ///快速语句Id
    /// </summary>
    public int quickChatId {
      get { return quickChatId_; }
      set {
        quickChatId_ = value;
      }
    }

    private int nationId_;
    /// <summary>
    ///发送者国家ID			
    /// </summary>
    public int nationId {
      get { return nationId_; }
      set {
        nationId_ = value;
      }
    }

    private int showType_;
    /// <summary>
    ///显示类型
    /// </summary>
    public int showType {
      get { return showType_; }
      set {
        showType_ = value;
      }
    }

    private int sendToNation_;
    /// <summary>
    ///接收者的国家
    /// </summary>
    public int sendToNation {
      get { return sendToNation_; }
      set {
        sendToNation_ = value;
      }
    }

    private int sex_;
    /// <summary>
    ///性别
    /// </summary>
    public int sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private bool isBaby_;
    /// <summary>
    ///是否家族宝贝
    /// </summary>
    public bool isBaby {
      get { return isBaby_; }
      set {
        isBaby_ = value;
      }
    }

    private string nationPostionName_ = "";
    /// <summary>
    ///国家职位名称
    /// </summary>
    public string nationPostionName {
      get { return nationPostionName_; }
      set {
        nationPostionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string unionPostionName_ = "";
    /// <summary>
    ///家族职位名称
    /// </summary>
    public string unionPostionName {
      get { return unionPostionName_; }
      set {
        unionPostionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int photo_;
    /// <summary>
    ///头像
    /// </summary>
    public int photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    private int sendToPhoto_;
    /// <summary>
    ///接收者的头像
    /// </summary>
    public int sendToPhoto {
      get { return sendToPhoto_; }
      set {
        sendToPhoto_ = value;
      }
    }

    private bool isMonthCard_;
    /// <summary>
    ///是否月卡用户
    /// </summary>
    public bool isMonthCard {
      get { return isMonthCard_; }
      set {
        isMonthCard_ = value;
      }
    }

    private long sendToID_;
    /// <summary>
    ///接收者ID
    /// </summary>
    public long sendToID {
      get { return sendToID_; }
      set {
        sendToID_ = value;
      }
    }

    private int level_;
    /// <summary>
    ///发送者等级
    /// </summary>
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int career_;
    /// <summary>
    ///职业
    /// </summary>
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    private int showVipLevel_;
    /// <summary>
    /// 前端用
    /// </summary>
    public int showVipLevel {
      get { return showVipLevel_; }
      set {
        showVipLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (sender != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(sender);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (channel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(channel);
      }
      if (message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(message);
      }
      if (sendTo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(sendTo);
      }
      if (vip != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(vip);
      }
      if (type != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(type);
      }
      if (quickChatId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(quickChatId);
      }
      if (nationId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(nationId);
      }
      if (showType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(showType);
      }
      if (sendToNation != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(sendToNation);
      }
      if (sex != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(sex);
      }
      if (isBaby != false) {
        output.WriteRawTag(104);
        output.WriteBool(isBaby);
      }
      if (nationPostionName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(nationPostionName);
      }
      if (unionPostionName.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(unionPostionName);
      }
      if (photo != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(photo);
      }
      if (sendToPhoto != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(sendToPhoto);
      }
      if (isMonthCard != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(isMonthCard);
      }
      if (sendToID != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(sendToID);
      }
      if (level != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(level);
      }
      if (career != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(career);
      }
      if (showVipLevel != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(showVipLevel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (sender != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(sender);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(channel);
      }
      if (message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(message);
      }
      if (sendTo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(sendTo);
      }
      if (vip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(vip);
      }
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      if (quickChatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(quickChatId);
      }
      if (nationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nationId);
      }
      if (showType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(showType);
      }
      if (sendToNation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sendToNation);
      }
      if (sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sex);
      }
      if (isBaby != false) {
        size += 1 + 1;
      }
      if (nationPostionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(nationPostionName);
      }
      if (unionPostionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(unionPostionName);
      }
      if (photo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(photo);
      }
      if (sendToPhoto != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(sendToPhoto);
      }
      if (isMonthCard != false) {
        size += 2 + 1;
      }
      if (sendToID != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(sendToID);
      }
      if (level != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (career != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (showVipLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(showVipLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            sender = input.ReadInt64();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 24: {
            channel = input.ReadInt32();
            break;
          }
          case 34: {
            message = input.ReadString();
            break;
          }
          case 42: {
            sendTo = input.ReadString();
            break;
          }
          case 48: {
            vip = input.ReadInt32();
            break;
          }
          case 56: {
            type = input.ReadInt32();
            break;
          }
          case 64: {
            quickChatId = input.ReadInt32();
            break;
          }
          case 72: {
            nationId = input.ReadInt32();
            break;
          }
          case 80: {
            showType = input.ReadInt32();
            break;
          }
          case 88: {
            sendToNation = input.ReadInt32();
            break;
          }
          case 96: {
            sex = input.ReadInt32();
            break;
          }
          case 104: {
            isBaby = input.ReadBool();
            break;
          }
          case 114: {
            nationPostionName = input.ReadString();
            break;
          }
          case 122: {
            unionPostionName = input.ReadString();
            break;
          }
          case 128: {
            photo = input.ReadInt32();
            break;
          }
          case 136: {
            sendToPhoto = input.ReadInt32();
            break;
          }
          case 144: {
            isMonthCard = input.ReadBool();
            break;
          }
          case 152: {
            sendToID = input.ReadInt64();
            break;
          }
          case 160: {
            level = input.ReadInt32();
            break;
          }
          case 168: {
            career = input.ReadInt32();
            break;
          }
          case 176: {
            showVipLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏左下角提示
  /// </summary>
  public sealed class LeftCornerTipNtf : pb::IMessage {
    private static readonly pb::MessageParser<LeftCornerTipNtf> _parser = new pb::MessageParser<LeftCornerTipNtf>(() => new LeftCornerTipNtf());
    public static pb::MessageParser<LeftCornerTipNtf> Parser { get { return _parser; } }

    private string tip_ = "";
    /// <summary>
    ///提示信息
    /// </summary>
    public string tip {
      get { return tip_; }
      set {
        tip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (tip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(tip);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (tip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(tip);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tip = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///语音发布请求
  /// </summary>
  public sealed class ReleaseReq : pb::IMessage {
    private static readonly pb::MessageParser<ReleaseReq> _parser = new pb::MessageParser<ReleaseReq>(() => new ReleaseReq());
    public static pb::MessageParser<ReleaseReq> Parser { get { return _parser; } }

    private int type_;
    /// <summary>
    ///类型，国家频道/盟国频道/家族频道
    /// </summary>
    public int type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(type);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///语音发布响应
  /// </summary>
  public sealed class ReleaseNtf : pb::IMessage {
    private static readonly pb::MessageParser<ReleaseNtf> _parser = new pb::MessageParser<ReleaseNtf>(() => new ReleaseNtf());
    public static pb::MessageParser<ReleaseNtf> Parser { get { return _parser; } }

    private string position_ = "";
    /// <summary>
    ///发布人的职位
    /// </summary>
    public string position {
      get { return position_; }
      set {
        position_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string name_ = "";
    /// <summary>
    ///发布人的名字
    /// </summary>
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long rid_;
    /// <summary>
    ///房间号
    /// </summary>
    public long rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(position);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (rid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(rid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(position);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (rid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(rid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            position = input.ReadString();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 24: {
            rid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加入/离开语音房间
  /// </summary>
  public sealed class JoinOrLeaveVoiceRoomReq : pb::IMessage {
    private static readonly pb::MessageParser<JoinOrLeaveVoiceRoomReq> _parser = new pb::MessageParser<JoinOrLeaveVoiceRoomReq>(() => new JoinOrLeaveVoiceRoomReq());
    public static pb::MessageParser<JoinOrLeaveVoiceRoomReq> Parser { get { return _parser; } }

    private long rid_;
    /// <summary>
    ///房间类型
    /// </summary>
    public long rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (rid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(rid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (rid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(rid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            rid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回语音房间人数
  /// </summary>
  public sealed class VoiceRoomNtf : pb::IMessage {
    private static readonly pb::MessageParser<VoiceRoomNtf> _parser = new pb::MessageParser<VoiceRoomNtf>(() => new VoiceRoomNtf());
    public static pb::MessageParser<VoiceRoomNtf> Parser { get { return _parser; } }

    private int num_;
    public int num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(num);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(num);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色详情请求
  /// </summary>
  public sealed class RoleDetailReq : pb::IMessage {
    private static readonly pb::MessageParser<RoleDetailReq> _parser = new pb::MessageParser<RoleDetailReq>(() => new RoleDetailReq());
    public static pb::MessageParser<RoleDetailReq> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<long> _repeated_roleId_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> roleId_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///玩家id
    /// </summary>
    public pbc::RepeatedField<long> roleId {
      get { return roleId_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      roleId_.WriteTo(output, _repeated_roleId_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += roleId_.CalculateSize(_repeated_roleId_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            roleId_.AddEntriesFrom(input, _repeated_roleId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色详情
  /// </summary>
  public sealed class RoleInfo : pb::IMessage {
    private static readonly pb::MessageParser<RoleInfo> _parser = new pb::MessageParser<RoleInfo>(() => new RoleInfo());
    public static pb::MessageParser<RoleInfo> Parser { get { return _parser; } }

    private long id_;
    public long id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private string name_ = "";
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int level_;
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(id);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(level);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(id);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt64();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 24: {
            level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色详情响应
  /// </summary>
  public sealed class RoleDetailNtf : pb::IMessage {
    private static readonly pb::MessageParser<RoleDetailNtf> _parser = new pb::MessageParser<RoleDetailNtf>(() => new RoleDetailNtf());
    public static pb::MessageParser<RoleDetailNtf> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::chat.RoleInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::chat.RoleInfo.Parser);
    private readonly pbc::RepeatedField<global::chat.RoleInfo> infos_ = new pbc::RepeatedField<global::chat.RoleInfo>();
    public pbc::RepeatedField<global::chat.RoleInfo> infos {
      get { return infos_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///举报请求
  /// </summary>
  public sealed class InformReq : pb::IMessage {
    private static readonly pb::MessageParser<InformReq> _parser = new pb::MessageParser<InformReq>(() => new InformReq());
    public static pb::MessageParser<InformReq> Parser { get { return _parser; } }

    private long roleId_;
    /// <summary>
    ///被举报玩家ID
    /// </summary>
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///禁言通知
  /// </summary>
  public sealed class ForbidChatNtf : pb::IMessage {
    private static readonly pb::MessageParser<ForbidChatNtf> _parser = new pb::MessageParser<ForbidChatNtf>(() => new ForbidChatNtf());
    public static pb::MessageParser<ForbidChatNtf> Parser { get { return _parser; } }

    private long roleId_;
    /// <summary>
    ///被禁言玩家ID
    /// </summary>
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(roleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            roleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class BigExpressionReq : pb::IMessage {
    private static readonly pb::MessageParser<BigExpressionReq> _parser = new pb::MessageParser<BigExpressionReq>(() => new BigExpressionReq());
    public static pb::MessageParser<BigExpressionReq> Parser { get { return _parser; } }

    private string content_ = "";
    /// <summary>
    ///表情
    /// </summary>
    public string content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(content);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(content);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class BigExpressionNtf : pb::IMessage {
    private static readonly pb::MessageParser<BigExpressionNtf> _parser = new pb::MessageParser<BigExpressionNtf>(() => new BigExpressionNtf());
    public static pb::MessageParser<BigExpressionNtf> Parser { get { return _parser; } }

    private string content_ = "";
    /// <summary>
    ///表情
    /// </summary>
    public string content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long roleId_;
    /// <summary>
    ///玩家id
    /// </summary>
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(content);
      }
      if (roleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(roleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(content);
      }
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            content = input.ReadString();
            break;
          }
          case 16: {
            roleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
