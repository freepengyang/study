// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ultimate.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ultimate {

  #region Messages
  public sealed class ThreeTuple : pb::IMessage {
    private static readonly pb::MessageParser<ThreeTuple> _parser = new pb::MessageParser<ThreeTuple>(() => new ThreeTuple());
    public static pb::MessageParser<ThreeTuple> Parser { get { return _parser; } }

    private int a_;
    public int a {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    private int b_;
    public int b {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    private int c_;
    public int c {
      get { return c_; }
      set {
        c_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (a != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(a);
      }
      if (b != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(b);
      }
      if (c != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(c);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (a != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(a);
      }
      if (b != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(b);
      }
      if (c != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(c);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            a = input.ReadInt32();
            break;
          }
          case 16: {
            b = input.ReadInt32();
            break;
          }
          case 24: {
            c = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleUltimateData : pb::IMessage {
    private static readonly pb::MessageParser<RoleUltimateData> _parser = new pb::MessageParser<RoleUltimateData>(() => new RoleUltimateData());
    public static pb::MessageParser<RoleUltimateData> Parser { get { return _parser; } }

    private int challengeExp_;
    /// <summary>
    ///冒险经验
    /// </summary>
    public int challengeExp {
      get { return challengeExp_; }
      set {
        challengeExp_ = value;
      }
    }

    private int challengeLv_;
    /// <summary>
    ///冒险等级;
    /// </summary>
    public int challengeLv {
      get { return challengeLv_; }
      set {
        challengeLv_ = value;
      }
    }

    private int curInstId_;
    /// <summary>
    ///当前副本通关id;
    /// </summary>
    public int curInstId {
      get { return curInstId_; }
      set {
        curInstId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ultimate.ThreeTuple> _repeated_additionAttrs_codec
        = pb::FieldCodec.ForMessage(34, global::ultimate.ThreeTuple.Parser);
    private readonly pbc::RepeatedField<global::ultimate.ThreeTuple> additionAttrs_ = new pbc::RepeatedField<global::ultimate.ThreeTuple>();
    /// <summary>
    ///增益效果
    /// </summary>
    public pbc::RepeatedField<global::ultimate.ThreeTuple> additionAttrs {
      get { return additionAttrs_; }
    }

    private int maxReliveTimes_;
    /// <summary>
    ///最大复活次数;
    /// </summary>
    public int maxReliveTimes {
      get { return maxReliveTimes_; }
      set {
        maxReliveTimes_ = value;
      }
    }

    private int reliveTimes_;
    /// <summary>
    ///已经复活的次数;
    /// </summary>
    public int reliveTimes {
      get { return reliveTimes_; }
      set {
        reliveTimes_ = value;
      }
    }

    private int maxInstLevel_;
    /// <summary>
    ///通关最大关卡
    /// </summary>
    public int maxInstLevel {
      get { return maxInstLevel_; }
      set {
        maxInstLevel_ = value;
      }
    }

    private int maxHp_;
    public int maxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    private int hp_;
    public int hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private long endTime_;
    /// <summary>
    ///结束时间戳;
    /// </summary>
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    private int resetCount_;
    /// <summary>
    ///已经重置的次数;
    /// </summary>
    public int resetCount {
      get { return resetCount_; }
      set {
        resetCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (challengeExp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(challengeExp);
      }
      if (challengeLv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(challengeLv);
      }
      if (curInstId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(curInstId);
      }
      additionAttrs_.WriteTo(output, _repeated_additionAttrs_codec);
      if (maxReliveTimes != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(maxReliveTimes);
      }
      if (reliveTimes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(reliveTimes);
      }
      if (maxInstLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(maxInstLevel);
      }
      if (maxHp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(maxHp);
      }
      if (hp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(hp);
      }
      if (endTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(endTime);
      }
      if (resetCount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(resetCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (challengeExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(challengeExp);
      }
      if (challengeLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(challengeLv);
      }
      if (curInstId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(curInstId);
      }
      size += additionAttrs_.CalculateSize(_repeated_additionAttrs_codec);
      if (maxReliveTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxReliveTimes);
      }
      if (reliveTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(reliveTimes);
      }
      if (maxInstLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxInstLevel);
      }
      if (maxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxHp);
      }
      if (hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hp);
      }
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      if (resetCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(resetCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            challengeExp = input.ReadInt32();
            break;
          }
          case 16: {
            challengeLv = input.ReadInt32();
            break;
          }
          case 24: {
            curInstId = input.ReadInt32();
            break;
          }
          case 34: {
            additionAttrs_.AddEntriesFrom(input, _repeated_additionAttrs_codec);
            break;
          }
          case 40: {
            maxReliveTimes = input.ReadInt32();
            break;
          }
          case 48: {
            reliveTimes = input.ReadInt32();
            break;
          }
          case 56: {
            maxInstLevel = input.ReadInt32();
            break;
          }
          case 64: {
            maxHp = input.ReadInt32();
            break;
          }
          case 72: {
            hp = input.ReadInt32();
            break;
          }
          case 80: {
            endTime = input.ReadInt64();
            break;
          }
          case 88: {
            resetCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送增益效果属性选择;
  /// </summary>
  public sealed class SelectAdditionEffect : pb::IMessage {
    private static readonly pb::MessageParser<SelectAdditionEffect> _parser = new pb::MessageParser<SelectAdditionEffect>(() => new SelectAdditionEffect());
    public static pb::MessageParser<SelectAdditionEffect> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::ultimate.ThreeTuple> _repeated_additionAttrs_codec
        = pb::FieldCodec.ForMessage(10, global::ultimate.ThreeTuple.Parser);
    private readonly pbc::RepeatedField<global::ultimate.ThreeTuple> additionAttrs_ = new pbc::RepeatedField<global::ultimate.ThreeTuple>();
    public pbc::RepeatedField<global::ultimate.ThreeTuple> additionAttrs {
      get { return additionAttrs_; }
    }

    private int resetTimes_;
    /// <summary>
    ///是次数;
    /// </summary>
    public int resetTimes {
      get { return resetTimes_; }
      set {
        resetTimes_ = value;
      }
    }

    private int maxResetTimes_;
    /// <summary>
    ///最大重置次数;
    /// </summary>
    public int maxResetTimes {
      get { return maxResetTimes_; }
      set {
        maxResetTimes_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      additionAttrs_.WriteTo(output, _repeated_additionAttrs_codec);
      if (resetTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(resetTimes);
      }
      if (maxResetTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(maxResetTimes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += additionAttrs_.CalculateSize(_repeated_additionAttrs_codec);
      if (resetTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(resetTimes);
      }
      if (maxResetTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxResetTimes);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            additionAttrs_.AddEntriesFrom(input, _repeated_additionAttrs_codec);
            break;
          }
          case 16: {
            resetTimes = input.ReadInt32();
            break;
          }
          case 24: {
            maxResetTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///选择操作索引;
  /// </summary>
  public sealed class SelectIndex : pb::IMessage {
    private static readonly pb::MessageParser<SelectIndex> _parser = new pb::MessageParser<SelectIndex>(() => new SelectIndex());
    public static pb::MessageParser<SelectIndex> Parser { get { return _parser; } }

    private int index_;
    public int index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(index);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(index);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///操作结果
  /// </summary>
  public sealed class OpState : pb::IMessage {
    private static readonly pb::MessageParser<OpState> _parser = new pb::MessageParser<OpState>(() => new OpState());
    public static pb::MessageParser<OpState> Parser { get { return _parser; } }

    private int state_;
    public int state {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (state != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(state);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(state);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///排行数据
  /// </summary>
  public sealed class RankInfo : pb::IMessage {
    private static readonly pb::MessageParser<RankInfo> _parser = new pb::MessageParser<RankInfo>(() => new RankInfo());
    public static pb::MessageParser<RankInfo> Parser { get { return _parser; } }

    private int rank_;
    public int rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    private string name_ = "";
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int data_;
    public int data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private long roleId_;
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(rank);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (data != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(data);
      }
      if (roleId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(roleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(rank);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(data);
      }
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            rank = input.ReadInt32();
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 24: {
            data = input.ReadInt32();
            break;
          }
          case 32: {
            roleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回应的排行数据;
  /// </summary>
  public sealed class ResponseRankInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResponseRankInfo> _parser = new pb::MessageParser<ResponseRankInfo>(() => new ResponseRankInfo());
    public static pb::MessageParser<ResponseRankInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::ultimate.RankInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::ultimate.RankInfo.Parser);
    private readonly pbc::RepeatedField<global::ultimate.RankInfo> info_ = new pbc::RepeatedField<global::ultimate.RankInfo>();
    public pbc::RepeatedField<global::ultimate.RankInfo> info {
      get { return info_; }
    }

    private int myRank_;
    public int myRank {
      get { return myRank_; }
      set {
        myRank_ = value;
      }
    }

    private int maxInstLevel_;
    public int maxInstLevel {
      get { return maxInstLevel_; }
      set {
        maxInstLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
      if (myRank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(myRank);
      }
      if (maxInstLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(maxInstLevel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      if (myRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(myRank);
      }
      if (maxInstLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxInstLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 16: {
            myRank = input.ReadInt32();
            break;
          }
          case 24: {
            maxInstLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AddHp : pb::IMessage {
    private static readonly pb::MessageParser<AddHp> _parser = new pb::MessageParser<AddHp>(() => new AddHp());
    public static pb::MessageParser<AddHp> Parser { get { return _parser; } }

    private int value_;
    public int value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(value);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///极限挑战通关信息;
  /// </summary>
  public sealed class UltimatePassInfo : pb::IMessage {
    private static readonly pb::MessageParser<UltimatePassInfo> _parser = new pb::MessageParser<UltimatePassInfo>(() => new UltimatePassInfo());
    public static pb::MessageParser<UltimatePassInfo> Parser { get { return _parser; } }

    private int level_;
    /// <summary>
    ///通关关卡
    /// </summary>
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private bool showCard_;
    /// <summary>
    ///是否显示转盘
    /// </summary>
    public bool showCard {
      get { return showCard_; }
      set {
        showCard_ = value;
      }
    }

    private bool showShopNpc_;
    /// <summary>
    ///是否显示npc
    /// </summary>
    public bool showShopNpc {
      get { return showShopNpc_; }
      set {
        showShopNpc_ = value;
      }
    }

    private bool expUpgrade_;
    /// <summary>
    ///冒险经验是否升级了;
    /// </summary>
    public bool expUpgrade {
      get { return expUpgrade_; }
      set {
        expUpgrade_ = value;
      }
    }

    private int challengeExp_;
    /// <summary>
    ///冒险经验
    /// </summary>
    public int challengeExp {
      get { return challengeExp_; }
      set {
        challengeExp_ = value;
      }
    }

    private int challengeLv_;
    /// <summary>
    ///冒险等级;
    /// </summary>
    public int challengeLv {
      get { return challengeLv_; }
      set {
        challengeLv_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(level);
      }
      if (showCard != false) {
        output.WriteRawTag(16);
        output.WriteBool(showCard);
      }
      if (showShopNpc != false) {
        output.WriteRawTag(24);
        output.WriteBool(showShopNpc);
      }
      if (expUpgrade != false) {
        output.WriteRawTag(32);
        output.WriteBool(expUpgrade);
      }
      if (challengeExp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(challengeExp);
      }
      if (challengeLv != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(challengeLv);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (showCard != false) {
        size += 1 + 1;
      }
      if (showShopNpc != false) {
        size += 1 + 1;
      }
      if (expUpgrade != false) {
        size += 1 + 1;
      }
      if (challengeExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(challengeExp);
      }
      if (challengeLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(challengeLv);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            level = input.ReadInt32();
            break;
          }
          case 16: {
            showCard = input.ReadBool();
            break;
          }
          case 24: {
            showShopNpc = input.ReadBool();
            break;
          }
          case 32: {
            expUpgrade = input.ReadBool();
            break;
          }
          case 40: {
            challengeExp = input.ReadInt32();
            break;
          }
          case 48: {
            challengeLv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
