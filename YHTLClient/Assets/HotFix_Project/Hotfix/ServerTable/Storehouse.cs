// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Storehouse.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace storehouse {

  #region Messages
  /// <summary>
  ///仓库
  /// </summary>
  public sealed class StorehouseInfo : pb::IMessage {
    private static readonly pb::MessageParser<StorehouseInfo> _parser = new pb::MessageParser<StorehouseInfo>(() => new StorehouseInfo());
    public static pb::MessageParser<StorehouseInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_itemInfo_codec
        = pb::FieldCodec.ForMessage(10, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> itemInfo_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    /// <summary>
    ///背包物品
    /// </summary>
    public pbc::RepeatedField<global::bag.BagItemInfo> itemInfo {
      get { return itemInfo_; }
    }

    private int maxCount_;
    /// <summary>
    ///仓库格数
    /// </summary>
    public int maxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      itemInfo_.WriteTo(output, _repeated_itemInfo_codec);
      if (maxCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(maxCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += itemInfo_.CalculateSize(_repeated_itemInfo_codec);
      if (maxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemInfo_.AddEntriesFrom(input, _repeated_itemInfo_codec);
            break;
          }
          case 16: {
            maxCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///仓库物品变动列表
  /// </summary>
  public sealed class StorehouseItemChangeList : pb::IMessage {
    private static readonly pb::MessageParser<StorehouseItemChangeList> _parser = new pb::MessageParser<StorehouseItemChangeList>(() => new StorehouseItemChangeList());
    public static pb::MessageParser<StorehouseItemChangeList> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_changeList_codec
        = pb::FieldCodec.ForMessage(10, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> changeList_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    public pbc::RepeatedField<global::bag.BagItemInfo> changeList {
      get { return changeList_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      changeList_.WriteTo(output, _repeated_changeList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += changeList_.CalculateSize(_repeated_changeList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            changeList_.AddEntriesFrom(input, _repeated_changeList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///交换物品格子请求
  /// </summary>
  public sealed class ExchangeItemMsg : pb::IMessage {
    private static readonly pb::MessageParser<ExchangeItemMsg> _parser = new pb::MessageParser<ExchangeItemMsg>(() => new ExchangeItemMsg());
    public static pb::MessageParser<ExchangeItemMsg> Parser { get { return _parser; } }

    private int fromIndex_;
    public int fromIndex {
      get { return fromIndex_; }
      set {
        fromIndex_ = value;
      }
    }

    private int toIndex_;
    public int toIndex {
      get { return toIndex_; }
      set {
        toIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (fromIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(fromIndex);
      }
      if (toIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(toIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (fromIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(fromIndex);
      }
      if (toIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(toIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            fromIndex = input.ReadInt32();
            break;
          }
          case 16: {
            toIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///仓库到背包请求
  /// </summary>
  public sealed class StorehouseToBagRequest : pb::IMessage {
    private static readonly pb::MessageParser<StorehouseToBagRequest> _parser = new pb::MessageParser<StorehouseToBagRequest>(() => new StorehouseToBagRequest());
    public static pb::MessageParser<StorehouseToBagRequest> Parser { get { return _parser; } }

    private int storehouseIndex_;
    public int storehouseIndex {
      get { return storehouseIndex_; }
      set {
        storehouseIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (storehouseIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(storehouseIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (storehouseIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(storehouseIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            storehouseIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///仓库到背包响应 背包增加的物品走itemchange
  /// </summary>
  public sealed class StorehouseToBagResponse : pb::IMessage {
    private static readonly pb::MessageParser<StorehouseToBagResponse> _parser = new pb::MessageParser<StorehouseToBagResponse>(() => new StorehouseToBagResponse());
    public static pb::MessageParser<StorehouseToBagResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::bag.BagItemInfo> _repeated_removeItem_codec
        = pb::FieldCodec.ForMessage(10, global::bag.BagItemInfo.Parser);
    private readonly pbc::RepeatedField<global::bag.BagItemInfo> removeItem_ = new pbc::RepeatedField<global::bag.BagItemInfo>();
    /// <summary>
    ///仓库移除的物品
    /// </summary>
    public pbc::RepeatedField<global::bag.BagItemInfo> removeItem {
      get { return removeItem_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      removeItem_.WriteTo(output, _repeated_removeItem_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += removeItem_.CalculateSize(_repeated_removeItem_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            removeItem_.AddEntriesFrom(input, _repeated_removeItem_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///仓库格子增加请求
  /// </summary>
  public sealed class AddStorehouseRequest : pb::IMessage {
    private static readonly pb::MessageParser<AddStorehouseRequest> _parser = new pb::MessageParser<AddStorehouseRequest>(() => new AddStorehouseRequest());
    public static pb::MessageParser<AddStorehouseRequest> Parser { get { return _parser; } }

    private int num_;
    /// <summary>
    ///增加的背包格子数
    /// </summary>
    public int num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(num);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(num);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///仓库格子增加响应
  /// </summary>
  public sealed class AddStorehouseCount : pb::IMessage {
    private static readonly pb::MessageParser<AddStorehouseCount> _parser = new pb::MessageParser<AddStorehouseCount>(() => new AddStorehouseCount());
    public static pb::MessageParser<AddStorehouseCount> Parser { get { return _parser; } }

    private int storehouseCount_;
    /// <summary>
    ///增加后的仓库格子数量
    /// </summary>
    public int storehouseCount {
      get { return storehouseCount_; }
      set {
        storehouseCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (storehouseCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(storehouseCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (storehouseCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(storehouseCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            storehouseCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
