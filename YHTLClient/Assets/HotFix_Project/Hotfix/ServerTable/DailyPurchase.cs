// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DailyPurchase.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace dailypurchase {

  #region Messages
  /// <summary>
  ///礼包购买信息
  /// </summary>
  public sealed class GiftBuyInfo : pb::IMessage {
    private static readonly pb::MessageParser<GiftBuyInfo> _parser = new pb::MessageParser<GiftBuyInfo>(() => new GiftBuyInfo());
    public static pb::MessageParser<GiftBuyInfo> Parser { get { return _parser; } }

    private int giftId_;
    /// <summary>
    ///id
    /// </summary>
    public int giftId {
      get { return giftId_; }
      set {
        giftId_ = value;
      }
    }

    private int buyTimes_;
    /// <summary>
    ///购买次数
    /// </summary>
    public int buyTimes {
      get { return buyTimes_; }
      set {
        buyTimes_ = value;
      }
    }

    private bool isNew_;
    /// <summary>
    ///是否新
    /// </summary>
    public bool isNew {
      get { return isNew_; }
      set {
        isNew_ = value;
      }
    }

    private long endTime_;
    /// <summary>
    ///结束时间 0为不结束
    /// </summary>
    public long endTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (giftId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(giftId);
      }
      if (buyTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(buyTimes);
      }
      if (isNew != false) {
        output.WriteRawTag(24);
        output.WriteBool(isNew);
      }
      if (endTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(endTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (giftId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(giftId);
      }
      if (buyTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(buyTimes);
      }
      if (isNew != false) {
        size += 1 + 1;
      }
      if (endTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(endTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            giftId = input.ReadInt32();
            break;
          }
          case 16: {
            buyTimes = input.ReadInt32();
            break;
          }
          case 24: {
            isNew = input.ReadBool();
            break;
          }
          case 32: {
            endTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每日限购信息
  /// </summary>
  public sealed class DailyPurchaseInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<DailyPurchaseInfoResponse> _parser = new pb::MessageParser<DailyPurchaseInfoResponse>(() => new DailyPurchaseInfoResponse());
    public static pb::MessageParser<DailyPurchaseInfoResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::dailypurchase.GiftBuyInfo> _repeated_giftBuyInfos_codec
        = pb::FieldCodec.ForMessage(10, global::dailypurchase.GiftBuyInfo.Parser);
    private readonly pbc::RepeatedField<global::dailypurchase.GiftBuyInfo> giftBuyInfos_ = new pbc::RepeatedField<global::dailypurchase.GiftBuyInfo>();
    /// <summary>
    ///礼包购买信息
    /// </summary>
    public pbc::RepeatedField<global::dailypurchase.GiftBuyInfo> giftBuyInfos {
      get { return giftBuyInfos_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      giftBuyInfos_.WriteTo(output, _repeated_giftBuyInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += giftBuyInfos_.CalculateSize(_repeated_giftBuyInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            giftBuyInfos_.AddEntriesFrom(input, _repeated_giftBuyInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买请求
  /// </summary>
  public sealed class DailyPurchaseBuyRequest : pb::IMessage {
    private static readonly pb::MessageParser<DailyPurchaseBuyRequest> _parser = new pb::MessageParser<DailyPurchaseBuyRequest>(() => new DailyPurchaseBuyRequest());
    public static pb::MessageParser<DailyPurchaseBuyRequest> Parser { get { return _parser; } }

    private int id_;
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int count_;
    /// <summary>
    ///购买次数
    /// </summary>
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查看礼包
  /// </summary>
  public sealed class LookGiftRequest : pb::IMessage {
    private static readonly pb::MessageParser<LookGiftRequest> _parser = new pb::MessageParser<LookGiftRequest>(() => new LookGiftRequest());
    public static pb::MessageParser<LookGiftRequest> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///查看的id列表
    /// </summary>
    public pbc::RepeatedField<int> ids {
      get { return ids_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买物品响应
  /// </summary>
  public sealed class DailyPurchaseBuyResponse : pb::IMessage {
    private static readonly pb::MessageParser<DailyPurchaseBuyResponse> _parser = new pb::MessageParser<DailyPurchaseBuyResponse>(() => new DailyPurchaseBuyResponse());
    public static pb::MessageParser<DailyPurchaseBuyResponse> Parser { get { return _parser; } }

    private global::dailypurchase.GiftBuyInfo giftBuyInfo_;
    public global::dailypurchase.GiftBuyInfo giftBuyInfo {
      get { return giftBuyInfo_; }
      set {
        giftBuyInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (giftBuyInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(giftBuyInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (giftBuyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(giftBuyInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (giftBuyInfo_ == null) {
              giftBuyInfo_ = new global::dailypurchase.GiftBuyInfo();
            }
            input.ReadMessage(giftBuyInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class ZhiGouInfo : pb::IMessage {
    private static readonly pb::MessageParser<ZhiGouInfo> _parser = new pb::MessageParser<ZhiGouInfo>(() => new ZhiGouInfo());
    public static pb::MessageParser<ZhiGouInfo> Parser { get { return _parser; } }

    private int money_;
    /// <summary>
    ///累计充值额度
    /// </summary>
    public int money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_buyIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> buyIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已经购买过的礼包
    /// </summary>
    public pbc::RepeatedField<int> buyIds {
      get { return buyIds_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (money != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(money);
      }
      buyIds_.WriteTo(output, _repeated_buyIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (money != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(money);
      }
      size += buyIds_.CalculateSize(_repeated_buyIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            money = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            buyIds_.AddEntriesFrom(input, _repeated_buyIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ZhiGouOrder : pb::IMessage {
    private static readonly pb::MessageParser<ZhiGouOrder> _parser = new pb::MessageParser<ZhiGouOrder>(() => new ZhiGouOrder());
    public static pb::MessageParser<ZhiGouOrder> Parser { get { return _parser; } }

    private long orderId_;
    /// <summary>
    ///订单单号
    /// </summary>
    public long orderId {
      get { return orderId_; }
      set {
        orderId_ = value;
      }
    }

    private int giftId_;
    /// <summary>
    ///id
    /// </summary>
    public int giftId {
      get { return giftId_; }
      set {
        giftId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (orderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(orderId);
      }
      if (giftId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(giftId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (orderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(orderId);
      }
      if (giftId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(giftId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            orderId = input.ReadInt64();
            break;
          }
          case 16: {
            giftId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GiftBagList : pb::IMessage {
    private static readonly pb::MessageParser<GiftBagList> _parser = new pb::MessageParser<GiftBagList>(() => new GiftBagList());
    public static pb::MessageParser<GiftBagList> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_giftIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> giftIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///id
    /// </summary>
    public pbc::RepeatedField<int> giftIds {
      get { return giftIds_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      giftIds_.WriteTo(output, _repeated_giftIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += giftIds_.CalculateSize(_repeated_giftIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            giftIds_.AddEntriesFrom(input, _repeated_giftIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查看页签
  /// </summary>
  public sealed class LookPositionRequest : pb::IMessage {
    private static readonly pb::MessageParser<LookPositionRequest> _parser = new pb::MessageParser<LookPositionRequest>(() => new LookPositionRequest());
    public static pb::MessageParser<LookPositionRequest> Parser { get { return _parser; } }

    private int position_;
    /// <summary>
    ///查看的页签
    /// </summary>
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(position);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查看页签
  /// </summary>
  public sealed class LookPositionInfo : pb::IMessage {
    private static readonly pb::MessageParser<LookPositionInfo> _parser = new pb::MessageParser<LookPositionInfo>(() => new LookPositionInfo());
    public static pb::MessageParser<LookPositionInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_position_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> position_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///查看过的页签
    /// </summary>
    public pbc::RepeatedField<int> position {
      get { return position_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      position_.WriteTo(output, _repeated_position_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += position_.CalculateSize(_repeated_position_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            position_.AddEntriesFrom(input, _repeated_position_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
