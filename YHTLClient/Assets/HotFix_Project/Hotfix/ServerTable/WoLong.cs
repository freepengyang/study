// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WoLong.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace wolong {

  #region Messages
  public sealed class WoLongInfo : pb::IMessage {
    private static readonly pb::MessageParser<WoLongInfo> _parser = new pb::MessageParser<WoLongInfo>(() => new WoLongInfo());
    public static pb::MessageParser<WoLongInfo> Parser { get { return _parser; } }

    private int currWolongSoul_;
    /// <summary>
    ///当前所有卧龙修为
    /// </summary>
    public int currWolongSoul {
      get { return currWolongSoul_; }
      set {
        currWolongSoul_ = value;
      }
    }

    private int wolongLevel_;
    /// <summary>
    ///卧龙等级;
    /// </summary>
    public int wolongLevel {
      get { return wolongLevel_; }
      set {
        wolongLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (currWolongSoul != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(currWolongSoul);
      }
      if (wolongLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(wolongLevel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (currWolongSoul != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(currWolongSoul);
      }
      if (wolongLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(wolongLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            currWolongSoul = input.ReadInt32();
            break;
          }
          case 16: {
            wolongLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TwoTuple : pb::IMessage {
    private static readonly pb::MessageParser<TwoTuple> _parser = new pb::MessageParser<TwoTuple>(() => new TwoTuple());
    public static pb::MessageParser<TwoTuple> Parser { get { return _parser; } }

    private int a_;
    public int a {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    private int b_;
    public int b {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (a != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(a);
      }
      if (b != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(b);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (a != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(a);
      }
      if (b != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(b);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            a = input.ReadInt32();
            break;
          }
          case 16: {
            b = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///卧龙等级升级操作反馈
  /// </summary>
  public sealed class WoLongLevelUpgradeResponse : pb::IMessage {
    private static readonly pb::MessageParser<WoLongLevelUpgradeResponse> _parser = new pb::MessageParser<WoLongLevelUpgradeResponse>(() => new WoLongLevelUpgradeResponse());
    public static pb::MessageParser<WoLongLevelUpgradeResponse> Parser { get { return _parser; } }

    private bool success_;
    public bool success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    private global::wolong.WoLongInfo info_;
    public global::wolong.WoLongInfo info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (success != false) {
        output.WriteRawTag(8);
        output.WriteBool(success);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(info);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (success != false) {
        size += 1 + 1;
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            success = input.ReadBool();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::wolong.WoLongInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///卧龙装备洗练;
  /// </summary>
  public sealed class WoLongXiLianRequest : pb::IMessage {
    private static readonly pb::MessageParser<WoLongXiLianRequest> _parser = new pb::MessageParser<WoLongXiLianRequest>(() => new WoLongXiLianRequest());
    public static pb::MessageParser<WoLongXiLianRequest> Parser { get { return _parser; } }

    private int position_;
    /// <summary>
    ///洗练装备
    /// </summary>
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    private int xilianType_;
    /// <summary>
    ///洗练类型; 1:龙力洗练，2：龙技洗练;
    /// </summary>
    public int xilianType {
      get { return xilianType_; }
      set {
        xilianType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(position);
      }
      if (xilianType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(xilianType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      if (xilianType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(xilianType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            position = input.ReadInt32();
            break;
          }
          case 16: {
            xilianType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SelectEquip : pb::IMessage {
    private static readonly pb::MessageParser<SelectEquip> _parser = new pb::MessageParser<SelectEquip>(() => new SelectEquip());
    public static pb::MessageParser<SelectEquip> Parser { get { return _parser; } }

    private int position_;
    /// <summary>
    ///洗练装备
    /// </summary>
    public int position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    private int xilianType_;
    public int xilianType {
      get { return xilianType_; }
      set {
        xilianType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(position);
      }
      if (xilianType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(xilianType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(position);
      }
      if (xilianType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(xilianType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            position = input.ReadInt32();
            break;
          }
          case 16: {
            xilianType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class WoLongXiLianResponse : pb::IMessage {
    private static readonly pb::MessageParser<WoLongXiLianResponse> _parser = new pb::MessageParser<WoLongXiLianResponse>(() => new WoLongXiLianResponse());
    public static pb::MessageParser<WoLongXiLianResponse> Parser { get { return _parser; } }

    private int xilianType_;
    /// <summary>
    ///洗练类型
    /// </summary>
    public int xilianType {
      get { return xilianType_; }
      set {
        xilianType_ = value;
      }
    }

    private global::bag.EquipInfo result_;
    public global::bag.EquipInfo result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::bag.WolongRandomEffect> _repeated_baseAffixXilians_codec
        = pb::FieldCodec.ForMessage(26, global::bag.WolongRandomEffect.Parser);
    private readonly pbc::RepeatedField<global::bag.WolongRandomEffect> baseAffixXilians_ = new pbc::RepeatedField<global::bag.WolongRandomEffect>();
    /// <summary>
    ///基础词缀
    /// </summary>
    public pbc::RepeatedField<global::bag.WolongRandomEffect> baseAffixXilians {
      get { return baseAffixXilians_; }
    }

    private static readonly pb::FieldCodec<global::bag.WolongRandomEffect> _repeated_intensifyAffixXianlians_codec
        = pb::FieldCodec.ForMessage(34, global::bag.WolongRandomEffect.Parser);
    private readonly pbc::RepeatedField<global::bag.WolongRandomEffect> intensifyAffixXianlians_ = new pbc::RepeatedField<global::bag.WolongRandomEffect>();
    /// <summary>
    ///强化词缀
    /// </summary>
    public pbc::RepeatedField<global::bag.WolongRandomEffect> intensifyAffixXianlians {
      get { return intensifyAffixXianlians_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (xilianType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(xilianType);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(result);
      }
      baseAffixXilians_.WriteTo(output, _repeated_baseAffixXilians_codec);
      intensifyAffixXianlians_.WriteTo(output, _repeated_intensifyAffixXianlians_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (xilianType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(xilianType);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(result);
      }
      size += baseAffixXilians_.CalculateSize(_repeated_baseAffixXilians_codec);
      size += intensifyAffixXianlians_.CalculateSize(_repeated_intensifyAffixXianlians_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            xilianType = input.ReadInt32();
            break;
          }
          case 18: {
            if (result_ == null) {
              result_ = new global::bag.EquipInfo();
            }
            input.ReadMessage(result_);
            break;
          }
          case 26: {
            baseAffixXilians_.AddEntriesFrom(input, _repeated_baseAffixXilians_codec);
            break;
          }
          case 34: {
            intensifyAffixXianlians_.AddEntriesFrom(input, _repeated_intensifyAffixXianlians_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class WoLongXiLianSelectResponse : pb::IMessage {
    private static readonly pb::MessageParser<WoLongXiLianSelectResponse> _parser = new pb::MessageParser<WoLongXiLianSelectResponse>(() => new WoLongXiLianSelectResponse());
    public static pb::MessageParser<WoLongXiLianSelectResponse> Parser { get { return _parser; } }

    private global::bag.EquipInfo result_;
    public global::bag.EquipInfo result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(result);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(result);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (result_ == null) {
              result_ = new global::bag.EquipInfo();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

  }

  public sealed class ActiveSkillGroupInfo : pb::IMessage {
    private static readonly pb::MessageParser<ActiveSkillGroupInfo> _parser = new pb::MessageParser<ActiveSkillGroupInfo>(() => new ActiveSkillGroupInfo());
    public static pb::MessageParser<ActiveSkillGroupInfo> Parser { get { return _parser; } }

    private int skillGroup_;
    /// <summary>
    ///技能组
    /// </summary>
    public int skillGroup {
      get { return skillGroup_; }
      set {
        skillGroup_ = value;
      }
    }

    private int level_;
    /// <summary>
    ///技能组等级
    /// </summary>
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (skillGroup != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(skillGroup);
      }
      if (level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(level);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (skillGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(skillGroup);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            skillGroup = input.ReadInt32();
            break;
          }
          case 16: {
            level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SkillGroupInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<SkillGroupInfoResponse> _parser = new pb::MessageParser<SkillGroupInfoResponse>(() => new SkillGroupInfoResponse());
    public static pb::MessageParser<SkillGroupInfoResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::wolong.ActiveSkillGroupInfo> _repeated_activeSkillGroupInfos_codec
        = pb::FieldCodec.ForMessage(10, global::wolong.ActiveSkillGroupInfo.Parser);
    private readonly pbc::RepeatedField<global::wolong.ActiveSkillGroupInfo> activeSkillGroupInfos_ = new pbc::RepeatedField<global::wolong.ActiveSkillGroupInfo>();
    public pbc::RepeatedField<global::wolong.ActiveSkillGroupInfo> activeSkillGroupInfos {
      get { return activeSkillGroupInfos_; }
    }

    private int login_;
    /// <summary>
    ///是否登录 1为登录0不是
    /// </summary>
    public int login {
      get { return login_; }
      set {
        login_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      activeSkillGroupInfos_.WriteTo(output, _repeated_activeSkillGroupInfos_codec);
      if (login != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(login);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += activeSkillGroupInfos_.CalculateSize(_repeated_activeSkillGroupInfos_codec);
      if (login != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(login);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            activeSkillGroupInfos_.AddEntriesFrom(input, _repeated_activeSkillGroupInfos_codec);
            break;
          }
          case 16: {
            login = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SoldierSoulAwakenRequest : pb::IMessage {
    private static readonly pb::MessageParser<SoldierSoulAwakenRequest> _parser = new pb::MessageParser<SoldierSoulAwakenRequest>(() => new SoldierSoulAwakenRequest());
    public static pb::MessageParser<SoldierSoulAwakenRequest> Parser { get { return _parser; } }

    private long equipId_;
    /// <summary>
    ///消耗的装备唯一ID
    /// </summary>
    public long equipId {
      get { return equipId_; }
      set {
        equipId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (equipId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(equipId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (equipId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(equipId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            equipId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战魂觉醒信息
  /// </summary>
  public sealed class SoldierSoulInfo : pb::IMessage {
    private static readonly pb::MessageParser<SoldierSoulInfo> _parser = new pb::MessageParser<SoldierSoulInfo>(() => new SoldierSoulInfo());
    public static pb::MessageParser<SoldierSoulInfo> Parser { get { return _parser; } }

    private int id_;
    /// <summary>
    ///战魂id
    /// </summary>
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int stage_;
    /// <summary>
    ///战魂阶级
    /// </summary>
    public int stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(id);
      }
      if (stage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(stage);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(id);
      }
      if (stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(stage);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadInt32();
            break;
          }
          case 16: {
            stage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SoldierSoulInfoResponse : pb::IMessage {
    private static readonly pb::MessageParser<SoldierSoulInfoResponse> _parser = new pb::MessageParser<SoldierSoulInfoResponse>(() => new SoldierSoulInfoResponse());
    public static pb::MessageParser<SoldierSoulInfoResponse> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::wolong.SoldierSoulInfo> _repeated_soldierSoulInfos_codec
        = pb::FieldCodec.ForMessage(10, global::wolong.SoldierSoulInfo.Parser);
    private readonly pbc::RepeatedField<global::wolong.SoldierSoulInfo> soldierSoulInfos_ = new pbc::RepeatedField<global::wolong.SoldierSoulInfo>();
    public pbc::RepeatedField<global::wolong.SoldierSoulInfo> soldierSoulInfos {
      get { return soldierSoulInfos_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      soldierSoulInfos_.WriteTo(output, _repeated_soldierSoulInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += soldierSoulInfos_.CalculateSize(_repeated_soldierSoulInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            soldierSoulInfos_.AddEntriesFrom(input, _repeated_soldierSoulInfos_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
