// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldBoss.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace worldboss {

  #region Messages
  /// <summary>
  ///活动信息
  /// </summary>
  public sealed class ActivityInfo : pb::IMessage {
    private static readonly pb::MessageParser<ActivityInfo> _parser = new pb::MessageParser<ActivityInfo>(() => new ActivityInfo());
    public static pb::MessageParser<ActivityInfo> Parser { get { return _parser; } }

    private int activityStatus_;
    /// <summary>
    ///活动状态 1 未开启 2 进行中 3 已结结束
    /// </summary>
    public int activityStatus {
      get { return activityStatus_; }
      set {
        activityStatus_ = value;
      }
    }

    private global::worldboss.BlessInfo blessInfo_;
    /// <summary>
    ///次数信息;
    /// </summary>
    public global::worldboss.BlessInfo blessInfo {
      get { return blessInfo_; }
      set {
        blessInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (activityStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(activityStatus);
      }
      if (blessInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(blessInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (activityStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(activityStatus);
      }
      if (blessInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(blessInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            activityStatus = input.ReadInt32();
            break;
          }
          case 18: {
            if (blessInfo_ == null) {
              blessInfo_ = new global::worldboss.BlessInfo();
            }
            input.ReadMessage(blessInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///参与活动结果返回
  /// </summary>
  public sealed class JoinActivityResponse : pb::IMessage {
    private static readonly pb::MessageParser<JoinActivityResponse> _parser = new pb::MessageParser<JoinActivityResponse>(() => new JoinActivityResponse());
    public static pb::MessageParser<JoinActivityResponse> Parser { get { return _parser; } }

    private bool result_;
    /// <summary>
    ///结果
    /// </summary>
    public bool result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (result != false) {
        output.WriteRawTag(8);
        output.WriteBool(result);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (result != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///伤害排行榜项
  /// </summary>
  public sealed class DamageRankItem : pb::IMessage {
    private static readonly pb::MessageParser<DamageRankItem> _parser = new pb::MessageParser<DamageRankItem>(() => new DamageRankItem());
    public static pb::MessageParser<DamageRankItem> Parser { get { return _parser; } }

    private int rank_;
    /// <summary>
    ///排名
    /// </summary>
    public int rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    private long roleId_;
    /// <summary>
    ///玩家id
    /// </summary>
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private string roleName_ = "";
    /// <summary>
    ///玩家名称
    /// </summary>
    public string roleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int damage_;
    /// <summary>
    ///伤害值
    /// </summary>
    public int damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(rank);
      }
      if (roleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(roleId);
      }
      if (roleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(roleName);
      }
      if (damage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(damage);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(rank);
      }
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      if (roleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(roleName);
      }
      if (damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(damage);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            rank = input.ReadInt32();
            break;
          }
          case 16: {
            roleId = input.ReadInt64();
            break;
          }
          case 26: {
            roleName = input.ReadString();
            break;
          }
          case 32: {
            damage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///伤害排行榜
  /// </summary>
  public sealed class DamageRank : pb::IMessage {
    private static readonly pb::MessageParser<DamageRank> _parser = new pb::MessageParser<DamageRank>(() => new DamageRank());
    public static pb::MessageParser<DamageRank> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::worldboss.DamageRankItem> _repeated_ranks_codec
        = pb::FieldCodec.ForMessage(10, global::worldboss.DamageRankItem.Parser);
    private readonly pbc::RepeatedField<global::worldboss.DamageRankItem> ranks_ = new pbc::RepeatedField<global::worldboss.DamageRankItem>();
    /// <summary>
    ///排行榜
    /// </summary>
    public pbc::RepeatedField<global::worldboss.DamageRankItem> ranks {
      get { return ranks_; }
    }

    private int myRank_;
    /// <summary>
    ///我的排行
    /// </summary>
    public int myRank {
      get { return myRank_; }
      set {
        myRank_ = value;
      }
    }

    private long roleId_;
    /// <summary>
    ///玩家id
    /// </summary>
    public long roleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      ranks_.WriteTo(output, _repeated_ranks_codec);
      if (myRank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(myRank);
      }
      if (roleId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(roleId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += ranks_.CalculateSize(_repeated_ranks_codec);
      if (myRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(myRank);
      }
      if (roleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(roleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ranks_.AddEntriesFrom(input, _repeated_ranks_codec);
            break;
          }
          case 16: {
            myRank = input.ReadInt32();
            break;
          }
          case 24: {
            roleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///金币元宝鼓舞
  /// </summary>
  public sealed class BlessRequest : pb::IMessage {
    private static readonly pb::MessageParser<BlessRequest> _parser = new pb::MessageParser<BlessRequest>(() => new BlessRequest());
    public static pb::MessageParser<BlessRequest> Parser { get { return _parser; } }

    private int blessType_;
    /// <summary>
    ///金币鼓舞1，元宝鼓舞2;
    /// </summary>
    public int blessType {
      get { return blessType_; }
      set {
        blessType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (blessType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(blessType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (blessType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(blessType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            blessType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///鼓舞次数信息
  /// </summary>
  public sealed class BlessInfo : pb::IMessage {
    private static readonly pb::MessageParser<BlessInfo> _parser = new pb::MessageParser<BlessInfo>(() => new BlessInfo());
    public static pb::MessageParser<BlessInfo> Parser { get { return _parser; } }

    private int goldTimes_;
    public int goldTimes {
      get { return goldTimes_; }
      set {
        goldTimes_ = value;
      }
    }

    private int yuanbaoTimes_;
    public int yuanbaoTimes {
      get { return yuanbaoTimes_; }
      set {
        yuanbaoTimes_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (goldTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(goldTimes);
      }
      if (yuanbaoTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(yuanbaoTimes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (goldTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(goldTimes);
      }
      if (yuanbaoTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(yuanbaoTimes);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            goldTimes = input.ReadInt32();
            break;
          }
          case 16: {
            yuanbaoTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BossInfo : pb::IMessage {
    private static readonly pb::MessageParser<BossInfo> _parser = new pb::MessageParser<BossInfo>(() => new BossInfo());
    public static pb::MessageParser<BossInfo> Parser { get { return _parser; } }

    private int hp_;
    public int hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int maxHp_;
    public int maxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::fight.BufferInfo> _repeated_buffers_codec
        = pb::FieldCodec.ForMessage(26, global::fight.BufferInfo.Parser);
    private readonly pbc::RepeatedField<global::fight.BufferInfo> buffers_ = new pbc::RepeatedField<global::fight.BufferInfo>();
    /// <summary>
    ///buffer
    /// </summary>
    public pbc::RepeatedField<global::fight.BufferInfo> buffers {
      get { return buffers_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (hp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(hp);
      }
      if (maxHp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(maxHp);
      }
      buffers_.WriteTo(output, _repeated_buffers_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(hp);
      }
      if (maxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(maxHp);
      }
      size += buffers_.CalculateSize(_repeated_buffers_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            hp = input.ReadInt32();
            break;
          }
          case 16: {
            maxHp = input.ReadInt32();
            break;
          }
          case 26: {
            buffers_.AddEntriesFrom(input, _repeated_buffers_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
