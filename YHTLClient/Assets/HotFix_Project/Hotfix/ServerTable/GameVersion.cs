// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameVersion.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace gameversion {

  #region Messages
  public sealed class ClientVersionNtf : pb::IMessage {
    private static readonly pb::MessageParser<ClientVersionNtf> _parser = new pb::MessageParser<ClientVersionNtf>(() => new ClientVersionNtf());
    public static pb::MessageParser<ClientVersionNtf> Parser { get { return _parser; } }

    private string ver_ = "";
    public string ver {
      get { return ver_; }
      set {
        ver_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ver.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ver);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ver.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ver);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ver = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class UpdateState : pb::IMessage {
    private static readonly pb::MessageParser<UpdateState> _parser = new pb::MessageParser<UpdateState>(() => new UpdateState());
    public static pb::MessageParser<UpdateState> Parser { get { return _parser; } }

    private int state_;
    /// <summary>
    ///1不强制更新，2强制断线更新;
    /// </summary>
    public int state {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (state != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(state);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(state);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
