// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_table_skilldirection.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace TABLE {

  #region Messages
  public partial class SKILLDIRECTION : pb::IMessage {
    private static readonly pb::MessageParser<SKILLDIRECTION> _parser = new pb::MessageParser<SKILLDIRECTION>(() => new SKILLDIRECTION());
    public static pb::MessageParser<SKILLDIRECTION> Parser { get { return _parser; } }

    private int id_;
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private uint modelid_;
    public uint modelid {
      get { return modelid_; }
      set {
        modelid_ = value;
      }
    }

    private uint fangxiang_;
    public uint fangxiang {
      get { return fangxiang_; }
      set {
        fangxiang_ = value;
      }
    }

    private int x_;
    public int x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private int y_;
    public int y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private uint maodian_;
    /// <summary>
    /// string des = 7;
    /// sint32 PrimaryKey = 8;
    /// </summary>
    public uint maodian {
      get { return maodian_; }
      set {
        maodian_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(id);
      }
      if (modelid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(modelid);
      }
      if (fangxiang != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(fangxiang);
      }
      if (x != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(x);
      }
      if (y != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(y);
      }
      if (maodian != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(maodian);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(id);
      }
      if (modelid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(modelid);
      }
      if (fangxiang != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(fangxiang);
      }
      if (x != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(x);
      }
      if (y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(y);
      }
      if (maodian != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(maodian);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadSInt32();
            break;
          }
          case 16: {
            modelid = input.ReadUInt32();
            break;
          }
          case 24: {
            fangxiang = input.ReadUInt32();
            break;
          }
          case 32: {
            x = input.ReadSInt32();
            break;
          }
          case 40: {
            y = input.ReadSInt32();
            break;
          }
          case 48: {
            maodian = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public partial class SKILLDIRECTIONARRAY : pb::IMessage {
    private static readonly pb::MessageParser<SKILLDIRECTIONARRAY> _parser = new pb::MessageParser<SKILLDIRECTIONARRAY>(() => new SKILLDIRECTIONARRAY());
    public static pb::MessageParser<SKILLDIRECTIONARRAY> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::TABLE.SKILLDIRECTION> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::TABLE.SKILLDIRECTION.Parser);
    private readonly pbc::RepeatedField<global::TABLE.SKILLDIRECTION> rows_ = new pbc::RepeatedField<global::TABLE.SKILLDIRECTION>();
    public pbc::RepeatedField<global::TABLE.SKILLDIRECTION> rows {
      get { return rows_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
