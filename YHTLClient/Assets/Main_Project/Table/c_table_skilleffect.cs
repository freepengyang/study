// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_table_skilleffect.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace TABLE {

  #region Messages
  public partial class SKILLEFFECT : pb::IMessage {
    private static readonly pb::MessageParser<SKILLEFFECT> _parser = new pb::MessageParser<SKILLEFFECT>(() => new SKILLEFFECT());
    public static pb::MessageParser<SKILLEFFECT> Parser { get { return _parser; } }

    private int id_;
    public int id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int name_;
    public int name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    private int model_;
    public int model {
      get { return model_; }
      set {
        model_ = value;
      }
    }

    private int delaytime_;
    public int delaytime {
      get { return delaytime_; }
      set {
        delaytime_ = value;
      }
    }

    private int scale_;
    public int scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    private int layer_;
    public int layer {
      get { return layer_; }
      set {
        layer_ = value;
      }
    }

    private int zhenlv_;
    public int zhenlv {
      get { return zhenlv_; }
      set {
        zhenlv_ = value;
      }
    }

    private int cengji_;
    public int cengji {
      get { return cengji_; }
      set {
        cengji_ = value;
      }
    }

    private int xuanzhuan_;
    public int xuanzhuan {
      get { return xuanzhuan_; }
      set {
        xuanzhuan_ = value;
      }
    }

    private int modelframelist_;
    public int modelframelist {
      get { return modelframelist_; }
      set {
        modelframelist_ = value;
      }
    }

    private int frame_;
    public int frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    private int model2_;
    public int model2 {
      get { return model2_; }
      set {
        model2_ = value;
      }
    }

    private int delaytime2_;
    public int delaytime2 {
      get { return delaytime2_; }
      set {
        delaytime2_ = value;
      }
    }

    private int scale2_;
    public int scale2 {
      get { return scale2_; }
      set {
        scale2_ = value;
      }
    }

    private int layer2_;
    public int layer2 {
      get { return layer2_; }
      set {
        layer2_ = value;
      }
    }

    private int zhenlv2_;
    public int zhenlv2 {
      get { return zhenlv2_; }
      set {
        zhenlv2_ = value;
      }
    }

    private int cengji2_;
    public int cengji2 {
      get { return cengji2_; }
      set {
        cengji2_ = value;
      }
    }

    private int xuanzhuan2_;
    public int xuanzhuan2 {
      get { return xuanzhuan2_; }
      set {
        xuanzhuan2_ = value;
      }
    }

    private int modelframelist2_;
    public int modelframelist2 {
      get { return modelframelist2_; }
      set {
        modelframelist2_ = value;
      }
    }

    private int frame2_;
    public int frame2 {
      get { return frame2_; }
      set {
        frame2_ = value;
      }
    }

    private int model3_;
    public int model3 {
      get { return model3_; }
      set {
        model3_ = value;
      }
    }

    private int delaytime3_;
    public int delaytime3 {
      get { return delaytime3_; }
      set {
        delaytime3_ = value;
      }
    }

    private int scale3_;
    public int scale3 {
      get { return scale3_; }
      set {
        scale3_ = value;
      }
    }

    private int layer3_;
    public int layer3 {
      get { return layer3_; }
      set {
        layer3_ = value;
      }
    }

    private int zhenlv3_;
    public int zhenlv3 {
      get { return zhenlv3_; }
      set {
        zhenlv3_ = value;
      }
    }

    private int cengji3_;
    public int cengji3 {
      get { return cengji3_; }
      set {
        cengji3_ = value;
      }
    }

    private int xuanzhuan3_;
    public int xuanzhuan3 {
      get { return xuanzhuan3_; }
      set {
        xuanzhuan3_ = value;
      }
    }

    private int modelframelist3_;
    public int modelframelist3 {
      get { return modelframelist3_; }
      set {
        modelframelist3_ = value;
      }
    }

    private int frame3_;
    public int frame3 {
      get { return frame3_; }
      set {
        frame3_ = value;
      }
    }

    private int model4_;
    public int model4 {
      get { return model4_; }
      set {
        model4_ = value;
      }
    }

    private int delaytime4_;
    public int delaytime4 {
      get { return delaytime4_; }
      set {
        delaytime4_ = value;
      }
    }

    private int scale4_;
    public int scale4 {
      get { return scale4_; }
      set {
        scale4_ = value;
      }
    }

    private int layer4_;
    public int layer4 {
      get { return layer4_; }
      set {
        layer4_ = value;
      }
    }

    private int zhenlv4_;
    public int zhenlv4 {
      get { return zhenlv4_; }
      set {
        zhenlv4_ = value;
      }
    }

    private int cengji4_;
    public int cengji4 {
      get { return cengji4_; }
      set {
        cengji4_ = value;
      }
    }

    private int xuanzhuan4_;
    public int xuanzhuan4 {
      get { return xuanzhuan4_; }
      set {
        xuanzhuan4_ = value;
      }
    }

    private int modelframelist4_;
    public int modelframelist4 {
      get { return modelframelist4_; }
      set {
        modelframelist4_ = value;
      }
    }

    private int footEffectType_;
    public int footEffectType {
      get { return footEffectType_; }
      set {
        footEffectType_ = value;
      }
    }

    private int frame4_;
    public int frame4 {
      get { return frame4_; }
      set {
        frame4_ = value;
      }
    }

    private int beginDelay_;
    public int beginDelay {
      get { return beginDelay_; }
      set {
        beginDelay_ = value;
      }
    }

    private int beAttackDelayTime_;
    public int beAttackDelayTime {
      get { return beAttackDelayTime_; }
      set {
        beAttackDelayTime_ = value;
      }
    }

    private int removedelay_;
    public int removedelay {
      get { return removedelay_; }
      set {
        removedelay_ = value;
      }
    }

    private int startPlayHurt_;
    public int startPlayHurt {
      get { return startPlayHurt_; }
      set {
        startPlayHurt_ = value;
      }
    }

    private int num_;
    public int num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    private string point_ = "";
    public string point {
      get { return point_; }
      set {
        point_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int cameraShakeDelay_;
    public int cameraShakeDelay {
      get { return cameraShakeDelay_; }
      set {
        cameraShakeDelay_ = value;
      }
    }

    private int cameraShakeTime_;
    public int CameraShakeTime {
      get { return cameraShakeTime_; }
      set {
        cameraShakeTime_ = value;
      }
    }

    private int cameraShakeAmplitude_;
    /// <summary>
    /// sint32 PrimaryKey = 49;
    /// </summary>
    public int CameraShakeAmplitude {
      get { return cameraShakeAmplitude_; }
      set {
        cameraShakeAmplitude_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(id);
      }
      if (name != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(name);
      }
      if (model != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(model);
      }
      if (delaytime != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(delaytime);
      }
      if (scale != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(scale);
      }
      if (layer != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(layer);
      }
      if (zhenlv != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(zhenlv);
      }
      if (cengji != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(cengji);
      }
      if (xuanzhuan != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(xuanzhuan);
      }
      if (modelframelist != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(modelframelist);
      }
      if (frame != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(frame);
      }
      if (model2 != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(model2);
      }
      if (delaytime2 != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(delaytime2);
      }
      if (scale2 != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(scale2);
      }
      if (layer2 != 0) {
        output.WriteRawTag(120);
        output.WriteSInt32(layer2);
      }
      if (zhenlv2 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(zhenlv2);
      }
      if (cengji2 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteSInt32(cengji2);
      }
      if (xuanzhuan2 != 0) {
        output.WriteRawTag(144, 1);
        output.WriteSInt32(xuanzhuan2);
      }
      if (modelframelist2 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteSInt32(modelframelist2);
      }
      if (frame2 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteSInt32(frame2);
      }
      if (model3 != 0) {
        output.WriteRawTag(168, 1);
        output.WriteSInt32(model3);
      }
      if (delaytime3 != 0) {
        output.WriteRawTag(176, 1);
        output.WriteSInt32(delaytime3);
      }
      if (scale3 != 0) {
        output.WriteRawTag(184, 1);
        output.WriteSInt32(scale3);
      }
      if (layer3 != 0) {
        output.WriteRawTag(192, 1);
        output.WriteSInt32(layer3);
      }
      if (zhenlv3 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteSInt32(zhenlv3);
      }
      if (cengji3 != 0) {
        output.WriteRawTag(208, 1);
        output.WriteSInt32(cengji3);
      }
      if (xuanzhuan3 != 0) {
        output.WriteRawTag(216, 1);
        output.WriteSInt32(xuanzhuan3);
      }
      if (modelframelist3 != 0) {
        output.WriteRawTag(224, 1);
        output.WriteSInt32(modelframelist3);
      }
      if (frame3 != 0) {
        output.WriteRawTag(232, 1);
        output.WriteSInt32(frame3);
      }
      if (model4 != 0) {
        output.WriteRawTag(240, 1);
        output.WriteSInt32(model4);
      }
      if (delaytime4 != 0) {
        output.WriteRawTag(248, 1);
        output.WriteSInt32(delaytime4);
      }
      if (scale4 != 0) {
        output.WriteRawTag(128, 2);
        output.WriteSInt32(scale4);
      }
      if (layer4 != 0) {
        output.WriteRawTag(136, 2);
        output.WriteSInt32(layer4);
      }
      if (zhenlv4 != 0) {
        output.WriteRawTag(144, 2);
        output.WriteSInt32(zhenlv4);
      }
      if (cengji4 != 0) {
        output.WriteRawTag(152, 2);
        output.WriteSInt32(cengji4);
      }
      if (xuanzhuan4 != 0) {
        output.WriteRawTag(160, 2);
        output.WriteSInt32(xuanzhuan4);
      }
      if (modelframelist4 != 0) {
        output.WriteRawTag(168, 2);
        output.WriteSInt32(modelframelist4);
      }
      if (footEffectType != 0) {
        output.WriteRawTag(176, 2);
        output.WriteSInt32(footEffectType);
      }
      if (frame4 != 0) {
        output.WriteRawTag(184, 2);
        output.WriteSInt32(frame4);
      }
      if (beginDelay != 0) {
        output.WriteRawTag(192, 2);
        output.WriteSInt32(beginDelay);
      }
      if (beAttackDelayTime != 0) {
        output.WriteRawTag(200, 2);
        output.WriteSInt32(beAttackDelayTime);
      }
      if (removedelay != 0) {
        output.WriteRawTag(208, 2);
        output.WriteSInt32(removedelay);
      }
      if (startPlayHurt != 0) {
        output.WriteRawTag(216, 2);
        output.WriteSInt32(startPlayHurt);
      }
      if (num != 0) {
        output.WriteRawTag(224, 2);
        output.WriteSInt32(num);
      }
      if (point.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(point);
      }
      if (cameraShakeDelay != 0) {
        output.WriteRawTag(240, 2);
        output.WriteSInt32(cameraShakeDelay);
      }
      if (CameraShakeTime != 0) {
        output.WriteRawTag(248, 2);
        output.WriteSInt32(CameraShakeTime);
      }
      if (CameraShakeAmplitude != 0) {
        output.WriteRawTag(128, 3);
        output.WriteSInt32(CameraShakeAmplitude);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(id);
      }
      if (name != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(name);
      }
      if (model != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(model);
      }
      if (delaytime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(delaytime);
      }
      if (scale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(scale);
      }
      if (layer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(layer);
      }
      if (zhenlv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(zhenlv);
      }
      if (cengji != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(cengji);
      }
      if (xuanzhuan != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(xuanzhuan);
      }
      if (modelframelist != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(modelframelist);
      }
      if (frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(frame);
      }
      if (model2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(model2);
      }
      if (delaytime2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(delaytime2);
      }
      if (scale2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(scale2);
      }
      if (layer2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(layer2);
      }
      if (zhenlv2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(zhenlv2);
      }
      if (cengji2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(cengji2);
      }
      if (xuanzhuan2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(xuanzhuan2);
      }
      if (modelframelist2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(modelframelist2);
      }
      if (frame2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(frame2);
      }
      if (model3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(model3);
      }
      if (delaytime3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(delaytime3);
      }
      if (scale3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(scale3);
      }
      if (layer3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(layer3);
      }
      if (zhenlv3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(zhenlv3);
      }
      if (cengji3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(cengji3);
      }
      if (xuanzhuan3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(xuanzhuan3);
      }
      if (modelframelist3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(modelframelist3);
      }
      if (frame3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(frame3);
      }
      if (model4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(model4);
      }
      if (delaytime4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(delaytime4);
      }
      if (scale4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(scale4);
      }
      if (layer4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(layer4);
      }
      if (zhenlv4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(zhenlv4);
      }
      if (cengji4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(cengji4);
      }
      if (xuanzhuan4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(xuanzhuan4);
      }
      if (modelframelist4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(modelframelist4);
      }
      if (footEffectType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(footEffectType);
      }
      if (frame4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(frame4);
      }
      if (beginDelay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(beginDelay);
      }
      if (beAttackDelayTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(beAttackDelayTime);
      }
      if (removedelay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(removedelay);
      }
      if (startPlayHurt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(startPlayHurt);
      }
      if (num != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(num);
      }
      if (point.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(point);
      }
      if (cameraShakeDelay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(cameraShakeDelay);
      }
      if (CameraShakeTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(CameraShakeTime);
      }
      if (CameraShakeAmplitude != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(CameraShakeAmplitude);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id = input.ReadSInt32();
            break;
          }
          case 16: {
            name = input.ReadSInt32();
            break;
          }
          case 24: {
            model = input.ReadSInt32();
            break;
          }
          case 32: {
            delaytime = input.ReadSInt32();
            break;
          }
          case 40: {
            scale = input.ReadSInt32();
            break;
          }
          case 48: {
            layer = input.ReadSInt32();
            break;
          }
          case 56: {
            zhenlv = input.ReadSInt32();
            break;
          }
          case 64: {
            cengji = input.ReadSInt32();
            break;
          }
          case 72: {
            xuanzhuan = input.ReadSInt32();
            break;
          }
          case 80: {
            modelframelist = input.ReadSInt32();
            break;
          }
          case 88: {
            frame = input.ReadSInt32();
            break;
          }
          case 96: {
            model2 = input.ReadSInt32();
            break;
          }
          case 104: {
            delaytime2 = input.ReadSInt32();
            break;
          }
          case 112: {
            scale2 = input.ReadSInt32();
            break;
          }
          case 120: {
            layer2 = input.ReadSInt32();
            break;
          }
          case 128: {
            zhenlv2 = input.ReadSInt32();
            break;
          }
          case 136: {
            cengji2 = input.ReadSInt32();
            break;
          }
          case 144: {
            xuanzhuan2 = input.ReadSInt32();
            break;
          }
          case 152: {
            modelframelist2 = input.ReadSInt32();
            break;
          }
          case 160: {
            frame2 = input.ReadSInt32();
            break;
          }
          case 168: {
            model3 = input.ReadSInt32();
            break;
          }
          case 176: {
            delaytime3 = input.ReadSInt32();
            break;
          }
          case 184: {
            scale3 = input.ReadSInt32();
            break;
          }
          case 192: {
            layer3 = input.ReadSInt32();
            break;
          }
          case 200: {
            zhenlv3 = input.ReadSInt32();
            break;
          }
          case 208: {
            cengji3 = input.ReadSInt32();
            break;
          }
          case 216: {
            xuanzhuan3 = input.ReadSInt32();
            break;
          }
          case 224: {
            modelframelist3 = input.ReadSInt32();
            break;
          }
          case 232: {
            frame3 = input.ReadSInt32();
            break;
          }
          case 240: {
            model4 = input.ReadSInt32();
            break;
          }
          case 248: {
            delaytime4 = input.ReadSInt32();
            break;
          }
          case 256: {
            scale4 = input.ReadSInt32();
            break;
          }
          case 264: {
            layer4 = input.ReadSInt32();
            break;
          }
          case 272: {
            zhenlv4 = input.ReadSInt32();
            break;
          }
          case 280: {
            cengji4 = input.ReadSInt32();
            break;
          }
          case 288: {
            xuanzhuan4 = input.ReadSInt32();
            break;
          }
          case 296: {
            modelframelist4 = input.ReadSInt32();
            break;
          }
          case 304: {
            footEffectType = input.ReadSInt32();
            break;
          }
          case 312: {
            frame4 = input.ReadSInt32();
            break;
          }
          case 320: {
            beginDelay = input.ReadSInt32();
            break;
          }
          case 328: {
            beAttackDelayTime = input.ReadSInt32();
            break;
          }
          case 336: {
            removedelay = input.ReadSInt32();
            break;
          }
          case 344: {
            startPlayHurt = input.ReadSInt32();
            break;
          }
          case 352: {
            num = input.ReadSInt32();
            break;
          }
          case 362: {
            point = input.ReadString();
            break;
          }
          case 368: {
            cameraShakeDelay = input.ReadSInt32();
            break;
          }
          case 376: {
            CameraShakeTime = input.ReadSInt32();
            break;
          }
          case 384: {
            CameraShakeAmplitude = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public partial class SKILLEFFECTARRAY : pb::IMessage {
    private static readonly pb::MessageParser<SKILLEFFECTARRAY> _parser = new pb::MessageParser<SKILLEFFECTARRAY>(() => new SKILLEFFECTARRAY());
    public static pb::MessageParser<SKILLEFFECTARRAY> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::TABLE.SKILLEFFECT> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::TABLE.SKILLEFFECT.Parser);
    private readonly pbc::RepeatedField<global::TABLE.SKILLEFFECT> rows_ = new pbc::RepeatedField<global::TABLE.SKILLEFFECT>();
    public pbc::RepeatedField<global::TABLE.SKILLEFFECT> rows {
      get { return rows_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
