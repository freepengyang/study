// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapEditor.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace MapEditor
{

    #region Enums
    public enum CellType
    {
        /// <summary>
        /// 正常
        /// </summary>
        Normal = 0,
        /// <summary>
        /// 透明
        /// </summary>
        Lucency = 1,
        /// <summary>
        /// 阻挡
        /// </summary>
        Resistance = 2,
        /// <summary>
        /// 保护（安全区）
        /// </summary>
        Protect = 3,
        /// <summary>
        /// 人物默认出生点
        /// </summary>
        Born = 4,
        /// <summary>
        /// 可摆摊(假的)
        /// </summary>
        Stallge = 5,
        /// <summary>
        /// 可挖矿
        /// </summary>
        Diggable = 6,
        /// <summary>
        /// 传送点
        /// </summary>
        Transmit = 7,
        /// <summary>
        /// 复活点
        /// </summary>
        Resurgence = 8,
        /// <summary>
        ///保护区特效点
        /// </summary>
        SafeEffectPoint = 9,
        /// <summary>
        ///隔断点
        /// </summary>
        Separate = 10,
        /// <summary>
        ///辅助特殊类型1
        /// </summary>
        Special_1 = 11,
        /// <summary>
        ///辅助特殊类型2
        /// </summary>
        Special_2 = 12,
        /// <summary>
        ///辅助特殊类型3
        /// </summary>
        Special_3 = 13,
        /// <summary>
        ///辅助特殊类型4
        /// </summary>
        Special_4 = 14,
        /// <summary>
        ///辅助特殊类型5
        /// </summary>
        Special_5 = 15,
        /// <summary>
        ///辅助特殊类型6
        /// </summary>
        Special_6 = 16,
        /// <summary>
        ///辅助特殊类型7
        /// </summary>
        Special_7 = 17,
        /// <summary>
        ///辅助特殊类型8
        /// </summary>
        Special_8 = 18,
        /// <summary>
        ///可寻路
        /// </summary>
        Separate_1 = 19,
        /// <summary>
        ///天气1
        /// </summary>
        Weather1 = 20,
        /// <summary>
        ///天气2
        /// </summary>
        Weather2 = 21,
        /// <summary>
        ///天气3
        /// </summary>
        Weather3 = 22,
        /// <summary>
        ///摆摊区
        /// </summary>
        Stall = 23,
    }

    #endregion

    #region Messages
    public sealed class MapInfo : pb::IMessage
    {
        private static readonly pb::MessageParser<MapInfo> _parser = new pb::MessageParser<MapInfo>(() => new MapInfo());
        public static pb::MessageParser<MapInfo> Parser { get { return _parser; } }

        private int type_;
        public int Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(Type);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
            }
            return size;
        }

        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 16:
                        {
                            Type = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed class MapInfoList : pb::IMessage
    {
        private static readonly pb::MessageParser<MapInfoList> _parser = new pb::MessageParser<MapInfoList>(() => new MapInfoList());
        public static pb::MessageParser<MapInfoList> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::MapEditor.MapInfo> _repeated_grid_codec
            = pb::FieldCodec.ForMessage(10, global::MapEditor.MapInfo.Parser);
        private readonly pbc::RepeatedField<global::MapEditor.MapInfo> grid_ = new pbc::RepeatedField<global::MapEditor.MapInfo>();
        /// <summary>
        ///格子列表
        /// </summary>
        public pbc::RepeatedField<global::MapEditor.MapInfo> grid
        {
            get { return grid_; }
        }

        public void WriteTo(pb::CodedOutputStream output)
        {
            grid_.WriteTo(output, _repeated_grid_codec);
        }

        public int CalculateSize()
        {
            int size = 0;
            size += grid_.CalculateSize(_repeated_grid_codec);
            return size;
        }

        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            grid_.AddEntriesFrom(input, _repeated_grid_codec);
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
